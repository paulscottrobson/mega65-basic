
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q --m4510 -D CPU=4510 -D INTERFACE=2 -b -L rom.lst -o rom.bin basic.asm
; Thu Aug 15 21:55:19 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=4510					CPU=4510
=2					INTERFACE=2

;******  Processing input file: basic.asm

.0000	ea		nop				nop

;******  Processing file: data.asm

>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zLTemp1:	.dword ?						; long word (used in multiply)
>001a					zGenPtr:	.word ? 						; general pointer.
>0200					IFT_XCursor:.byte ?							; current logical position on screen
>0201					IFT_YCursor:.byte ?
>0202					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0266					IFT_LineBuffer: .fill 100 					; line input buffer.
>0300					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>0304					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>0305					XS_Type 	.byte ? 						; bit 7 sign (float only)
=774					XS2_Mantissa = XS_Mantissa+6
=778					XS2_Exponent = XS_Exponent+6
=779					XS2_Type = XS_Type+6
>0400					Num_Buffer	.fill 	32 						; buffer for numeric conversions
>0420					NumBufX 	.byte 	?						; buffer index position
>0421					NumSuppress	.byte 	?						; leading zero suppression flag
>0422					NumConvCount .byte 	? 						; count for conversions.
>0423					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>0425					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>0427					Tim_SR:		.byte ? 						; Processor Status
>0428					Tim_A:		.byte ? 						; Processor Registers
>0429					Tim_X:		.byte ?
>042a					Tim_Y:		.byte ?
>042b					Tim_Z:		.byte ?
>042c					Tim_SP:		.byte ?							; Stack Pointer
>042d					ExpTemp:	.byte ?							; Working temp for exponents.
>042e					ExpCount:	.byte ? 						; Count of decimal exponents.

;******  Return to file: basic.asm

>8000	48 65 6c 6c 6f 2c 20 74				.text 		"Hello, tim !"
>8008	69 6d 20 21

;******  Processing file: utility/tim.asm

.a000					TIM_Error:
.a000	20 83 e9	jsr $e983			jsr 	IFT_UpLine 					; go up one line.
.a003	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.a005	80 02		bra $a009			bra 	TIM_ShowPrompt
.a007					TIM_NewCommand:
.a007	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.a009					TIM_ShowPrompt:
.a009	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.a00c	20 49 ea	jsr $ea49			jsr 	IFT_ReadLine	 			; get character, go to next line
.a00f	20 ab e9	jsr $e9ab			jsr 	IFT_NewLine					; go to next line.
.a012	86 10		stx $10				stx 	zTemp1 						; save line read address
.a014	84 11		sty $11				sty 	zTemp1+1
.a016	a0 01		ldy #$01			ldy 	#1 							; get first character after the prompt.
.a018	b1 10		lda ($10),y			lda 	(zTemp1),y
.a01a	c9 52		cmp #$52			cmp 	#"R"						; show registers
.a01c	f0 6e		beq $a08c			beq 	TIM_ShowRegisters
.a01e	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.a020	f0 12		beq $a034			beq 	TIM_ShowMemory
.a022	c9 47		cmp #$47			cmp 	#"G"						; execute
.a024	f0 49		beq $a06f			beq 	TIM_Execute
.a026	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.a028	f0 07		beq $a031			beq 	TIM_GoLoadMemory
.a02a	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.a02c	d0 d2		bne $a000			bne 	TIM_Error
.a02e	4c b0 a1	jmp $a1b0			jmp 	TIM_UpdateRegisters
.a031					TIM_GoLoadMemory:
.a031	4c db a1	jmp $a1db			jmp 	TIM_LoadMemory
.a034					TIM_ShowMemory:
.a034	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.a037	b0 c7		bcs $a000			bcs 	TIM_Error
.a039	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.a03b	85 12		sta $12				sta 	zTemp2
.a03d	a5 15		lda $15				lda 	zTemp3+1
.a03f	85 13		sta $13				sta 	zTemp2+1
.a041	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.a044	90 08		bcc $a04e			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.a046	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.a048	85 14		sta $14				sta 	zTemp3
.a04a	a5 13		lda $13				lda 	zTemp2+1
.a04c	85 15		sta $15				sta 	zTemp3+1
.a04e					_TIMSM_Start:
.a04e	20 01 a1	jsr $a101			jsr 	TIM_WriteLine 				; write one line of hex out
.a051	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.a053	18		clc				clc
.a054	69 10		adc #$10			adc 	#16
.a056	85 12		sta $12				sta 	zTemp2
.a058	90 02		bcc $a05c			bcc 	_TIMSM_NoCarry
.a05a	e6 13		inc $13				inc 	zTemp2+1
.a05c					_TIMSM_NoCarry:
.a05c	20 36 e0	jsr $e036			jsr 	IF_CheckBreak 				; check CTL+C
.a05f	d0 0b		bne $a06c			bne 	_TIMSM_Ends 				; if pressed break out.
.a061	38		sec				sec 								; check past the end address in zTemp3
.a062	a5 14		lda $14				lda 	zTemp3
.a064	e5 12		sbc $12				sbc 	zTemp2
.a066	a5 15		lda $15				lda 	zTemp3+1
.a068	e5 13		sbc $13				sbc 	zTemp2+1
.a06a	10 e2		bpl $a04e			bpl 	_TIMSM_Start
.a06c					_TIMSM_Ends:
.a06c	4c 07 a0	jmp $a007			jmp 	TIM_NewCommand
.a06f					TIM_Execute:
.a06f	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; get the execute address
.a072	b0 8c		bcs $a000			bcs 	TIM_Error 					; not legitimate
.a074	ae 2c 04	ldx $042c			ldx 	TIM_SP 						; set up SP
.a077	9a		txs				txs
.a078	ad 27 04	lda $0427			lda 	TIM_SR 						; Status for PLP
.a07b	48		pha				pha
.a07c	ad 28 04	lda $0428			lda 	TIM_A 						; restore AXYZ
.a07f	ae 29 04	ldx $0429			ldx 	TIM_X
.a082	ac 2a 04	ldy $042a			ldy 	TIM_Y
.a085	ab 2b 04	ldz $042b			ldz 	TIM_Z
.a088	28		plp				plp 								; and PS Byte.
.a089	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.a08c					TIM_Start:
.a08c					TIM_ShowRegisters:
.a08c	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.a08f	8d 26 04	sta $0426			sta 	TIM_IRQ+1
.a092	ad ff ff	lda $ffff			lda 	$FFFF
.a095	8d 25 04	sta $0425			sta 	TIM_IRQ
.a098	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.a09a					_TIMSR_Text:
.a09a	bd c5 a0	lda $a0c5,x			lda 	_TIMSR_Label,x
.a09d	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a0a0	e8		inx				inx
.a0a1	e0 23		cpx #$23			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.a0a3	d0 f5		bne $a09a			bne 	_TIMSR_Text
.a0a5	a2 00		ldx #$00			ldx 	#0 							; output Register Line.
.a0a7					_TIMSR_LoopSpace:
.a0a7	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.a0a9	b0 04		bcs $a0af			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.a0ab	8a		txa				txa
.a0ac	4a		lsr a				lsr 	a
.a0ad	b0 05		bcs $a0b4			bcs 	_TIMSR_NoSpace
.a0af					_TIMSR_Space:
.a0af	a9 20		lda #$20			lda 	#" "
.a0b1	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a0b4					_TIMSR_NoSpace:
.a0b4	bd 23 04	lda $0423,x			lda 	TIM_PC,x 					; output hex value.
.a0b7	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.a0ba	e8		inx				inx
.a0bb	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.a0bd	d0 e8		bne $a0a7			bne 	_TimSR_LoopSpace
.a0bf	20 ab e9	jsr $e9ab			jsr 	IFT_NewLine 				; new line
.a0c2	4c 07 a0	jmp $a007			jmp	 	TIM_NewCommand 				; new command.
.a0c5					_TIMSR_Label:
>a0c5	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR ZR SP",13,".; "
>a0cd	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>a0dd	52 20 5a 52 20 53 50 0d 2e 3b 20
.a0e8					_TIMSR_LabelEnd:
.a0e8					TIM_WriteHex:
.a0e8	48		pha				pha 								; save A
.a0e9	4a		lsr a				lsr 	a 							; shift MSB->LSB
.a0ea	4a		lsr a				lsr 	a
.a0eb	4a		lsr a				lsr 	a
.a0ec	4a		lsr a				lsr 	a
.a0ed	20 f1 a0	jsr $a0f1			jsr 	_TIMWH_Nibble 				; print MSB
.a0f0	68		pla				pla 								; restore and print LSB
.a0f1					_TIMWH_Nibble:
.a0f1	48		pha				pha
.a0f2	29 0f		and #$0f			and 	#15 						; mask out
.a0f4	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a0f6	90 02		bcc $a0fa			bcc 	_TIMWHNoLetter
.a0f8	69 06		adc #$06			adc 	#6
.a0fa					_TIMWHNoLetter:
.a0fa	69 30		adc #$30			adc 	#48
.a0fc	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter 			; print it out.
.a0ff	68		pla				pla
.a100	60		rts				rts
.a101					TIM_WriteLine:
.a101	a9 2e		lda #$2e			lda 	#"." 						; prompt
.a103	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a106	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.a108	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a10b	a5 13		lda $13				lda 	zTemp2+1 					; write address
.a10d	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.a110	a5 12		lda $12				lda 	zTemp2
.a112	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.a115	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.a117					_TIMWL_Loop:
.a117	a9 20		lda #$20			lda 	#" "
.a119	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a11c	b1 12		lda ($12),y			lda 	(zTemp2),y
.a11e	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.a121	c8		iny				iny
.a122	c0 10		cpy #$10			cpy 	#16
.a124	d0 f1		bne $a117			bne 	_TIMWL_Loop
.a126	4c ab e9	jmp $e9ab			jmp 	IFT_NewLine 				; new line and exit
.a129					TIM_GetHex:
.a129	c8		iny				iny
.a12a	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.a12c	c9 20		cmp #$20			cmp 	#32
.a12e	f0 f9		beq $a129			beq 	TIM_GetHex
.a130	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.a132	f0 f5		beq $a129			beq 	TIM_GetHex
.a134	20 5d a1	jsr $a15d			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.a137	b0 23		bcs $a15c			bcs 	_TIMGH_Exit					; if first bad then exit now.
.a139	a9 00		lda #$00			lda 	#0 							; zero result
.a13b	85 14		sta $14				sta 	zTemp3
.a13d	85 15		sta $15				sta 	zTemp3+1
.a13f					_TIM_GHLoop:
.a13f	20 5d a1	jsr $a15d			jsr 	TIM_GetHexCharacter 		; get next character
.a142	b0 17		bcs $a15b			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.a144	c8		iny				iny 								; skip over it.
.a145	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.a147	26 15		rol $15				rol 	zTemp3+1
.a149	06 14		asl $14				asl 	zTemp3 						; now x 2
.a14b	26 15		rol $15				rol 	zTemp3+1
.a14d	06 14		asl $14				asl 	zTemp3						; now x 4
.a14f	26 15		rol $15				rol 	zTemp3+1
.a151	06 14		asl $14				asl 	zTemp3 						; now x 8
.a153	26 15		rol $15				rol 	zTemp3+1
.a155	05 14		ora $14				ora 	zTemp3 						; OR result in
.a157	85 14		sta $14				sta 	zTemp3
.a159	80 e4		bra $a13f			bra 	_TIM_GHLoop 				; loop round again.
.a15b					_TIMGH_Okay:
.a15b	18		clc				clc
.a15c					_TIMGH_Exit:
.a15c	60		rts				rts
.a15d					TIM_GetHexCharacter:
.a15d	b1 10		lda ($10),y			lda 	(zTemp1),y
.a15f	38		sec				sec
.a160	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.a162	90 0e		bcc $a172			bcc 	_TIM_GHCFail
.a164	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.a166	90 0b		bcc $a173			bcc 	_TIM_GHCExit
.a168	c9 11		cmp #$11			cmp 	#65-48						; < A
.a16a	90 06		bcc $a172			bcc		_TIM_GHCFail
.a16c	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.a16e	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.a170	90 01		bcc $a173			bcc		_TIM_GHCExit
.a172					_TIM_GHCFail:
.a172	38		sec				sec
.a173					_TIM_GHCExit:
.a173	60		rts				rts
.a174					TIM_BreakVector:
.a174	da		phx				phx									; save X/A on stack
.a175	48		pha				pha
.a176	ba		tsx				tsx 								; X points to S
.a177	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.a17a	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.a17c	d0 03		bne $a181			bne 	_TIMBreak					; if set, it's BRK
.a17e	68		pla				pla 								; abandon routine.
.a17f	fa		plx				plx
.a180	40		rti				rti
.a181					_TIMBreak:
.a181	68		pla				pla 								; save A X Y and maybe Z
.a182	8d 28 04	sta $0428			sta 	TIM_A
.a185	fa		plx				plx
.a186	8e 29 04	stx $0429			stx 	TIM_X
.a189	8c 2a 04	sty $042a			sty 	TIM_Y
.a18c	9c 2b 04	stz $042b			stz 	TIM_Z
.a18f	68		pla				pla 								; get Status Register
.a190	8d 27 04	sta $0427			sta 	TIM_SR
.a193	68		pla				pla
.a194	8d 24 04	sta $0424			sta 	TIM_PC+1 					; save calling address
.a197	68		pla				pla
.a198	8d 23 04	sta $0423			sta 	TIM_PC 						; high byte
.a19b	ad 24 04	lda $0424			lda 	TIM_PC+1 					; dec PC to point right.
.a19e	d0 03		bne $a1a3			bne 	_TIMDecrement 				; brk bumps it.
.a1a0	ce 23 04	dec $0423			dec 	TIM_PC
.a1a3					_TIMDecrement:
.a1a3	ce 24 04	dec $0424			dec 	TIM_PC+1
.a1a6	ba		tsx				tsx 								; and copy SP
.a1a7	8e 2c 04	stx $042c			stx 	TIM_SP
.a1aa	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.a1ac	9a		txs				txs
.a1ad	4c 8c a0	jmp $a08c			jmp 	TIM_Start 					; and start up TIM monitor.
.a1b0					TIM_UpdateRegisters:
.a1b0	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; PC
.a1b3	b0 23		bcs $a1d8			bcs 	_TIMURFail
.a1b5	a5 14		lda $14				lda 	zTemp3
.a1b7	8d 24 04	sta $0424			sta 	Tim_PC+1
.a1ba	a5 15		lda $15				lda 	zTemp3+1
.a1bc	8d 23 04	sta $0423			sta 	Tim_PC
.a1bf	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; ignore IRQ
.a1c2	b0 14		bcs $a1d8			bcs 	_TIMURFail
.a1c4	a2 00		ldx #$00			ldx 	#0
.a1c6					_TIM_URLoop:
.a1c6	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; registers
.a1c9	b0 0d		bcs $a1d8			bcs 	_TIMURFail
.a1cb	a5 14		lda $14				lda 	zTemp3
.a1cd	9d 27 04	sta $0427,x			sta 	Tim_SR,x
.a1d0	e8		inx				inx
.a1d1	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.a1d3	d0 f1		bne $a1c6			bne 	_TIM_URLoop
.a1d5	4c 07 a0	jmp $a007			jmp 	TIM_NewCommand
.a1d8					_TIMURFail:
.a1d8	4c 00 a0	jmp $a000			jmp 	TIM_Error
.a1db					TIM_LoadMemory:
.a1db	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; target address => zTemp2
.a1de	a5 14		lda $14				lda 	zTemp3
.a1e0	85 12		sta $12				sta 	zTemp2
.a1e2	a5 15		lda $15				lda 	zTemp3+1
.a1e4	85 13		sta $13				sta 	zTemp2+1
.a1e6					_TIM_LMLoop:
.a1e6	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; next byte ?
.a1e9	b0 0e		bcs $a1f9			bcs 	_TIMLMDone 					; no more
.a1eb	a2 00		ldx #$00			ldx 	#0							; write out.
.a1ed	a5 14		lda $14				lda 	zTemp3
.a1ef	81 12		sta ($12,x)			sta 	(zTemp2,x)
.a1f1	e6 12		inc $12				inc 	zTemp2 						; bump address
.a1f3	d0 f1		bne $a1e6			bne 	_TIM_LMLoop
.a1f5	e6 13		inc $13				inc 	zTemp2+1
.a1f7	80 ed		bra $a1e6			bra 	_TIM_LMLoop
.a1f9					_TIMLMDone:
.a1f9	4c 07 a0	jmp $a007			jmp 	TIM_NewCommand

;******  Return to file: basic.asm


;******  Processing file: integer/inttostr.asm

.c000					INTToString:
.c000	48		pha				pha
.c001	5a		phy				phy
.c002	bd 03 03	lda $0303,x			lda 		XS_Mantissa+3,x 		; check -ve
.c005	10 08		bpl $c00f			bpl 		_ITSNotMinus
.c007	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.c009	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c00c	20 87 c1	jsr $c187			jsr 		FPUNegateInteger
.c00f					_ITSNotMinus:
.c00f	a9 00		lda #$00			lda 		#0 						; X is offset in table.
.c011	8d 21 04	sta $0421			sta 		NumSuppress 			; clear the suppression flag.
.c014	a0 00		ldy #$00			ldy 		#0 						; Y is index into dword subtraction table.
.c016					_ITSNextSubtractor:
.c016	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.c018	8d 22 04	sta $0422			sta 		NumConvCount
.c01b					_ITSSubtract:
.c01b	38		sec				sec
.c01c	bd 00 03	lda $0300,x			lda 		XS_Mantissa,x 			; subtract number and push on stack
.c01f	f9 78 c0	sbc $c078,y			sbc 		_ITSSubtractors+0,y
.c022	48		pha				pha
.c023	bd 01 03	lda $0301,x			lda 		XS_Mantissa+1,x
.c026	f9 79 c0	sbc $c079,y			sbc 		_ITSSubtractors+1,y
.c029	48		pha				pha
.c02a	bd 02 03	lda $0302,x			lda 		XS_Mantissa+2,x
.c02d	f9 7a c0	sbc $c07a,y			sbc 		_ITSSubtractors+2,y
.c030	48		pha				pha
.c031	bd 03 03	lda $0303,x			lda 		XS_Mantissa+3,x
.c034	f9 7b c0	sbc $c07b,y			sbc 		_ITSSubtractors+3,y
.c037	90 14		bcc $c04d			bcc 		_ITSCantSubtract 		; if CC, then gone too far.
.c039	9d 03 03	sta $0303,x			sta 		XS_Mantissa+3,x 		; save subtract off stack
.c03c	68		pla				pla
.c03d	9d 02 03	sta $0302,x			sta 		XS_Mantissa+2,x
.c040	68		pla				pla
.c041	9d 01 03	sta $0301,x			sta 		XS_Mantissa+1,x
.c044	68		pla				pla
.c045	9d 00 03	sta $0300,x			sta 		XS_Mantissa+0,x
.c048	ee 22 04	inc $0422			inc 		NumConvCount 			; bump count.
.c04b	80 ce		bra $c01b			bra 		_ITSSubtract 			; go round again.
.c04d					_ITSCantSubtract:
.c04d	68		pla				pla 								; throw away interim answers
.c04e	68		pla				pla
.c04f	68		pla				pla
.c050	ad 22 04	lda $0422			lda 		NumConvCount 			; if not zero then no suppression check
.c053	c9 30		cmp #$30			cmp 		#"0"
.c055	d0 05		bne $c05c			bne 		_ITSOutputDigit
.c057	ad 21 04	lda $0421			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.c05a	10 09		bpl $c065			bpl 		_ITSGoNextSubtractor
.c05c					_ITSOutputDigit:
.c05c	ce 21 04	dec $0421			dec 		NumSuppress 			; suppression check will be non-zero.
.c05f	ad 22 04	lda $0422			lda 		NumConvCount 			; count of subtractions
.c062	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter 		; output it.
.c065					_ITSGoNextSubtractor:
.c065	c8		iny				iny 								; next dword
.c066	c8		iny				iny
.c067	c8		iny				iny
.c068	c8		iny				iny
.c069	c0 24		cpy #$24			cpy 		#_ITSSubtractorsEnd-_ITSSubtractors
.c06b	d0 a9		bne $c016			bne 		_ITSNextSubtractor 		; do all the subtractors.
.c06d	bd 00 03	lda $0300,x			lda 		XS_Mantissa+0,x 		; and the last digit is left.
.c070	09 30		ora #$30			ora 		#"0"
.c072	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c075	7a		ply				ply 								; and exit
.c076	68		pla				pla
.c077	60		rts				rts
.c078					_ITSSubtractors:
>c078	00 ca 9a 3b					.dword 		1000000000
>c07c	00 e1 f5 05					.dword 		100000000
>c080	80 96 98 00					.dword 		10000000
>c084	40 42 0f 00					.dword 		1000000
>c088	a0 86 01 00					.dword 		100000
>c08c	10 27 00 00					.dword 		10000
>c090	e8 03 00 00					.dword 		1000
>c094	64 00 00 00					.dword 		100
>c098	0a 00 00 00					.dword 		10
.c09c					_ITSSubtractorsEnd:
.c09c					ITSOutputCharacter:
.c09c	48		pha				pha
.c09d	da		phx				phx
.c09e	ae 20 04	ldx $0420			ldx 	NumBufX 					; save digit
.c0a1	9d 00 04	sta $0400,x			sta 	Num_Buffer,x
.c0a4	a9 00		lda #$00			lda		#0 							; follow by trailing NULL
.c0a6	9d 01 04	sta $0401,x			sta 	Num_Buffer+1,x
.c0a9	ee 20 04	inc $0420			inc 	NumBufX						; bump pointer.
.c0ac	fa		plx				plx
.c0ad	68		pla				pla
.c0ae	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: integer/intfromstr.asm

.c0af					IntFromString:
.c0af	a0 00		ldy #$00			ldy 	#0
.c0b1	8c 2d 04	sty $042d			sty 	ExpTemp 					; this is the converted digit count.
.c0b4					IntFromStringY:
.c0b4	48		pha				pha
.c0b5	a9 00		lda #$00			lda 	#0 							; clear the mantissa
.c0b7	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c0ba	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c0bd	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c0c0	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c0c3	a9 01		lda #$01			lda 	#1
.c0c5	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c0c8					_IFSLoop:
.c0c8	b1 1a		lda ($1a),y			lda 	(zGenPtr),y 				; get next
.c0ca	c9 30		cmp #$30			cmp 	#"0"						; validate it.
.c0cc	90 60		bcc $c12e			bcc 	_IFSExit
.c0ce	c9 3a		cmp #$3a			cmp 	#"9"+1
.c0d0	b0 5c		bcs $c12e			bcs 	_IFSExit
.c0d2	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; is High Byte > $7F/10
.c0d5	c9 0c		cmp #$0c			cmp 	#12
.c0d7	b0 5f		bcs $c138			bcs 	_IFSOverflow
.c0d9	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; push mantissa on stack backwards
.c0dc	48		pha				pha
.c0dd	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c0e0	48		pha				pha
.c0e1	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c0e4	48		pha				pha
.c0e5	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c0e8	48		pha				pha
.c0e9	20 4d c1	jsr $c14d			jsr 	IFSX1ShiftLeft 				; double
.c0ec	20 4d c1	jsr $c14d			jsr 	IFSX1ShiftLeft 				; x 4
.c0ef	18		clc				clc 								; add saved value x 5
.c0f0	68		pla				pla
.c0f1	7d 00 03	adc $0300,x			adc 	XS_Mantissa+0,x
.c0f4	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c0f7	68		pla				pla
.c0f8	7d 01 03	adc $0301,x			adc 	XS_Mantissa+1,x
.c0fb	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c0fe	68		pla				pla
.c0ff	7d 02 03	adc $0302,x			adc 	XS_Mantissa+2,x
.c102	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c105	68		pla				pla
.c106	7d 03 03	adc $0303,x			adc 	XS_Mantissa+3,x
.c109	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c10c	20 4d c1	jsr $c14d			jsr 	IFSX1ShiftLeft 				; x 10
.c10f	ee 2d 04	inc $042d			inc 	ExpTemp 					; bump count of digits processed.
.c112	b1 1a		lda ($1a),y			lda 	(zGenPtr),y 				; add digit
.c114	29 0f		and #$0f			and 	#15
.c116	c8		iny				iny
.c117	7d 00 03	adc $0300,x			adc 	XS_Mantissa+0,x
.c11a	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c11d	90 a9		bcc $c0c8			bcc 	_IFSLoop
.c11f	fe 01 03	inc $0301,x			inc 	XS_Mantissa+1,x 			; propogate carry round.
.c122	d0 a4		bne $c0c8			bne 	_IFSLoop
.c124	fe 02 03	inc $0302,x			inc 	XS_Mantissa+2,x
.c127	d0 9f		bne $c0c8			bne 	_IFSLoop
.c129	fe 03 03	inc $0303,x			inc 	XS_Mantissa+3,x
.c12c	80 9a		bra $c0c8			bra 	_IFSLoop
.c12e					_IFSExit:
.c12e	98		tya				tya 								; get offset
.c12f					_IFSOkay:
.c12f	38		sec				sec
.c130	ad 2d 04	lda $042d			lda 	ExpTemp
.c133	f0 01		beq $c136			beq 	_IFSSkipFail
.c135	18		clc				clc
.c136					_IFSSkipFail:
.c136	68		pla				pla 								; and exit.
.c137	60		rts				rts
.c138					_IFSOverflow:
.c138	20 0d eb	jsr $eb0d			jsr 	ERR_Handler
>c13b	43 6f 6e 73 74 61 6e 74				.text 	"Constant overflow",0
>c143	20 6f 76 65 72 66 6c 6f 77 00
.c14d					IFSX1ShiftLeft:
.c14d	1e 00 03	asl $0300,x			asl 	0+XS_Mantissa,x
.c150	3e 01 03	rol $0301,x			rol 	1+XS_Mantissa,x
.c153	3e 02 03	rol $0302,x			rol 	2+XS_Mantissa,x
.c156	3e 03 03	rol $0303,x			rol 	3+XS_Mantissa,x
.c159	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: float/fpmacros.asm


;******  Return to file: basic.asm


;******  Processing file: float/fputils.asm

.c15a					FPUCopyX2ToX1:
.c15a	48		pha				pha
.c15b	da		phx				phx
.c15c	5a		phy				phy
.c15d	a0 08		ldy #$08			ldy 	#8
.c15f	bd 06 03	lda $0306,x	_FPUC21:lda 	XS2_Mantissa,x
.c162	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c165	e8		inx				inx
.c166	88		dey				dey
.c167	10 f6		bpl $c15f			bpl 	_FPUC21
.c169	7a		ply				ply
.c16a	fa		plx				plx
.c16b	68		pla				pla
.c16c	60		rts				rts
.c16d					FPUSetInteger:
.c16d	48		pha				pha
.c16e	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.c171	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.c173	10 02		bpl $c177			bpl 	_FPUSIExtend
.c175	a9 ff		lda #$ff			lda 	#$FF
.c177					_FPUSIExtend:
.c177	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.c17a	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c17d	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c180	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.c182	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c185	68		pla				pla
.c186	60		rts				rts
.c187					FPUNegateInteger:
.c187	48		pha				pha
.c188	38		sec				sec
.c189	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.c18b	fd 00 03	sbc $0300,x			sbc 	XS_Mantissa+0,x
.c18e	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c191	a9 00		lda #$00			lda 	#0
.c193	fd 01 03	sbc $0301,x			sbc 	XS_Mantissa+1,x
.c196	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c199	a9 00		lda #$00			lda 	#0
.c19b	fd 02 03	sbc $0302,x			sbc 	XS_Mantissa+2,x
.c19e	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c1a1	a9 00		lda #$00			lda 	#0
.c1a3	fd 03 03	sbc $0303,x			sbc 	XS_Mantissa+3,x
.c1a6	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c1a9	68		pla				pla
.c1aa	60		rts				rts
.c1ab					FPUToFloat:
.c1ab	48		pha				pha
.c1ac	bd 05 03	lda $0305,x			lda 	XS_Type,x					; exit if already float.
.c1af	29 0f		and #$0f			and 	#$0F
.c1b1	f0 2d		beq $c1e0			beq 	_FPUFExit
.c1b3	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.c1b5	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c1b8	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.c1ba	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; x mantissa.
.c1bd	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.c1c0	10 08		bpl $c1ca			bpl		_FPUFPositive
.c1c2	20 87 c1	jsr $c187			jsr 	FPUNegateInteger 			; negate the mantissa
.c1c5	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.c1c7	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c1ca					_FPUFPositive:
.c1ca	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.c1cd	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.c1d0	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.c1d3	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.c1d6	d0 05		bne $c1dd			bne 	_FPUFNonZero
.c1d8	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.c1da	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c1dd					_FPUFNonZero:
.c1dd	20 e2 c1	jsr $c1e2			jsr 	FPUNormalise 				; normalise the floating point.
.c1e0					_FPUFExit:
.c1e0	68		pla				pla
.c1e1	60		rts				rts
.c1e2					FPUNormalise:
.c1e2	48		pha				pha
.c1e3	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.c1e6	70 20		bvs $c208			bvs 	_FPUNExit
.c1e8	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.c1eb	f0 16		beq $c203			beq 	_FPUNSetZero
.c1ed					_FPUNLoop:
.c1ed	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.c1f0	30 16		bmi $c208			bmi 	_FPUNExit 					; if so, we are normalised.
.c1f2	1e 00 03	asl $0300,x			asl 	0+XS_Mantissa+0,x
.c1f5	3e 01 03	rol $0301,x			rol 	1+XS_Mantissa+0,x
.c1f8	3e 02 03	rol $0302,x			rol 	2+XS_Mantissa+0,x
.c1fb	3e 03 03	rol $0303,x			rol 	3+XS_Mantissa+0,x
.c1fe	de 04 03	dec $0304,x			dec 	XS_Exponent,x 				; decrement exponent
.c201	d0 ea		bne $c1ed			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.c203					_FPUNSetZero:
.c203	a9 40		lda #$40			lda 	#$40
.c205	9d 05 03	sta $0305,x			sta 	XS_Type,x 					; the result is now zero.
.c208					_FPUNExit:
.c208	68		pla				pla
.c209	60		rts				rts
.c20a					FPUToInteger:
.c20a	48		pha				pha
.c20b	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if already integer, exit
.c20e	29 01		and #$01			and 	#1
.c210	d0 3e		bne $c250			bne 	_FPUTOI_Exit
.c212	3c 05 03	bit $0305,x			bit 	XS_Type,x					; if zero, return zero.
.c215	70 2b		bvs $c242			bvs 	_FPUTOI_Zero
.c217	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.c21a	10 26		bpl $c242			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.c21c	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.c21e	b0 37		bcs $c257			bcs 	FP_Overflow
.c220					_FPUToIToInteger:
.c220	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.c223	c9 a0		cmp #$a0			cmp 	#128+32
.c225	f0 11		beq $c238			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.c227	fe 04 03	inc $0304,x			inc 	XS_Exponent,X 				; increment Exponent
.c22a	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.c22d	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c230	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c233	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c236	80 e8		bra $c220			bra 	_FPUToIToInteger 			; keep going.
.c238					_FPUToICheckSign:
.c238	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; check sign
.c23b	10 13		bpl $c250			bpl 	_FPUToI_Exit 				; exit if unsigned.
.c23d	20 87 c1	jsr $c187			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.c240	80 0e		bra $c250			bra 	_FPUTOI_Exit
.c242					_FPUTOI_Zero:
.c242	a9 00		lda #$00			lda 	#0 							; return zero integer.
.c244	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c247	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c24a	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c24d	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c250					_FPUToI_Exit:
.c250	a9 01		lda #$01			lda 	#1 							; set type to integer
.c252	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c255	68		pla				pla
.c256	60		rts				rts
.c257					FP_Overflow:
.c257	20 0d eb	jsr $eb0d			jsr 	ERR_Handler
>c25a	46 6c 6f 61 74 69 6e 67				.text 	"Floating Point overflow",0
>c262	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.c272					FPUTimes10:
.c272	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.c275	85 16		sta $16				sta 	ZLTemp1+0
.c277	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c27a	85 17		sta $17				sta 	ZLTemp1+1
.c27c	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c27f	85 18		sta $18				sta 	ZLTemp1+2
.c281	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c284	85 19		sta $19				sta 	ZLTemp1+3
.c286	20 ca c2	jsr $c2ca			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.c289	20 ca c2	jsr $c2ca			jsr 	_FPUT_LSR_ZLTemp1
.c28c	18		clc				clc
.c28d	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.c290	65 16		adc $16				adc 	ZLTemp1+0
.c292	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c295	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c298	65 17		adc $17				adc 	ZLTemp1+1
.c29a	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c29d	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c2a0	65 18		adc $18				adc 	ZLTemp1+2
.c2a2	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c2a5	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c2a8	65 19		adc $19				adc 	ZLTemp1+3
.c2aa	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c2ad	90 0f		bcc $c2be			bcc 	_FPUTimes10
.c2af	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c2b2	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c2b5	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c2b8	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c2bb	fe 04 03	inc $0304,x			inc 	XS_Exponent,x				; fix exponent
.c2be					_FPUTimes10:
.c2be	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.c2c1	18		clc				clc
.c2c2	69 03		adc #$03			adc 	#3
.c2c4	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c2c7	b0 8e		bcs $c257			bcs 	FP_Overflow 				; error
.c2c9	60		rts				rts
.c2ca					_FPUT_LSR_ZLTemp1:
.c2ca	46 19		lsr $19				lsr 	ZLTemp1+3
.c2cc	66 18		ror $18				ror 	ZLTemp1+2
.c2ce	66 17		ror $17				ror 	ZLTemp1+1
.c2d0	66 16		ror $16				ror 	ZLTemp1+0
.c2d2	60		rts				rts
.c2d3					FPUScale10A:
.c2d3	5a		phy				phy
.c2d4	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.c2d6	f0 3d		beq $c315			beq 	_FPUScaleExit
.c2d8	da		phx				phx 								; save X
.c2d9	e8		inx				inx
.c2da	e8		inx				inx
.c2db	e8		inx				inx
.c2dc	e8		inx				inx
.c2dd	e8		inx				inx
.c2de	e8		inx				inx
.c2df	a8		tay				tay 								; save power scalar in Y.
.c2e0	a9 00		lda #$00			lda 	#0
.c2e2	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.c2e5	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c2e8	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c2eb	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c2ee	a9 80		lda #$80			lda 	#$80
.c2f0	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c2f3	a9 81		lda #$81			lda 	#$81
.c2f5	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c2f8	5a		phy				phy 								; save 10^n on stack.
.c2f9	c0 00		cpy #$00			cpy 	#0
.c2fb	10 05		bpl $c302			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.c2fd	98		tya				tya
.c2fe	49 ff		eor #$ff			eor 	#$FF
.c300	1a		inc a				inc 	a
.c301	a8		tay				tay
.c302					_FPUSAbs:
.c302	20 72 c2	jsr $c272			jsr 	FPUTimes10
.c305	88		dey				dey
.c306	d0 fa		bne $c302			bne 	_FPUSAbs 					; tos is now 10^|AC|
.c308	68		pla				pla 								; restore count in A
.c309	fa		plx				plx 								; restore X pointing to number to scale.
.c30a	0a		asl a				asl 	a
.c30b	b0 05		bcs $c312			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.c30d	20 0f c4	jsr $c40f			jsr 	FPMultiply 					; if clear multiply.
.c310	80 03		bra $c315			bra		_FPUScaleExit
.c312					_FPUSDivide:
.c312	20 c0 c4	jsr $c4c0			jsr 	FPDivide
.c315					_FPUScaleExit:
.c315	7a		ply				ply
.c316	60		rts				rts
.c317					FPUCopyToNext:
.c317	a0 06		ldy #$06			ldy 		#6
.c319	da		phx				phx
.c31a					_FPUCopy1:
.c31a	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x
.c31d	9d 06 03	sta $0306,x			sta 	XS2_Mantissa,x
.c320	e8		inx				inx
.c321	88		dey				dey
.c322	d0 f6		bne $c31a			bne 	_FPUCopy1
.c324	fa		plx				plx
.c325	60		rts				rts
.c326					FPUCopyFromNext:
.c326	a0 06		ldy #$06			ldy 		#6
.c328	da		phx				phx
.c329					_FPUCopy1:
.c329	bd 06 03	lda $0306,x			lda 	XS2_Mantissa,x
.c32c	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c32f	e8		inx				inx
.c330	88		dey				dey
.c331	d0 f6		bne $c329			bne 	_FPUCopy1
.c333	fa		plx				plx
.c334	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: float/fpadd.asm

.c335					FPSubtract:
.c335	48		pha				pha
.c336	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.c339	49 80		eor #$80			eor 	#$80
.c33b	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.c33e	68		pla				pla 								; --- and fall through ---
.c33f					FPAdd:
.c33f	48		pha				pha
.c340	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.c343	d0 05		bne $c34a			bne 	_FPA_NegativeLHS
.c345	20 67 c3	jsr $c367			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.c348	68		pla				pla
.c349	60		rts				rts
.c34a					_FPA_NegativeLHS:
.c34a	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.c34d	49 80		eor #$80			eor 	#$80
.c34f	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c352	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of B and add
.c355	49 80		eor #$80			eor 	#$80
.c357	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.c35a	20 67 c3	jsr $c367			jsr 	FPAdd_Worker 				; do the add calculation.
.c35d	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 back
.c360	49 80		eor #$80			eor 	#$80
.c362	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c365	68		pla				pla
.c366	60		rts				rts
.c367					FPAdd_Worker:
.c367	3c 0b 03	bit $030b,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.c36a	70 08		bvs $c374			bvs 	_FPAWExit 					; no change.
.c36c	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.c36f	50 07		bvc $c378			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.c371	20 5a c1	jsr $c15a			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.c374					_FPAWExit:
.c374	20 e2 c1	jsr $c1e2			jsr 	FPUNormalise 				; normalise the result.
.c377	60		rts				rts
.c378					_FPAWMakeSame:
.c378	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.c37b	38		sec				sec
.c37c	fd 0a 03	sbc $030a,x			sbc	 	XS2_Exponent,x 				; using subtraction
.c37f	f0 1b		beq $c39c			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.c381	da		phx				phx 								; save X
.c382	90 06		bcc $c38a			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.c384	e8		inx				inx
.c385	e8		inx				inx
.c386	e8		inx				inx
.c387	e8		inx				inx
.c388	e8		inx				inx
.c389	e8		inx				inx
.c38a					_FPAWShiftA:
.c38a	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.c38d	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.c390	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c393	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c396	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c399	fa		plx				plx 								; restore original X
.c39a	80 dc		bra $c378			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.c39c					_FPAW_DoArithmetic:
.c39c	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.c39f	30 39		bmi $c3da			bmi 	_FPAW_BNegative
.c3a1	18		clc				clc
.c3a2	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c3a5	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.c3a8	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c3ab	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c3ae	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.c3b1	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c3b4	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c3b7	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.c3ba	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c3bd	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c3c0	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.c3c3	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c3c6	90 ac		bcc $c374			bcc 	_FPAWExit 					; no carry.
.c3c8	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.c3cb	38		sec				sec
.c3cc	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c3cf	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c3d2	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c3d5	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c3d8	80 9a		bra $c374			bra 	_FPAWExit
.c3da					_FPAW_BNegative:
.c3da	38		sec				sec
.c3db	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c3de	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa+0,x
.c3e1	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c3e4	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c3e7	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.c3ea	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c3ed	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c3f0	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.c3f3	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c3f6	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c3f9	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.c3fc	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c3ff	b0 0b		bcs $c40c			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.c401	20 87 c1	jsr $c187			jsr 	FPUNegateInteger			; negate the mantissa
.c404	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip result sign
.c407	49 80		eor #$80			eor 	#$80
.c409	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c40c					_FPAWGoExit:
.c40c	4c 74 c3	jmp $c374			jmp 	_FPAWExit

;******  Return to file: basic.asm


;******  Processing file: float/fpmultiply.asm

.c40f					FPMultiply:
.c40f	48		pha				pha
.c410	5a		phy				phy
.c411	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.c414	70 08		bvs $c41e			bvs 	_FPM_Exit
.c416	3c 0b 03	bit $030b,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.c419	50 06		bvc $c421			bvc 	_FPM_CalcExponent
.c41b	20 5a c1	jsr $c15a			jsr 	FPUCopyX2ToX1
.c41e					_FPM_Exit:
.c41e	7a		ply				ply
.c41f	68		pla				pla
.c420	60		rts				rts
.c421					_FPM_CalcExponent:
.c421	18		clc				clc
.c422	20 93 c4	jsr $c493			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.c425	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; save the result.
.c428	a9 00		lda #$00			lda 	#0
.c42a	85 16		sta $16				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.c42c	85 17		sta $17				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.c42e	85 18		sta $18				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.c430	85 19		sta $19				sta 	zLTemp1+3
.c432	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.c434					_FPM_Loop:
.c434	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x				; check LSB of long product
.c437	29 01		and #$01			and 	#1
.c439	18		clc				clc 								; clear carry for the long rotate.
.c43a	f0 1d		beq $c459			beq 	_FPM_NoAddition
.c43c	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.c43d	a5 16		lda $16				lda 	zLTemp1+0
.c43f	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.c442	85 16		sta $16				sta 	zLTemp1+0
.c444	a5 17		lda $17				lda 	zLTemp1+1
.c446	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.c449	85 17		sta $17				sta 	zLTemp1+1
.c44b	a5 18		lda $18				lda 	zLTemp1+2
.c44d	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.c450	85 18		sta $18				sta 	zLTemp1+2
.c452	a5 19		lda $19				lda 	zLTemp1+3
.c454	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.c457	85 19		sta $19				sta 	zLTemp1+3
.c459					_FPM_NoAddition:
.c459	66 19		ror $19				ror 	3+zLTemp1
.c45b	66 18		ror $18				ror 	2+zLTemp1
.c45d	66 17		ror $17				ror 	1+zLTemp1
.c45f	66 16		ror $16				ror 	0+zLTemp1
.c461	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c464	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c467	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c46a	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c46d	88		dey				dey
.c46e	d0 c4		bne $c434			bne 	_FPM_Loop 					; do this 32 times.
.c470					FPM_CopySignNormalize:
.c470	a5 16		lda $16				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.c472	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.c475	a5 17		lda $17				lda 	zLTemp1+1
.c477	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c47a	a5 18		lda $18				lda 	zLTemp1+2
.c47c	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c47f	a5 19		lda $19				lda 	zLTemp1+3
.c481	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c484	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; sign is xor of signs
.c487	5d 0b 03	eor $030b,x			eor 	XS2_Type,x
.c48a	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c48d	20 e2 c1	jsr $c1e2			jsr 	FPUNormalise 				; normalise and exit.
.c490	7a		ply				ply
.c491	68		pla				pla
.c492	60		rts				rts
.c493					FPCalculateExponent:
.c493	18		clc				clc
.c494	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.c497	7d 0a 03	adc $030a,x			adc 	XS2_Exponent,x
.c49a	b0 08		bcs $c4a4			bcs 	_FPCECarry 					; carry out ?
.c49c	10 03		bpl $c4a1			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.c49e	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.c4a0	60		rts				rts
.c4a1					_FPCEExpZero:
.c4a1	a9 00		lda #$00			lda 	#0
.c4a3	60		rts				rts
.c4a4					_FPCECarry:
.c4a4	30 03		bmi $c4a9			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.c4a6	09 80		ora #$80			ora 	#$80 						; put in right range
.c4a8	60		rts				rts
.c4a9					_FPCEOverflow:
.c4a9	4c 57 c2	jmp $c257			jmp 	FP_Overflow

;******  Return to file: basic.asm


;******  Processing file: float/fpdivide.asm

.c4ac					FPD_IsDivZero:
.c4ac	20 0d eb	jsr $eb0d			jsr 		ERR_Handler
>c4af	44 69 76 69 73 69 6f 6e				.text 		"Division by zero",0
>c4b7	20 62 79 20 7a 65 72 6f 00
.c4c0					FPDivide:
.c4c0	48		pha				pha
.c4c1	5a		phy				phy
.c4c2	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; check if division by zero
.c4c5	70 e5		bvs $c4ac			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.c4c7	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.c4ca	f0 03		beq $c4cf			beq 	_FPDCalculateExp
.c4cc					_FPD_Exit:
.c4cc	7a		ply				ply
.c4cd	68		pla				pla
.c4ce	60		rts				rts
.c4cf					_FPDCalculateExp:
.c4cf	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.c4d2	49 ff		eor #$ff			eor 	#$FF
.c4d4	1a		inc a				inc 	a
.c4d5	9d 0a 03	sta $030a,x			sta 	XS2_Exponent,x
.c4d8	20 93 c4	jsr $c493			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.c4db	18		clc				clc 	 							; add 1 to the resulting exponent
.c4dc	69 01		adc #$01			adc 	#1
.c4de	b0 65		bcs $c545			bcs 	_FPD_Overflow 				; which can overflow.
.c4e0	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c4e3	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.c4e5	85 16		sta $16				sta 	zLTemp1+0
.c4e7	85 17		sta $17				sta 	zLTemp1+1
.c4e9	85 18		sta $18				sta 	zLTemp1+2
.c4eb	85 19		sta $19				sta 	zLTemp1+3
.c4ed	a0 20		ldy #$20			ldy 	#32 						; times round.
.c4ef					_FPD_Loop:
.c4ef	38		sec				sec 								; calculate X1-X2 stacking result because we might
.c4f0	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; not save it.
.c4f3	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa,x
.c4f6	48		pha				pha
.c4f7	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c4fa	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.c4fd	48		pha				pha
.c4fe	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c501	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.c504	48		pha				pha
.c505	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c508	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.c50b	90 17		bcc $c524			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.c50d	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x 			; save results out to A
.c510	68		pla				pla
.c511	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c514	68		pla				pla
.c515	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c518	68		pla				pla
.c519	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c51c	a5 19		lda $19				lda 	zLTemp1+3 					; set high bit of result
.c51e	09 80		ora #$80			ora 	#$80
.c520	85 19		sta $19				sta 	zLTemp1+3
.c522	80 03		bra $c527			bra 	_FPD_Rotates
.c524					_FPD_NoSubtract:
.c524	68		pla				pla 								; throw away unwanted results
.c525	68		pla				pla
.c526	68		pla				pla
.c527					_FPD_Rotates:
.c527	5e 09 03	lsr $0309,x			lsr 	3+XS2_Mantissa,x
.c52a	7e 08 03	ror $0308,x			ror 	2+XS2_Mantissa,x
.c52d	7e 07 03	ror $0307,x			ror 	1+XS2_Mantissa,x
.c530	7e 06 03	ror $0306,x			ror 	0+XS2_Mantissa,x
.c533	06 16		asl $16				asl 	zLTemp1 					; rotate result round left
.c535	26 17		rol $17				rol 	zLTemp1+1
.c537	26 18		rol $18				rol 	zLTemp1+2
.c539	26 19		rol $19				rol 	zLTemp1+3
.c53b	90 02		bcc $c53f			bcc 	_FPD_NoCarry
.c53d	e6 16		inc $16				inc 	zLTemp1 					; if rotated out, set LSB.
.c53f					_FPD_NoCarry:
.c53f	88		dey				dey 								; do 32 times
.c540	d0 ad		bne $c4ef			bne 	_FPD_Loop
.c542	4c 70 c4	jmp $c470			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.c545					_FPD_Overflow:
.c545	4c 57 c2	jmp $c257			jmp 	FP_Overflow

;******  Return to file: basic.asm


;******  Processing file: float/fpcompare.asm

.c548					FPCompare:
.c548	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.c54b	48		pha				pha
.c54c	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x
.c54f	48		pha				pha
.c550	20 35 c3	jsr $c335			jsr 	FPSubtract 					; calculate X1-X2
.c553	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.c556	70 2c		bvs $c584			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.c558	68		pla				pla
.c559	8d 2d 04	sta $042d			sta 	ExpTemp						; save first exponent in temporary reg.
.c55c	68		pla				pla
.c55d	38		sec				sec
.c55e	ed 2d 04	sbc $042d			sbc 	ExpTemp 					; calculate AX-BX
.c561	70 15		bvs $c578			bvs 	_FPCNotEqual				; overflow, can't be equal.
.c563	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.c564	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.c566	b0 10		bcs $c578			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.c568	38		sec				sec
.c569	ad 2d 04	lda $042d			lda 	ExpTemp 					; get one of the exponents back.
.c56c	e9 18		sbc #$18			sbc 	#24 						; allow for 2^24 error, relatively.
.c56e	b0 02		bcs $c572			bcs 	_FPCNotRange 				; keep in range.
.c570	a9 01		lda #$01			lda 	#1
.c572					_FPCNotRange:
.c572	38		sec				sec
.c573	fd 04 03	sbc $0304,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.c576	b0 0e		bcs $c586			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.c578					_FPCNotEqual:
.c578	bd 05 03	lda $0305,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.c57b	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.c57d	f0 02		beq $c581			beq 	_FPCNE2
.c57f	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.c581	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.c582	80 04		bra $c588			bra 	_FPCExit
.c584					_FPCPullZero:
.c584	68		pla				pla 								; throw saved exponents
.c585	68		pla				pla
.c586					_FPCZero:
.c586	a9 00		lda #$00			lda 	#0 							; and return zero
.c588					_FPCExit:
.c588	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: float/fpparts.asm

.c589					FPFractionalPart:
.c589	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.c58c	38		sec				sec 								; this flag tells us to keep the fractional part
.c58d	30 0f		bmi $c59e			bmi 	FPGetPart
.c58f	60		rts				rts
.c590					FPIntegerPart:
.c590	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.c593	18		clc				clc 								; this flag says keep the integer part.
.c594	30 08		bmi $c59e			bmi 	FPGetPart 					; -ve exponents are 0..127
.c596	48		pha				pha
.c597	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.c599	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c59c	68		pla				pla
.c59d	60		rts				rts
.c59e					FPGetPart:
.c59e	48		pha				pha
.c59f	5a		phy				phy 								; save Y
.c5a0	08		php				php 								; save action
.c5a1	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.c5a4	70 62		bvs $c608			bvs 	_FPGP_Exit 					; then do nothing.
.c5a6	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.c5a8	85 16		sta $16				sta 	zLTemp1+0 					; this mask is applied to chop out the
.c5aa	85 17		sta $17				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.c5ac	85 18		sta $18				sta 	zLTemp1+2
.c5ae	85 19		sta $19				sta 	zLTemp1+3
.c5b0	bd 04 03	lda $0304,x			lda 	XS_Exponent,x				; the number of shifts.
.c5b3	38		sec				sec
.c5b4	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.c5b6	f0 12		beq $c5ca			beq 	_FPGP_NoShift 				; ... if any
.c5b8	c9 20		cmp #$20			cmp 	#32
.c5ba	90 02		bcc $c5be			bcc 	_FPGP_NotMax
.c5bc	a9 20		lda #$20			lda 	#32 						; max of 32.
.c5be					_FPGP_NotMax:
.c5be	a8		tay				tay 								; Y is the mask shift count.
.c5bf					_FPGP_ShiftMask:
.c5bf	46 19		lsr $19				lsr 	3+zLTemp1
.c5c1	66 18		ror $18				ror 	2+zLTemp1
.c5c3	66 17		ror $17				ror 	1+zLTemp1
.c5c5	66 16		ror $16				ror 	0+zLTemp1
.c5c7	88		dey				dey
.c5c8	d0 f5		bne $c5bf			bne 	_FPGP_ShiftMask
.c5ca					_FPGP_NoShift:
.c5ca	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.c5cc	8e 2d 04	stx $042d			stx 	ExpTemp						; save X
.c5cf					_FPGP_MaskLoop:
.c5cf	b9 16 00	lda $0016,y			lda 	zlTemp1,y 					; get mask byte
.c5d2	28		plp				plp 								; if CC we keep the top part, so we
.c5d3	08		php				php		 							; flip the mask.
.c5d4	b0 02		bcs $c5d8			bcs		_FPGP_NoFlip
.c5d6	49 ff		eor #$ff			eor 	#$FF
.c5d8					_FPGP_NoFlip:
.c5d8	3d 00 03	and $0300,x			and 	XS_Mantissa,x 				; and into the mantissa.
.c5db	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c5de	e8		inx				inx
.c5df	c8		iny				iny
.c5e0	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.c5e2	d0 eb		bne $c5cf			bne 	_FPGP_MaskLoop
.c5e4	ae 2d 04	ldx $042d			ldx 	ExpTemp						; restore X
.c5e7	28		plp				plp
.c5e8	08		php				php 								; get action flag on the stack
.c5e9	90 05		bcc $c5f0			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.c5eb	a9 00		lda #$00			lda 	#0
.c5ed	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c5f0					_FPGP_NotFractional:
.c5f0	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 						; check if \1 zero
.c5f3	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.c5f6	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.c5f9	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.c5fc	f0 05		beq $c603			beq 	_FPGP_Zero 					; if zero, return zero
.c5fe	20 e2 c1	jsr $c1e2			jsr 	FPUNormalise
.c601	80 05		bra $c608			bra 	_FPGP_Exit 					; and exit
.c603					_FPGP_Zero:
.c603	a9 40		lda #$40			lda 	#$40 						; set zero flag
.c605	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c608					_FPGP_Exit:
.c608	68		pla				pla 								; throw saved action flag.
.c609	7a		ply				ply
.c60a	68		pla				pla
.c60b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: float/fpfromstr.asm

.c60c					FPFromString:
.c60c	48		pha				pha 								; push A
.c60d	b1 1a		lda ($1a),y			lda		(zGenPtr),y					; is it followed by a DP ?
.c60f	c9 2e		cmp #$2e			cmp 	#"."
.c611	f0 03		beq $c616			beq	 	_FPFIsDecimal
.c613	4c 79 c6	jmp $c679			jmp 	_FPFNotDecimal
.c616					_FPFIsDecimal:
.c616	c8		iny				iny 								; consume the decimal.
.c617	20 ab c1	jsr $c1ab			jsr 	FPUToFloat 					; convert the integer to float.
.c61a	da		phx				phx 								; save X.
.c61b	5a		phy				phy 								; save decimal start position
.c61c	e8		inx				inx
.c61d	e8		inx				inx
.c61e	e8		inx				inx
.c61f	e8		inx				inx
.c620	e8		inx				inx
.c621	e8		inx				inx
.c622	20 b4 c0	jsr $c0b4			jsr 	INTFromStringY 				; get the part after the DP.
.c625	20 ab c1	jsr $c1ab			jsr 	FPUToFloat 					; convert that to a float.
.c628	68		pla				pla 								; calculate - chars consumed.
.c629	8c 2d 04	sty $042d			sty 	ExpTemp
.c62c	38		sec				sec
.c62d	ed 2d 04	sbc $042d			sbc 	ExpTemp 					; this is the shift amount
.c630	20 d3 c2	jsr $c2d3			jsr 	FPUScale10A 				; scale it by 10^AC
.c633	fa		plx				plx 								; restore original X
.c634	20 3f c3	jsr $c33f			jsr 	FPAdd 						; Add X2 to X1 giving the fractional bit.
.c637	b1 1a		lda ($1a),y			lda 	(zGenPtr),y 				; exponent ?
.c639	c9 45		cmp #$45			cmp 	#"E"
.c63b	f0 04		beq $c641			beq 	_FPFExponent
.c63d	c9 65		cmp #$65			cmp 	#"e"
.c63f	d0 38		bne $c679			bne 	_FPFNotDecimal 				; no, then exit normally.
.c641					_FPFExponent:
.c641	c8		iny				iny 								; skip over E symbol.
.c642	b1 1a		lda ($1a),y			lda 	(zGenPtr),y 				; look at next
.c644	49 2d		eor #$2d			eor 	#"-"						; will be zero if -ve
.c646	d0 01		bne $c649			bne 	_FPFGotSign
.c648	c8		iny				iny 								; if it was - skip over it.
.c649					_FPFGotSign:
.c649	48		pha				pha 								; push direction : 0 -ve, #0 +ve onto stack.
.c64a	da		phx				phx
.c64b	e8		inx				inx
.c64c	e8		inx				inx
.c64d	e8		inx				inx
.c64e	e8		inx				inx
.c64f	e8		inx				inx
.c650	e8		inx				inx
.c651	20 b4 c0	jsr $c0b4			jsr 	INTFromStringY 				; get the exponent
.c654	fa		plx				plx 								; restore X.
.c655	bd 07 03	lda $0307,x			lda 	XS2_Mantissa+1,x 			; check exponent low bytes are all zero.
.c658	1d 09 03	ora $0309,x			ora 	XS2_Mantissa+3,x
.c65b	1d 08 03	ora $0308,x			ora 	XS2_Mantissa+2,x
.c65e	d0 1b		bne $c67b			bne 	_FPFXOverflow 				; if not, must be a bad exponent
.c660	bd 06 03	lda $0306,x			lda 	XS2_Mantissa+0,x 			; get the exponent, the low byte
.c663	c9 1e		cmp #$1e			cmp 	#30 						; check in range 0-30
.c665	b0 14		bcs $c67b			bcs 	_FPFXOverflow
.c667	68		pla				pla 								; get direction
.c668	d0 09		bne $c673			bne 	_FPFXScale  				; if non-zero, e.g. +ve skip the next bit
.c66a	bd 06 03	lda $0306,x			lda 	XS2_Mantissa+0,x 			; negate the exponent
.c66d	49 ff		eor #$ff			eor 	#$FF
.c66f	1a		inc a				inc 	a
.c670	9d 06 03	sta $0306,x			sta 	XS2_Mantissa+0,x
.c673					_FPFXScale:
.c673	bd 06 03	lda $0306,x			lda 	XS2_Mantissa+0,x 			; get scale amount
.c676	20 d3 c2	jsr $c2d3			jsr 	FPUScale10A 				; scale by the exponent.
.c679					_FPFNotDecimal:
.c679	68		pla				pla
.c67a	60		rts				rts
.c67b					_FPFXOverflow:
.c67b	20 0d eb	jsr $eb0d			jsr 	ERR_Handler
>c67e	45 78 70 6f 6e 65 6e 74				.text 	"Exponent Range",0
>c686	20 52 61 6e 67 65 00

;******  Return to file: basic.asm


;******  Processing file: float/fptostr.asm

.c68d					FPToString:
.c68d	48		pha				pha
.c68e	5a		phy				phy
.c68f	3c 05 03	bit $0305,x			bit 		XS_Type,x 				; check zero flag
.c692	50 0a		bvc $c69e			bvc 		_FPTSIsFloat 			; if zero,
.c694					_FPTSZero:
.c694	a9 30		lda #$30			lda 		#"0"
.c696	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c699					_FPTSExit:
.c699	7a		ply				ply
.c69a	68		pla				pla
.c69b	60		rts				rts
.c69c	80 fb		bra $c699			bra 		_FPTSExit
.c69e					_FPTSIsFloat:
.c69e	bd 05 03	lda $0305,x			lda 		XS_Type,x 				; is it signed ?
.c6a1	10 0a		bpl $c6ad			bpl 		_FPTSNotSigned
.c6a3	a9 00		lda #$00			lda 		#0 						; clear sign flag
.c6a5	9d 05 03	sta $0305,x			sta 		XS_Type,x
.c6a8	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.c6aa	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c6ad					_FPTSNotSigned:
.c6ad	bd 04 03	lda $0304,x			lda 		XS_Exponent,x
.c6b0	c9 98		cmp #$98			cmp 		#128+24 				; if > 2^24 do as exponent
.c6b2	b0 09		bcs $c6bd			bcs 		_FPTSExponent
.c6b4	c9 6c		cmp #$6c			cmp 		#128-20 				; if < 2^-20 do as an exponent
.c6b6	90 05		bcc $c6bd			bcc 		_FPTSExponent 			;
.c6b8					_FPTSStandard:
.c6b8	20 01 c7	jsr $c701			jsr 		FPTOutputBody 			; output the body.
.c6bb	80 dc		bra $c699			bra 		_FPTSExit
.c6bd					_FPTSExponent:
.c6bd	a9 00		lda #$00			lda 		#0 						; zero the exponent count.
.c6bf	8d 2e 04	sta $042e			sta 		ExpCount
.c6c2					_FPTSExponentLoop:
.c6c2	bd 04 03	lda $0304,x			lda 		XS_Exponent,x 			; exponent < 0, x by 10
.c6c5	10 0e		bpl $c6d5			bpl 		_FPTSTimes
.c6c7	c9 85		cmp #$85			cmp 		#128+5 					; exit when in range 0..4
.c6c9	90 14		bcc $c6df			bcc 		_FPTSScaledToExp
.c6cb	a9 ff		lda #$ff			lda 		#-1 					; divide by 10.
.c6cd	20 d3 c2	jsr $c2d3			jsr 		FPUScale10A
.c6d0	ee 2e 04	inc $042e			inc 		ExpCount
.c6d3	80 ed		bra $c6c2			bra 		_FPTSExponentLoop
.c6d5					_FPTSTimes:
.c6d5	a9 01		lda #$01			lda 		#1
.c6d7	20 d3 c2	jsr $c2d3			jsr 		FPUScale10A
.c6da	ce 2e 04	dec $042e			dec 		ExpCount
.c6dd	80 e3		bra $c6c2			bra 		_FPTSExponentLoop
.c6df					_FPTSScaledToExp:
.c6df	20 01 c7	jsr $c701			jsr 		FPTOutputBody 			; output the body.
.c6e2	a9 65		lda #$65			lda 		#"e"					; output E
.c6e4	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c6e7	ad 2e 04	lda $042e			lda 		ExpCount 				; get the exponent
.c6ea	9d 00 03	sta $0300,x			sta 		XS_Mantissa,x
.c6ed	29 80		and #$80			and 		#$80 					; sign extend it
.c6ef	f0 02		beq $c6f3			beq 		_FPTSSExt
.c6f1	a9 ff		lda #$ff			lda 		#$FF
.c6f3					_FPTSSExt:
.c6f3	9d 01 03	sta $0301,x			sta 		XS_Mantissa+1,x
.c6f6	9d 02 03	sta $0302,x			sta 		XS_Mantissa+2,x
.c6f9	9d 03 03	sta $0303,x			sta 		XS_Mantissa+3,x
.c6fc	20 00 c0	jsr $c000			jsr 		INTToString 			; output the exponent.
.c6ff	80 98		bra $c699			bra			_FPTSExit 				; and exit.
.c701					FPTOutputBody:
.c701	20 17 c3	jsr $c317			jsr 		FPUCopyToNext 			; copy to next slot.
.c704	20 0a c2	jsr $c20a			jsr 		FPUToInteger 			; convert to an integer
.c707	20 00 c0	jsr $c000			jsr 		INTToString 			; output the main integer part.
.c70a	20 26 c3	jsr $c326			jsr 		FPUCopyFromNext 		; get the fractional part back.
.c70d	20 89 c5	jsr $c589			jsr 		FPFractionalPart 		; get the decimal part.
.c710	3c 05 03	bit $0305,x			bit 		XS_Type,x 				; any fractional part.
.c713	70 3e		bvs $c753			bvs 		_FPTOExit 				; if not, exit now.
.c715	a9 2e		lda #$2e			lda 		#"." 					; print out a decimal place.
.c717	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c71a					_FPOutLoop:
.c71a	3c 05 03	bit $0305,x			bit 		XS_Type,x 				; finally reached zero.
.c71d	70 1e		bvs $c73d			bvs 		_FPStripZeros 			; strip trailing zeros
.c71f	20 72 c2	jsr $c272			jsr 		FPUTimes10 				; multiply by 10
.c722	20 17 c3	jsr $c317			jsr 		FPUCopyToNext			; copy to next slot.
.c725	20 0a c2	jsr $c20a			jsr 		FPUToInteger 			; convert to integer
.c728	bd 00 03	lda $0300,x			lda 		XS_Mantissa+0,x 		; print digit.
.c72b	09 30		ora #$30			ora 		#"0"
.c72d	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c730	20 26 c3	jsr $c326			jsr 		FPUCopyFromNext 		; get it back
.c733	20 89 c5	jsr $c589			jsr 		FPFractionalPart 		; get fractional part
.c736	ad 20 04	lda $0420			lda 		NumBufX 				; done 11 characters yet ?
.c739	c9 0b		cmp #$0b			cmp 	 	#11
.c73b	90 dd		bcc $c71a			bcc 		_FPOutLoop 				; if so, keep going till zero.
.c73d					_FPStripZeros:
.c73d	ac 20 04	ldy $0420			ldy 		NumBufX 				; strip trailing zeros.
.c740					_FPStripLoop:
.c740	88		dey				dey 								; back one, if at start then no strip
.c741	f0 10		beq $c753			beq 		_FPToExit
.c743	b9 00 04	lda $0400,y			lda 		Num_Buffer,y 			; keep going if "0"
.c746	c9 30		cmp #$30			cmp 		#"0"
.c748	f0 f6		beq $c740			beq 		_FPStripLoop
.c74a	c8		iny				iny
.c74b	a9 00		lda #$00			lda 		#0 						; add trailing zero one on
.c74d	99 00 04	sta $0400,y			sta 		Num_Buffer,y
.c750	8c 20 04	sty $0420			sty 		NumBufX 				; update position.
.c753					_FPTOExit:
.c753	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: interface/interface_mega65.asm

=80					IF_Width 	= 80 							; characters across
=25					IF_Height 	= 25 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line
=6					IF_XPos 	= 6 							; current position, horizontal.
=8					IF_FarPtr 	= 8 							; far pointer (4 bytes)
=$1000					IF_Screen = $1000							; 2k screen RAM here
=$800					IF_CharSet = $800							; 2k character set (0-7F) here
.e000					IF_Home:
.e000	48		pha				pha 								; reset cursor position
.e001	a9 00		lda #$00			lda 	#IF_Screen & $FF
.e003	85 04		sta $04				sta 	IF_Pos
.e005	a9 10		lda #$10			lda 	#IF_Screen >> 8
.e007	85 05		sta $05				sta 	IF_Pos+1
.e009	a9 00		lda #$00			lda 	#0
.e00b	85 06		sta $06				sta 	IF_XPos
.e00d	68		pla				pla
.e00e	60		rts				rts
.e00f					IF_NewLine:
.e00f	48		pha				pha
.e010	a9 00		lda #$00			lda 	#0 							; back to start of line
.e012	85 06		sta $06				sta 	IF_XPos
.e014	18		clc				clc 								; down one line
.e015	a5 04		lda $04				lda 	IF_Pos
.e017	69 50		adc #$50			adc 	#80
.e019	85 04		sta $04				sta 	IF_Pos
.e01b	90 02		bcc $e01f			bcc 	_IF_NoCarry 				; carry through.
.e01d	e6 05		inc $05				inc 	IF_Pos+1
.e01f					_IF_NoCarry:
.e01f	68		pla				pla
.e020	60		rts				rts
.e021					IF_Read:
.e021	5a		phy				phy 								; save current Y
.e022	a4 06		ldy $06				ldy 	IF_XPos 					; read character at current position
.e024	b1 04		lda ($04),y			lda 	(IF_Pos),y
.e026	e6 06		inc $06				inc 	IF_XPos 					; step right.
.e028	7a		ply				ply									; restore Y
.e029	60		rts				rts
.e02a					IF_Write:
.e02a	5a		phy				phy 								; save current Y
.e02b	a4 06		ldy $06				ldy 	IF_XPos 					; write character at current position
.e02d	91 04		sta ($04),y			sta 	(IF_Pos),y
.e02f	e6 06		inc $06				inc 	IF_XPos 					; step right.
.e031	7a		ply				ply									; restore Y
.e032	60		rts				rts
.e033					IF_LeftOne:
.e033	c6 06		dec $06				dec 	IF_XPos
.e035	60		rts				rts
.e036					IF_CheckBreak:
.e036	db		phz				phz
.e037	20 7f e0	jsr $e07f			jsr 	IF_SetupKeyAddress 			; point to keyboard
.e03a	e6 08		inc $08				inc 	IF_FarPtr 					; point to modifiers.
.e03c	ea		nop				nop 								; read modifiers.
.e03d	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.e03f	fb		plz				plz 								; restore Z
.e040	29 05		and #$05			and 	#5							; break is LeftShift+Ctrl
.e042	c9 05		cmp #$05			cmp 	#5
.e044	f0 02		beq $e048			beq 	_IF_CBExit
.e046	a9 00		lda #$00			lda 	#0
.e048					_IF_CBExit:
.e048	c9 00		cmp #$00			cmp 	#0
.e04a	60		rts				rts
.e04b					IF_GetKey:
.e04b	db		phz				phz
.e04c	20 7f e0	jsr $e07f			jsr 	IF_SetupKeyAddress
.e04f	ea		nop				nop 								; read keyboard
.e050	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.e052	c9 14		cmp #$14			cmp 	#20
.e054	d0 02		bne $e058			bne 	_KMNo
.e056	a9 08		lda #$08			lda 	#"H"-64
.e058					_KMNo:
.e058	c9 91		cmp #$91			cmp 	#145
.e05a	d0 02		bne $e05e			bne 	_KMNo
.e05c	a9 17		lda #$17			lda 	#"W"-64
.e05e					_KMNo:
.e05e	c9 11		cmp #$11			cmp 	#17
.e060	d0 02		bne $e064			bne 	_KMNo
.e062	a9 13		lda #$13			lda 	#"S"-64
.e064					_KMNo:
.e064	c9 9d		cmp #$9d			cmp 	#157
.e066	d0 02		bne $e06a			bne 	_KMNo
.e068	a9 01		lda #$01			lda 	#"A"-64
.e06a					_KMNo:
.e06a	c9 1d		cmp #$1d			cmp 	#29
.e06c	d0 02		bne $e070			bne 	_KMNo
.e06e	a9 04		lda #$04			lda 	#"D"-64
.e070					_KMNo:
.e070	c9 00		cmp #$00			cmp 	#0
.e072	f0 07		beq $e07b			beq 	_IFGKEmpty
.e074	48		pha				pha
.e075	a9 00		lda #$00			lda 	#0
.e077	ea		nop				nop
.e078	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e07a	68		pla				pla
.e07b					_IFGKEmpty:
.e07b	fb		plz				plz
.e07c	c9 00		cmp #$00			cmp 	#0 							; set Z
.e07e	60		rts				rts
.e07f					IF_SetupKeyAddress:
.e07f	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to read keyboard.
.e081	85 0b		sta $0b				sta 	IF_FarPtr+3
.e083	a9 fd		lda #$fd			lda 	#$FD
.e085	85 0a		sta $0a				sta 	IF_FarPtr+2
.e087	a9 36		lda #$36			lda 	#$36
.e089	85 09		sta $09				sta 	IF_FarPtr+1
.e08b	a9 10		lda #$10			lda 	#$10
.e08d	85 08		sta $08				sta 	IF_FarPtr+0
.e08f	a3 00		ldz #$00			ldz 	#0
.e091	60		rts				rts
.e092					IF_Reset:
.e092	48		pha				pha 								; save registers
.e093	da		phx				phx
.e094	5a		phy				phy
.e095	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to video system.
.e097	85 0b		sta $0b				sta 	IF_FarPtr+3
.e099	a9 fd		lda #$fd			lda 	#$FD
.e09b	85 0a		sta $0a				sta 	IF_FarPtr+2
.e09d	a9 30		lda #$30			lda 	#$30
.e09f	85 09		sta $09				sta 	IF_FarPtr+1
.e0a1	a9 00		lda #$00			lda 	#$00
.e0a3	85 08		sta $08				sta 	IF_FarPtr+0
.e0a5	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.e0a7	a9 47		lda #$47			lda 	#$47
.e0a9	ea		nop				nop
.e0aa	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0ac	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.e0ae	a9 53		lda #$53			lda 	#$53
.e0b0	ea		nop				nop
.e0b1	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0b3	a3 30		ldz #$30			ldz 	#$30 						; address already set up
.e0b5	a9 40		lda #$40			lda 	#$40
.e0b7	ea		nop				nop
.e0b8	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0ba	a3 31		ldz #$31			ldz 	#$31 						; address already set up
.e0bc	a9 c0		lda #$c0			lda 	#$80+$40
.e0be	ea		nop				nop
.e0bf	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0c1	a3 20		ldz #$20			ldz 	#$20 						; address already set up
.e0c3	a9 00		lda #$00			lda 	#0
.e0c5	ea		nop				nop
.e0c6	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0c8	a3 21		ldz #$21			ldz 	#$21 						; address already set up
.e0ca	a9 00		lda #$00			lda 	#0
.e0cc	ea		nop				nop
.e0cd	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0cf	a3 54		ldz #$54			ldz 	#$54 						; address already set up
.e0d1	a9 40		lda #$40			lda 	#$40
.e0d3	ea		nop				nop
.e0d4	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0d6	a3 01		ldz #$01			ldz 	#$01 						; address already set up
.e0d8	a9 ff		lda #$ff			lda 	#$FF
.e0da	ea		nop				nop
.e0db	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0dd	a3 00		ldz #$00			ldz 	#$00 						; address already set up
.e0df	a9 ff		lda #$ff			lda 	#$FF
.e0e1	ea		nop				nop
.e0e2	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0e4	a3 16		ldz #$16			ldz 	#$16 						; address already set up
.e0e6	a9 cc		lda #$cc			lda 	#$CC
.e0e8	ea		nop				nop
.e0e9	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0eb	a3 18		ldz #$18			ldz 	#$18 						; address already set up
.e0ed	a9 42		lda #$42			lda 	#$42
.e0ef	ea		nop				nop
.e0f0	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0f2	a3 11		ldz #$11			ldz 	#$11 						; address already set up
.e0f4	a9 1b		lda #$1b			lda 	#$1B
.e0f6	ea		nop				nop
.e0f7	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0f9	a9 00		lda #$00			lda 	#$00						; colour RAM at $1F800-1FFFF (2kb)
.e0fb	85 0b		sta $0b				sta 	IF_FarPtr+3
.e0fd	a9 01		lda #$01			lda 	#$01
.e0ff	85 0a		sta $0a				sta 	IF_FarPtr+2
.e101	a9 f8		lda #$f8			lda 	#$F8
.e103	85 09		sta $09				sta 	IF_FarPtr+1
.e105	a9 00		lda #$00			lda 	#$00
.e107	85 08		sta $08				sta 	IF_FarPtr+0
.e109	a3 00		ldz #$00			ldz 	#0
.e10b					_EXTClearColorRam:
.e10b	a9 05		lda #$05			lda 	#5							; fill that with this colour.
.e10d	ea		nop				nop
.e10e	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e110	3b		dez				dez
.e111	d0 f8		bne $e10b			bne 	_EXTClearColorRam
.e113	e6 09		inc $09				inc 	IF_FarPtr+1
.e115	d0 f4		bne $e10b			bne 	_EXTClearColorRam
.e117	a2 00		ldx #$00			ldx 	#0 							; copy PET Font into memory.
.e119					_EXTCopyCBMFont:
.e119	bd 5a e1	lda $e15a,x			lda 	IF_CBMFont,x 				; +$800 uses the lower case c/set
.e11c	9d 00 08	sta $0800,x			sta 	IF_CharSet,x
.e11f	49 ff		eor #$ff			eor 	#$FF
.e121	9d 00 0c	sta $0c00,x			sta 	IF_CharSet+$400,x
.e124	bd 5a e2	lda $e25a,x			lda 	IF_CBMFont+$100,x
.e127	9d 00 09	sta $0900,x			sta 	IF_CharSet+$100,x
.e12a	49 ff		eor #$ff			eor 	#$FF
.e12c	9d 00 0d	sta $0d00,x			sta 	IF_CharSet+$500,x
.e12f	bd 5a e3	lda $e35a,x			lda 	IF_CBMFont+$200,x
.e132	9d 00 0a	sta $0a00,x			sta 	IF_CharSet+$200,x
.e135	49 ff		eor #$ff			eor 	#$FF
.e137	9d 00 0e	sta $0e00,x			sta 	IF_CharSet+$600,x
.e13a	bd 5a e4	lda $e45a,x			lda 	IF_CBMFont+$300,x
.e13d	9d 00 0b	sta $0b00,x			sta 	IF_CharSet+$300,x
.e140	49 ff		eor #$ff			eor 	#$FF
.e142	9d 00 0f	sta $0f00,x			sta 	IF_CharSet+$700,x
.e145	ca		dex				dex
.e146	d0 d1		bne $e119			bne 	_EXTCopyCBMFont
.e148	a9 3b		lda #$3b			lda 	#$3F-4  					; puts ROM back in the map (the -4)
.e14a	85 01		sta $01				sta 	$01
.e14c	a9 00		lda #$00			lda 	#$00						; do not map bytes 0000-7FFF
.e14e	a2 00		ldx #$00			ldx 	#$00						; (so we use the RAM physically at $0000-$7FFF)
.e150	a0 00		ldy #$00			ldy 	#$00 						; 8000-FFFF offset by $200. The lower 8 bits are $00
.e152	a3 f2		ldz #$f2			ldz 	#$F2 						; so this is an actual offset of $20000. So the space at
.e154	5c		map				map
.e155	ea		nop				eom
.e156	7a		ply				ply 								; restore and exit.
.e157	fa		plx				plx
.e158	68		pla				pla
.e159	60		rts				rts
.e15a					IF_CBMFont:
>e15a	1c 22 4a 56 4c 20 1e 00				.binary "pet-font.bin"
>e162	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>e172	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>e182	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>e192	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>e1a2	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>e1b2	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>e1c2	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>e1d2	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>e1e2	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>e1f2	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>e202	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>e212	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>e222	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>e232	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>e242	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>e252	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>e262	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>e272	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>e282	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>e292	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>e2a2	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>e2b2	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>e2c2	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>e2d2	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>e2e2	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>e2f2	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>e302	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>e312	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>e322	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>e332	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>e342	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>e352	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>e362	08 1c 3e 7f 7f 1c 3e 00 10 10 10 10 10 10 10 10
>e372	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>e382	00 ff 00 00 00 00 00 00 00 00 00 00 00 ff 00 00
>e392	20 20 20 20 20 20 20 20 04 04 04 04 04 04 04 04
>e3a2	00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>e3b2	08 08 08 10 e0 00 00 00 80 80 80 80 80 80 80 ff
>e3c2	80 40 20 10 08 04 02 01 01 02 04 08 10 20 40 80
>e3d2	ff 80 80 80 80 80 80 80 ff 01 01 01 01 01 01 01
>e3e2	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 00 ff 00
>e3f2	36 7f 7f 7f 3e 1c 08 00 40 40 40 40 40 40 40 40
>e402	00 00 00 00 03 04 08 08 81 42 24 18 18 24 42 81
>e412	00 3c 42 42 42 42 3c 00 08 1c 2a 77 2a 08 08 00
>e422	02 02 02 02 02 02 02 02 08 1c 3e 7f 3e 1c 08 00
>e432	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>e442	08 08 08 08 08 08 08 08 00 00 01 3e 54 14 14 00
>e452	ff 7f 3f 1f 0f 07 03 01 00 00 00 00 00 00 00 00
>e462	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>e472	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>e482	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>e492	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>e4a2	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>e4b2	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>e4c2	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>e4d2	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>e4e2	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>e4f2	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>e502	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>e512	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>e522	00 00 00 00 00 ff ff ff 01 01 01 01 01 01 01 ff
>e532	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>e542	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>e552	f0 f0 f0 f0 0f 0f 0f 0f 1c 22 4a 56 4c 20 1e 00
>e562	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>e572	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>e582	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>e592	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>e5a2	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>e5b2	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>e5c2	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>e5d2	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>e5e2	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>e5f2	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>e602	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>e612	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>e622	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>e632	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>e642	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>e652	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>e662	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>e672	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>e682	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>e692	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>e6a2	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>e6b2	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>e6c2	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>e6d2	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>e6e2	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>e6f2	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>e702	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>e712	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>e722	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>e732	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>e742	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>e752	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>e762	00 00 38 04 3c 44 3a 00 40 40 5c 62 42 62 5c 00
>e772	00 00 3c 42 40 42 3c 00 02 02 3a 46 42 46 3a 00
>e782	00 00 3c 42 7e 40 3c 00 0c 12 10 7c 10 10 10 00
>e792	00 00 3a 46 46 3a 02 3c 40 40 5c 62 42 42 42 00
>e7a2	08 00 18 08 08 08 1c 00 04 00 0c 04 04 04 44 38
>e7b2	40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>e7c2	00 00 76 49 49 49 49 00 00 00 5c 62 42 42 42 00
>e7d2	00 00 3c 42 42 42 3c 00 00 00 5c 62 62 5c 40 40
>e7e2	00 00 3a 46 46 3a 02 02 00 00 5c 62 40 40 40 00
>e7f2	00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 12 0c 00
>e802	00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>e812	00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>e822	00 00 42 42 46 3a 02 3c 00 00 7e 04 18 20 7e 00
>e832	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>e842	08 08 08 08 08 08 08 08 cc cc 33 33 cc cc 33 33
>e852	cc 66 33 99 cc 66 33 99 00 00 00 00 00 00 00 00
>e862	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>e872	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>e882	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>e892	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>e8a2	99 33 66 cc 99 33 66 cc 03 03 03 03 03 03 03 03
>e8b2	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>e8c2	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>e8d2	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>e8e2	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>e8f2	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>e902	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>e912	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>e922	00 00 00 00 00 ff ff ff 01 02 44 48 50 60 40 00
>e932	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>e942	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>e952	f0 f0 f0 f0 0f 0f 0f 0f

;******  Return to file: basic.asm


;******  Processing file: interface/interface_tools.asm

.e95a					IFT_ClearScreen:
.e95a	48		pha				pha
.e95b	da		phx				phx
.e95c	5a		phy				phy
.e95d	20 00 e0	jsr $e000			jsr 	IF_Home 					; home cursor
.e960	a2 19		ldx #$19			ldx 	#IF_Height 					; this many lines.
.e962					_IFT_CS0:
.e962	a0 50		ldy #$50			ldy 	#IF_Width 					; this many chars/line
.e964					_IFT_CS1:
.e964	a9 20		lda #$20			lda 	#' '						; clear line.
.e966	20 2a e0	jsr $e02a			jsr 	IF_Write
.e969	88		dey				dey
.e96a	d0 f8		bne $e964			bne 	_IFT_CS1
.e96c	20 0f e0	jsr $e00f			jsr 	IF_NewLine 					; next line down
.e96f	ca		dex				dex
.e970	d0 f0		bne $e962			bne 	_IFT_CS0
.e972	7a		ply				ply
.e973	fa		plx				plx
.e974	68		pla				pla
.e975					IFT_HomeCursor:
.e975	48		pha				pha
.e976	20 00 e0	jsr $e000			jsr 	IF_Home
.e979	a9 00		lda #$00			lda 	#0
.e97b	8d 00 02	sta $0200			sta 	IFT_XCursor
.e97e	8d 01 02	sta $0201			sta 	IFT_YCursor
.e981	68		pla				pla
.e982	60		rts				rts
.e983					IFT_UpLine:
.e983	48		pha				pha
.e984	ad 01 02	lda $0201			lda  	IFT_YCursor 				; get Y
.e987	3a		dec a				dec 	a 							; line above
.e988	30 03		bmi $e98d			bmi 	_IFTULExit 					; too far, abort
.e98a	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos					; set to that line.
.e98d					_IFTULExit:
.e98d	68		pla				pla
.e98e	60		rts				rts
.e98f					IFT_PrintCharacter:
.e98f	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.e991	f0 18		beq $e9ab			beq 	IFT_NewLine
.e993	48		pha				pha
.e994	20 c3 e9	jsr $e9c3			jsr 	IFT_UpperCase 				; make upper case
.e997	29 3f		and #$3f			and 	#63 						; make 6 bit PETSCII
.e999	20 2a e0	jsr $e02a			jsr 	IF_Write 					; write out.
.e99c	ee 00 02	inc $0200			inc 	IFT_XCursor 				; bump x cursor
.e99f	ad 00 02	lda $0200			lda 	IFT_XCursor 				; reached RHS ?
.e9a2	c9 50		cmp #$50			cmp 	#IF_Width
.e9a4	d0 03		bne $e9a9			bne 	_IFT_PCNotEOL
.e9a6	20 ab e9	jsr $e9ab			jsr 	IFT_NewLine 				; if so do new line.
.e9a9					_IFT_PCNotEOL:
.e9a9	68		pla				pla
.e9aa	60		rts				rts
.e9ab					IFT_NewLine:
.e9ab	48		pha				pha
.e9ac	20 0f e0	jsr $e00f			jsr 	IF_NewLine 					; new line on actual screen.
.e9af	a9 00		lda #$00			lda 	#0 							; reset x position
.e9b1	8d 00 02	sta $0200			sta 	IFT_XCursor
.e9b4	ee 01 02	inc $0201			inc 	IFT_YCursor 				; move down.
.e9b7	ad 01 02	lda $0201			lda 	IFT_YCursor
.e9ba	c9 19		cmp #$19			cmp 	#IF_Height 					; reached bottom.
.e9bc	d0 03		bne $e9c1			bne 	_IFT_NL_NotEOS
.e9be	20 ce e9	jsr $e9ce			jsr 	IFT_Scroll 					; scroll screen up.
.e9c1					_IFT_NL_NotEOS:
.e9c1	68		pla				pla
.e9c2	60		rts				rts
.e9c3					IFT_UpperCase:
.e9c3	c9 61		cmp #$61			cmp 	#"a"
.e9c5	90 06		bcc $e9cd			bcc 	_IFT_UCExit
.e9c7	c9 7b		cmp #$7b			cmp 	#"z"+1
.e9c9	b0 02		bcs $e9cd			bcs 	_IFT_UCExit
.e9cb	49 20		eor #$20			eor 	#$20
.e9cd					_IFT_UCExit:
.e9cd	60		rts				rts
.e9ce					IFT_Scroll:
.e9ce	48		pha				pha 								; save AXY
.e9cf	da		phx				phx
.e9d0	5a		phy				phy
.e9d1	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.e9d3					_IFT_SLoop:
.e9d3	20 f3 e9	jsr $e9f3			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.e9d6	e8		inx				inx
.e9d7	e0 18		cpx #$18			cpx 	#IF_Height-1				; do whole screen
.e9d9	d0 f8		bne $e9d3			bne 	_IFT_SLoop
.e9db	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.e9dd	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.e9e0	a2 50		ldx #$50			ldx 	#IF_Width 					; blank line
.e9e2					_IFT_SBlank:
.e9e2	a9 20		lda #$20			lda 	#32
.e9e4	20 2a e0	jsr $e02a			jsr 	IF_Write
.e9e7	ca		dex				dex
.e9e8	d0 f8		bne $e9e2			bne 	_IFT_SBlank
.e9ea	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.e9ec	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.e9ef	7a		ply				ply
.e9f0	fa		plx				plx
.e9f1	68		pla				pla
.e9f2	60		rts				rts
.e9f3					_IFT_ScrollLine:
.e9f3	da		phx				phx
.e9f4	da		phx				phx
.e9f5	8a		txa				txa 								; copy line into buffer.
.e9f6	1a		inc a				inc 	a 							; next line down.
.e9f7	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.e9fa	a2 00		ldx #$00			ldx 	#0
.e9fc					_IFTScrollCopy1:
.e9fc	20 21 e0	jsr $e021			jsr 	IF_Read
.e9ff	9d 02 02	sta $0202,x			sta 	IFT_Buffer,x
.ea02	e8		inx				inx
.ea03	e0 50		cpx #$50			cpx 	#IF_Width
.ea05	d0 f5		bne $e9fc			bne 	_IFTScrollCopy1
.ea07	68		pla				pla
.ea08	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.ea0b	a2 00		ldx #$00			ldx 	#0
.ea0d					_IFTScrollCopy2:
.ea0d	bd 02 02	lda $0202,x			lda 	IFT_Buffer,x
.ea10	20 2a e0	jsr $e02a			jsr 	IF_Write
.ea13	e8		inx				inx
.ea14	e0 50		cpx #$50			cpx 	#IF_Width
.ea16	d0 f5		bne $ea0d			bne 	_IFTScrollCopy2
.ea18	fa		plx				plx
.ea19	60		rts				rts
.ea1a					IFT_SetYPos:
.ea1a	48		pha				pha
.ea1b	da		phx				phx
.ea1c	aa		tax				tax
.ea1d	20 75 e9	jsr $e975			jsr 	IFT_HomeCursor
.ea20	e0 00		cpx #$00			cpx 	#0
.ea22	f0 09		beq $ea2d			beq 	_IFT_MOAExit
.ea24					_IFT_MOALoop:
.ea24	20 0f e0	jsr $e00f			jsr 	IF_NewLine
.ea27	ee 01 02	inc $0201			inc 	IFT_YCursor
.ea2a	ca		dex				dex
.ea2b	d0 f7		bne $ea24			bne		_IFT_MOALoop
.ea2d					_IFT_MOAExit:
.ea2d	fa		plx				plx
.ea2e	68		pla				pla
.ea2f	60		rts				rts
.ea30					IFT_GetKeyCursor:
.ea30	20 38 ea	jsr $ea38			jsr 	_IFT_FlipCursor 			; reverse current
.ea33					_IFT_GKCWait:
.ea33	20 4b e0	jsr $e04b			jsr 	IF_GetKey 					; get key
.ea36	f0 fb		beq $ea33			beq 	_IFT_GKCWait
.ea38					_IFT_FlipCursor:
.ea38	48		pha				pha 								; save
.ea39	20 21 e0	jsr $e021			jsr 	IF_Read 					; read
.ea3c	20 33 e0	jsr $e033			jsr 	IF_LeftOne
.ea3f	49 80		eor #$80			eor 	#$80 						; reverse
.ea41	20 2a e0	jsr $e02a			jsr 	IF_Write 					; write
.ea44	20 33 e0	jsr $e033			jsr 	IF_LeftOne
.ea47	68		pla				pla
.ea48	60		rts				rts
.ea49					IFT_ReadLine:
.ea49	48		pha				pha
.ea4a					_IFT_RLLoop:
.ea4a	20 30 ea	jsr $ea30			jsr 	IFT_GetKeyCursor 			; get keystroke
.ea4d	c9 0d		cmp #$0d			cmp 	#13							; return
.ea4f	f0 7d		beq $eace			beq 	_IFT_RLExit
.ea51	c9 20		cmp #$20			cmp 	#32 						; control character
.ea53	90 05		bcc $ea5a			bcc 	_IFT_Control
.ea55	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.ea58	80 f0		bra $ea4a			bra 	_IFT_RLLoop
.ea5a					_IFT_Control:
.ea5a	c9 01		cmp #$01			cmp 	#"A"-64
.ea5c	f0 26		beq $ea84			beq 	_IFT_Left
.ea5e	c9 04		cmp #$04			cmp 	#"D"-64
.ea60	f0 2e		beq $ea90			beq 	_IFT_Right
.ea62	c9 17		cmp #$17			cmp 	#"W"-64
.ea64	f0 36		beq $ea9c			beq 	_IFT_Up
.ea66	c9 13		cmp #$13			cmp 	#"S"-64
.ea68	f0 3e		beq $eaa8			beq 	_IFT_Down
.ea6a	c9 08		cmp #$08			cmp 	#"H"-64
.ea6c	f0 09		beq $ea77			beq 	_IFT_Backspace
.ea6e	c9 1a		cmp #$1a			cmp 	#"Z"-64
.ea70	d0 d8		bne $ea4a			bne 	_IFT_RLLoop
.ea72	20 5a e9	jsr $e95a			jsr 	IFT_ClearScreen				; clear CTL-Z
.ea75	80 d3		bra $ea4a			bra 	_IFT_RLLoop
.ea77					_IFT_Backspace:
.ea77	ad 00 02	lda $0200			lda 	IFT_XCursor 				; check not start of line.
.ea7a	f0 ce		beq $ea4a			beq 	_IFT_RLLoop
.ea7c	20 33 e0	jsr $e033			jsr 	IF_LeftOne
.ea7f	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.ea81	20 2a e0	jsr $e02a			jsr 	IF_Write
.ea84					_IFT_Left:
.ea84	ce 00 02	dec $0200			dec 	IFT_XCursor 				; left CTL-W
.ea87	10 29		bpl $eab2			bpl 	_IFT_Reposition
.ea89	a9 4f		lda #$4f			lda 	#IF_Width-1
.ea8b					_IFT_SetX:
.ea8b	8d 00 02	sta $0200			sta 	IFT_XCursor
.ea8e	80 22		bra $eab2			bra 	_IFT_Reposition
.ea90					_IFT_Right:
.ea90	ee 00 02	inc $0200			inc 	IFT_XCursor
.ea93	ad 00 02	lda $0200			lda 	IFT_XCursor
.ea96	49 50		eor #$50			eor 	#IF_Width
.ea98	f0 f1		beq $ea8b			beq 	_IFT_SetX
.ea9a	80 16		bra $eab2			bra 	_IFT_Reposition
.ea9c					_IFT_Up:
.ea9c	ce 01 02	dec $0201			dec 	IFT_YCursor
.ea9f	10 11		bpl $eab2			bpl 	_IFT_Reposition
.eaa1	a9 18		lda #$18			lda 	#IF_Height-1
.eaa3					_IFT_SetY:
.eaa3	8d 01 02	sta $0201			sta 	IFT_YCursor
.eaa6	80 0a		bra $eab2			bra 	_IFT_Reposition
.eaa8					_IFT_Down:
.eaa8	ee 01 02	inc $0201			inc 	IFT_YCursor
.eaab	ad 01 02	lda $0201			lda 	IFT_YCursor
.eaae	49 19		eor #$19			eor 	#IF_Height
.eab0	f0 f1		beq $eaa3			beq 	_IFT_SetY
.eab2					_IFT_Reposition:
.eab2	ad 00 02	lda $0200			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.eab5	48		pha				pha
.eab6	ad 01 02	lda $0201			lda 	IFT_YCursor
.eab9	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.eabc	68		pla				pla
.eabd	aa		tax				tax
.eabe	e0 00		cpx #$00			cpx 	#0
.eac0	f0 88		beq $ea4a			beq 	_IFT_RLLoop
.eac2					_IFT_MoveRight:
.eac2	20 21 e0	jsr $e021			jsr 	IF_Read
.eac5	ee 00 02	inc $0200			inc 	IFT_XCursor
.eac8	ca		dex				dex
.eac9	d0 f7		bne $eac2			bne 	_IFT_MoveRight
.eacb	4c 4a ea	jmp $ea4a			jmp 	_IFT_RLLoop
.eace					_IFT_RLExit:
.eace	ad 01 02	lda $0201			lda 	IFT_YCursor 				; go to start of line.
.ead1	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.ead4	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.ead6					_IFT_RLRead:
.ead6	20 21 e0	jsr $e021			jsr 	IF_Read
.ead9	18		clc				clc 								; convert back to ASCII.
.eada	49 20		eor #$20			eor 	#$20
.eadc	69 20		adc #$20			adc 	#$20
.eade	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.eae1	e8		inx				inx
.eae2	e0 50		cpx #$50			cpx 	#IF_Width
.eae4	d0 f0		bne $ead6			bne 	_IFT_RLRead
.eae6					_IFT_RL_Trim:
.eae6	ca		dex				dex 	 							; previous char
.eae7	30 07		bmi $eaf0			bmi 	_IFT_Found 					; gone too far
.eae9	bd 66 02	lda $0266,x			lda 	IFT_LineBuffer,x			; go back if space
.eaec	c9 20		cmp #$20			cmp 	#" "
.eaee	f0 f6		beq $eae6			beq 	_IFT_RL_Trim
.eaf0					_IFT_Found:
.eaf0	e8		inx				inx 								; forward to non-space
.eaf1	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.eaf3	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.eaf6	68		pla				pla
.eaf7	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.eaf9	a0 02		ldy #$02			ldy 	#IFT_LineBuffer >> 8
.eafb	60		rts				rts

;******  Return to file: basic.asm

.eafc					StartROM:
.eafc	a2 ff		ldx #$ff			ldx 	#$FF 						; empty stack
.eafe	9a		txs				txs
.eaff	20 92 e0	jsr $e092			jsr 	IF_Reset 					; reset external interface
.eb02	20 5a e9	jsr $e95a			jsr 	IFT_ClearScreen
.eb05	4c 8c a0	jmp $a08c			jmp 	TIM_Start
.eb08	20 10 eb	jsr $eb10			jsr 	FPTTest
.eb0b	80 fe		bra $eb0b	freeze:	bra 	freeze
.eb0d					ERR_Handler:
.eb0d	80 fe		bra $eb0d			bra 	ERR_Handler
.eb0f					NMIHandler:
.eb0f	40		rti				rti

;******  Processing file: testing/fptest.asm

.eb10					FPTTest:
.eb10	a9 c8		lda #$c8			lda 	#FPTTestData & $FF 			; set zGenPtr to data.
.eb12	85 1a		sta $1a				sta 	zGenPtr
.eb14	a9 eb		lda #$eb			lda 	#FPTTestData >> 8
.eb16	85 1b		sta $1b				sta 	zGenPtr+1
.eb18	a2 00		ldx #$00			ldx 	#0 							; start at stack bottom.
.eb1a	a5 1b		lda $1b		FPTLoop:lda 	zGenPtr+1
.eb1c	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.eb1f	a5 1a		lda $1a				lda 	zGenPtr
.eb21	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.eb24	a9 2e		lda #$2e			lda 	#"."
.eb26	20 8f e9	jsr $e98f			jsr		IFT_PrintCharacter
.eb29	20 b9 eb	jsr $ebb9			jsr 	FPTGet 						; get next command
.eb2c	c9 00		cmp #$00			cmp 	#0 							; zero, exit
.eb2e	f0 58		beq $eb88			beq 	FPTExit
.eb30	c9 01		cmp #$01			cmp 	#1 							; 1,load
.eb32	f0 46		beq $eb7a			beq 	FPTLoad
.eb34	c9 2b		cmp #$2b			cmp 	#"+" 						; the -1/0/1 value in AC.
.eb36	d0 0b		bne $eb43			bne 	_skip1
.eb38	20 ad eb	jsr $ebad			jsr 	FPT_Preamble
.eb3b	20 3f c3	jsr $c33f			jsr 	FPAdd
.eb3e	20 b3 eb	jsr $ebb3			jsr 	FPT_Postamble
.eb41	80 d7		bra $eb1a			bra 	FPTLoop
.eb43					_skip1:
.eb43	c9 2d		cmp #$2d			cmp 	#"-" 						; the -1/0/1 value in AC.
.eb45	d0 0b		bne $eb52			bne 	_skip1
.eb47	20 ad eb	jsr $ebad			jsr 	FPT_Preamble
.eb4a	20 35 c3	jsr $c335			jsr 	FPSubtract
.eb4d	20 b3 eb	jsr $ebb3			jsr 	FPT_Postamble
.eb50	80 c8		bra $eb1a			bra 	FPTLoop
.eb52					_skip1:
.eb52	c9 2a		cmp #$2a			cmp 	#"*" 						; the -1/0/1 value in AC.
.eb54	d0 0b		bne $eb61			bne 	_skip1
.eb56	20 ad eb	jsr $ebad			jsr 	FPT_Preamble
.eb59	20 0f c4	jsr $c40f			jsr 	FPMultiply
.eb5c	20 b3 eb	jsr $ebb3			jsr 	FPT_Postamble
.eb5f	80 b9		bra $eb1a			bra 	FPTLoop
.eb61					_skip1:
.eb61	c9 2f		cmp #$2f			cmp 	#"/" 						; the -1/0/1 value in AC.
.eb63	d0 0b		bne $eb70			bne 	_skip1
.eb65	20 ad eb	jsr $ebad			jsr 	FPT_Preamble
.eb68	20 c0 c4	jsr $c4c0			jsr 	FPDivide
.eb6b	20 b3 eb	jsr $ebb3			jsr 	FPT_Postamble
.eb6e	80 aa		bra $eb1a			bra 	FPTLoop
.eb70					_skip1:
.eb70	c9 7e		cmp #$7e			cmp 	#"~" 						; ~, compare
.eb72	f0 1a		beq $eb8e			beq 	FPTCompare
.eb74	c9 3d		cmp #$3d			cmp 	#"="						; = check equal
.eb76	f0 28		beq $eba0			beq 	FPTCheck
.eb78					FPTError:
.eb78	80 fe		bra $eb78			bra 	FPTError
.eb7a					FPTLoad:
.eb7a	a0 06		ldy #$06			ldy 	#6 							; data to copy
.eb7c					_FPTLoadLoop:
.eb7c	20 b9 eb	jsr $ebb9			jsr 	FPTGet
.eb7f	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.eb82	e8		inx				inx
.eb83	88		dey				dey
.eb84	d0 f6		bne $eb7c			bne 	_FPTLoadLoop
.eb86	80 92		bra $eb1a			bra 	FPTLoop
.eb88					FPTExit:
.eb88	a9 2a		lda #$2a			lda 	#42
.eb8a	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.eb8d	60		rts				rts
.eb8e					FPTCompare:
.eb8e	20 ad eb	jsr $ebad			jsr 	FPT_Preamble
.eb91	20 48 c5	jsr $c548			jsr 	FPCompare
.eb94	20 6d c1	jsr $c16d			jsr 	FPUSetInteger
.eb97	20 ab c1	jsr $c1ab			jsr 	FPUToFloat
.eb9a	20 b3 eb	jsr $ebb3			jsr 	FPT_Postamble
.eb9d	4c 1a eb	jmp $eb1a			jmp 	FPTLoop
.eba0					FPTCheck:
.eba0	20 ad eb	jsr $ebad			jsr 	FPT_Preamble
.eba3	20 48 c5	jsr $c548			jsr 	FPCompare
.eba6	09 00		ora #$00			ora 	#0
.eba8					_FPTCFail:
.eba8	d0 fe		bne $eba8			bne 	_FPTCFail
.ebaa	4c 1a eb	jmp $eb1a			jmp 	FPTLoop
.ebad					FPT_Preamble:
.ebad	8a		txa				txa
.ebae	38		sec				sec
.ebaf	e9 0c		sbc #$0c			sbc 	#12
.ebb1	aa		tax				tax
.ebb2	60		rts				rts
.ebb3					FPT_Postamble:
.ebb3	8a		txa				txa
.ebb4	18		clc				clc
.ebb5	69 06		adc #$06			adc 	#6
.ebb7	aa		tax				tax
.ebb8	60		rts				rts
.ebb9	5a		phy		FPTGet:	phy
.ebba	a0 00		ldy #$00			ldy 	#0
.ebbc	b1 1a		lda ($1a),y			lda 	(zGenPtr),y
.ebbe	48		pha				pha
.ebbf	e6 1a		inc $1a				inc 	zGenPtr
.ebc1	d0 02		bne $ebc5			bne 	_FPTGet1
.ebc3	e6 1b		inc $1b				inc 	zGenPtr+1
.ebc5					_FPTGet1:
.ebc5	68		pla				pla
.ebc6	7a		ply				ply
.ebc7	60		rts				rts
.ebc8					FPTTestData:

;******  Processing file: testing/script.inc

>ebc8	01					.byte 	1	; *** Load Integer 99999 ***
>ebc9	9f 86 01 00				.dword 	$1869f
>ebcd	00 01					.byte 	0,$01
>ebcf	01					.byte 	1     ; *** Load Float 6.904571533203124e-06 ***
>ebd0	5f d1 ad e7				.dword 	$e7add15f
>ebd4	6f 00					.byte 	$6f,$0
>ebd6	01					.byte 	1     ; *** Load Float 9.138083 ***
>ebd7	85 96 35 92				.dword 	$92359685
>ebdb	84 00					.byte 	$84,$0
>ebdd	7e					.byte 	$7e   ; *** Command ~ ***
>ebde	01					.byte 	1     ; *** Load Float -1 ***
>ebdf	00 00 00 80				.dword 	$80000000
>ebe3	81 80					.byte 	$81,$80
>ebe5	3d					.byte 	$3d   ; *** Command = ***
>ebe6	01					.byte 	1     ; *** Load Float 121997447355885.94 ***
>ebe7	06 7d e9 dd				.dword 	$dde97d06
>ebeb	af 00					.byte 	$af,$0
>ebed	01					.byte 	1     ; *** Load Float 9.952853 ***
>ebee	c9 e2 3e 9f				.dword 	$9f3ee2c9
>ebf2	84 00					.byte 	$84,$0
>ebf4	2b					.byte 	$2b   ; *** Command + ***
>ebf5	01					.byte 	1     ; *** Load Float 121997447355895.89 ***
>ebf6	06 7d e9 dd				.dword 	$dde97d06
>ebfa	af 00					.byte 	$af,$0
>ebfc	3d					.byte 	$3d   ; *** Command = ***
>ebfd	01					.byte 	1     ; *** Load Float -1555655021675.1514 ***
>ebfe	ea 21 1a b5				.dword 	$b51a21ea
>ec02	a9 80					.byte 	$a9,$80
>ec04	01					.byte 	1     ; *** Load Float 9.283651 ***
>ec05	a1 d5 89 94				.dword 	$9489d5a1
>ec09	84 00					.byte 	$84,$0
>ec0b	2b					.byte 	$2b   ; *** Command + ***
>ec0c	01					.byte 	1     ; *** Load Float -1555655021665.8677 ***
>ec0d	ea 21 1a b5				.dword 	$b51a21ea
>ec11	a9 80					.byte 	$a9,$80
>ec13	3d					.byte 	$3d   ; *** Command = ***
>ec14	01					.byte 	1     ; *** Load Float 7675073.00352 ***
>ec15	01 82 39 ea				.dword 	$ea398201
>ec19	97 00					.byte 	$97,$0
>ec1b	01					.byte 	1     ; *** Load Float 423.55 ***
>ec1c	66 66 c6 d3				.dword 	$d3c66666
>ec20	89 00					.byte 	$89,$0
>ec22	7e					.byte 	$7e   ; *** Command ~ ***
>ec23	01					.byte 	1     ; *** Load Float 1 ***
>ec24	00 00 00 80				.dword 	$80000000
>ec28	81 00					.byte 	$81,$0
>ec2a	3d					.byte 	$3d   ; *** Command = ***
>ec2b	01					.byte 	1     ; *** Load Float 458.77 ***
>ec2c	5c 8f 62 e5				.dword 	$e5628f5c
>ec30	89 00					.byte 	$89,$0
>ec32	01					.byte 	1     ; *** Load Float -1.0 ***
>ec33	00 00 00 80				.dword 	$80000000
>ec37	81 80					.byte 	$81,$80
>ec39	2d					.byte 	$2d   ; *** Command - ***
>ec3a	01					.byte 	1     ; *** Load Float 459.77 ***
>ec3b	5c 8f e2 e5				.dword 	$e5e28f5c
>ec3f	89 00					.byte 	$89,$0
>ec41	3d					.byte 	$3d   ; *** Command = ***
>ec42	01					.byte 	1     ; *** Load Float -15.0 ***
>ec43	00 00 00 f0				.dword 	$f0000000
>ec47	84 80					.byte 	$84,$80
>ec49	01					.byte 	1     ; *** Load Float -253.42 ***
>ec4a	1e 85 6b fd				.dword 	$fd6b851e
>ec4e	88 80					.byte 	$88,$80
>ec50	2d					.byte 	$2d   ; *** Command - ***
>ec51	01					.byte 	1     ; *** Load Float 238.42 ***
>ec52	1e 85 6b ee				.dword 	$ee6b851e
>ec56	88 00					.byte 	$88,$0
>ec58	3d					.byte 	$3d   ; *** Command = ***
>ec59	01					.byte 	1     ; *** Load Float 62.74 ***
>ec5a	8f c2 f5 fa				.dword 	$faf5c28f
>ec5e	86 00					.byte 	$86,$0
>ec60	01					.byte 	1     ; *** Load Float -9.0 ***
>ec61	00 00 00 90				.dword 	$90000000
>ec65	84 80					.byte 	$84,$80
>ec67	2f					.byte 	$2f   ; *** Command / ***
>ec68	01					.byte 	1     ; *** Load Float -6.971111111111111 ***
>ec69	9b 57 13 df				.dword 	$df13579b
>ec6d	83 80					.byte 	$83,$80
>ec6f	3d					.byte 	$3d   ; *** Command = ***
>ec70	01					.byte 	1     ; *** Load Float 5.539232006412931e-14 ***
>ec71	3a ff 76 f9				.dword 	$f976ff3a
>ec75	54 00					.byte 	$54,$0
>ec77	01					.byte 	1     ; *** Load Float 6.4887 ***
>ec78	2e 6e a3 cf				.dword 	$cfa36e2e
>ec7c	83 00					.byte 	$83,$0
>ec7e	2f					.byte 	$2f   ; *** Command / ***
>ec7f	01					.byte 	1     ; *** Load Float 8.536736181997828e-15 ***
>ec80	34 bf c8 99				.dword 	$99c8bf34
>ec84	52 00					.byte 	$52,$0
>ec86	3d					.byte 	$3d   ; *** Command = ***
>ec87	01					.byte 	1     ; *** Load Float 1.268232 ***
>ec88	19 6d 55 a2				.dword 	$a2556d19
>ec8c	81 00					.byte 	$81,$0
>ec8e	01					.byte 	1     ; *** Load Float -16.0 ***
>ec8f	00 00 00 80				.dword 	$80000000
>ec93	85 80					.byte 	$85,$80
>ec95	2d					.byte 	$2d   ; *** Command - ***
>ec96	01					.byte 	1     ; *** Load Float 17.268232 ***
>ec97	d1 56 25 8a				.dword 	$8a2556d1
>ec9b	85 00					.byte 	$85,$0
>ec9d	3d					.byte 	$3d   ; *** Command = ***
>ec9e	01					.byte 	1     ; *** Load Float 748.57 ***
>ec9f	e1 7a 24 bb				.dword 	$bb247ae1
>eca3	8a 00					.byte 	$8a,$0
>eca5	01					.byte 	1     ; *** Load Float 1.2653908925130964e-12 ***
>eca6	f9 82 16 b2				.dword 	$b21682f9
>ecaa	59 00					.byte 	$59,$0
>ecac	7e					.byte 	$7e   ; *** Command ~ ***
>ecad	01					.byte 	1     ; *** Load Float 1 ***
>ecae	00 00 00 80				.dword 	$80000000
>ecb2	81 00					.byte 	$81,$0
>ecb4	3d					.byte 	$3d   ; *** Command = ***
>ecb5	01					.byte 	1     ; *** Load Float 847.45 ***
>ecb6	cc cc dc d3				.dword 	$d3dccccc
>ecba	8a 00					.byte 	$8a,$0
>ecbc	01					.byte 	1     ; *** Load Float -1343559.303168 ***
>ecbd	6c 3a 02 a4				.dword 	$a4023a6c
>ecc1	95 80					.byte 	$95,$80
>ecc3	2b					.byte 	$2b   ; *** Command + ***
>ecc4	01					.byte 	1     ; *** Load Float -1342711.853168 ***
>ecc5	d3 be e7 a3				.dword 	$a3e7bed3
>ecc9	95 80					.byte 	$95,$80
>eccb	3d					.byte 	$3d   ; *** Command = ***
>eccc	01					.byte 	1     ; *** Load Float 8.301443 ***
>eccd	e5 b5 d2 84				.dword 	$84d2b5e5
>ecd1	84 00					.byte 	$84,$0
>ecd3	01					.byte 	1     ; *** Load Float 8.301443 ***
>ecd4	e5 b5 d2 84				.dword 	$84d2b5e5
>ecd8	84 00					.byte 	$84,$0
>ecda	2d					.byte 	$2d   ; *** Command - ***
>ecdb	01					.byte 	1     ; *** Load Float 0.0 ***
>ecdc	00 00 00 00				.dword 	$0
>ece0	80 40					.byte 	$80,$40
>ece2	3d					.byte 	$3d   ; *** Command = ***
>ece3	01					.byte 	1     ; *** Load Float -114073.796608 ***
>ece4	f7 e5 cc de				.dword 	$decce5f7
>ece8	91 80					.byte 	$91,$80
>ecea	01					.byte 	1     ; *** Load Float 8.0 ***
>eceb	00 00 00 80				.dword 	$80000000
>ecef	84 00					.byte 	$84,$0
>ecf1	2b					.byte 	$2b   ; *** Command + ***
>ecf2	01					.byte 	1     ; *** Load Float -114065.796608 ***
>ecf3	f7 e5 c8 de				.dword 	$dec8e5f7
>ecf7	91 80					.byte 	$91,$80
>ecf9	3d					.byte 	$3d   ; *** Command = ***
>ecfa	01					.byte 	1     ; *** Load Float 2.193001 ***
>ecfb	dd 20 5a 8c				.dword 	$8c5a20dd
>ecff	82 00					.byte 	$82,$0
>ed01	01					.byte 	1     ; *** Load Float 3.594397 ***
>ed02	b6 99 0a e6				.dword 	$e60a99b6
>ed06	82 00					.byte 	$82,$0
>ed08	7e					.byte 	$7e   ; *** Command ~ ***
>ed09	01					.byte 	1     ; *** Load Float -1 ***
>ed0a	00 00 00 80				.dword 	$80000000
>ed0e	81 80					.byte 	$81,$80
>ed10	3d					.byte 	$3d   ; *** Command = ***
>ed11	01					.byte 	1     ; *** Load Float 8.908037 ***
>ed12	ce 51 87 8e				.dword 	$8e8751ce
>ed16	84 00					.byte 	$84,$0
>ed18	01					.byte 	1     ; *** Load Float 1.837815 ***
>ed19	9c 85 3d eb				.dword 	$eb3d859c
>ed1d	81 00					.byte 	$81,$0
>ed1f	7e					.byte 	$7e   ; *** Command ~ ***
>ed20	01					.byte 	1     ; *** Load Float 1 ***
>ed21	00 00 00 80				.dword 	$80000000
>ed25	81 00					.byte 	$81,$0
>ed27	3d					.byte 	$3d   ; *** Command = ***
>ed28	01					.byte 	1     ; *** Load Float -20.0 ***
>ed29	00 00 00 a0				.dword 	$a0000000
>ed2d	85 80					.byte 	$85,$80
>ed2f	01					.byte 	1     ; *** Load Float -50520.588288 ***
>ed30	9a 96 58 c5				.dword 	$c558969a
>ed34	90 80					.byte 	$90,$80
>ed36	2d					.byte 	$2d   ; *** Command - ***
>ed37	01					.byte 	1     ; *** Load Float 50500.588288 ***
>ed38	9a 96 44 c5				.dword 	$c544969a
>ed3c	90 00					.byte 	$90,$0
>ed3e	3d					.byte 	$3d   ; *** Command = ***
>ed3f	01					.byte 	1     ; *** Load Float 9.616753 ***
>ed40	64 38 de 99				.dword 	$99de3864
>ed44	84 00					.byte 	$84,$0
>ed46	01					.byte 	1     ; *** Load Float 0.734155 ***
>ed47	03 95 f1 bb				.dword 	$bbf19503
>ed4b	80 00					.byte 	$80,$0
>ed4d	2f					.byte 	$2f   ; *** Command / ***
>ed4e	01					.byte 	1     ; *** Load Float 13.09907717035231 ***
>ed4f	f1 d1 95 d1				.dword 	$d195d1f1
>ed53	84 00					.byte 	$84,$0
>ed55	3d					.byte 	$3d   ; *** Command = ***
>ed56	01					.byte 	1     ; *** Load Float 5.251196 ***
>ed57	31 cc 09 a8				.dword 	$a809cc31
>ed5b	83 00					.byte 	$83,$0
>ed5d	01					.byte 	1     ; *** Load Float 5.251196 ***
>ed5e	31 cc 09 a8				.dword 	$a809cc31
>ed62	83 00					.byte 	$83,$0
>ed64	7e					.byte 	$7e   ; *** Command ~ ***
>ed65	01					.byte 	1     ; *** Load Float 0 ***
>ed66	00 00 00 00				.dword 	$0
>ed6a	80 40					.byte 	$80,$40
>ed6c	3d					.byte 	$3d   ; *** Command = ***
>ed6d	01					.byte 	1     ; *** Load Float 8.124819 ***
>ed6e	35 42 ff 81				.dword 	$81ff4235
>ed72	84 00					.byte 	$84,$0
>ed74	01					.byte 	1     ; *** Load Float 2432243.3351680003 ***
>ed75	57 cd 73 94				.dword 	$9473cd57
>ed79	96 00					.byte 	$96,$0
>ed7b	2d					.byte 	$2d   ; *** Command - ***
>ed7c	01					.byte 	1     ; *** Load Float -2432235.2103490005 ***
>ed7d	d7 ac 73 94				.dword 	$9473acd7
>ed81	96 80					.byte 	$96,$80
>ed83	3d					.byte 	$3d   ; *** Command = ***
>ed84	01					.byte 	1     ; *** Load Float 3.553686 ***
>ed85	67 97 6f e3				.dword 	$e36f9767
>ed89	82 00					.byte 	$82,$0
>ed8b	01					.byte 	1     ; *** Load Float 1.0 ***
>ed8c	00 00 00 80				.dword 	$80000000
>ed90	81 00					.byte 	$81,$0
>ed92	2a					.byte 	$2a   ; *** Command * ***
>ed93	01					.byte 	1     ; *** Load Float 3.553686 ***
>ed94	67 97 6f e3				.dword 	$e36f9767
>ed98	82 00					.byte 	$82,$0
>ed9a	3d					.byte 	$3d   ; *** Command = ***
>ed9b	01					.byte 	1     ; *** Load Float 6.983425 ***
>ed9c	b4 37 78 df				.dword 	$df7837b4
>eda0	83 00					.byte 	$83,$0
>eda2	01					.byte 	1     ; *** Load Float 383739339349264.7 ***
>eda3	81 23 81 ae				.dword 	$ae812381
>eda7	b1 00					.byte 	$b1,$0
>eda9	2f					.byte 	$2f   ; *** Command / ***
>edaa	01					.byte 	1     ; *** Load Float 1.8198355716779816e-14 ***
>edab	22 8d ea a3				.dword 	$a3ea8d22
>edaf	53 00					.byte 	$53,$0
>edb1	3d					.byte 	$3d   ; *** Command = ***
>edb2	01					.byte 	1     ; *** Load Float 4.630112 ***
>edb3	a4 e0 29 94				.dword 	$9429e0a4
>edb7	83 00					.byte 	$83,$0
>edb9	01					.byte 	1     ; *** Load Float 1.2011826038360596e-09 ***
>edba	0d db 16 a5				.dword 	$a516db0d
>edbe	63 00					.byte 	$63,$0
>edc0	2b					.byte 	$2b   ; *** Command + ***
>edc1	01					.byte 	1     ; *** Load Float 4.630112001201182 ***
>edc2	a4 e0 29 94				.dword 	$9429e0a4
>edc6	83 00					.byte 	$83,$0
>edc8	3d					.byte 	$3d   ; *** Command = ***
>edc9	01					.byte 	1     ; *** Load Float 1.493712 ***
>edca	6e f4 31 bf				.dword 	$bf31f46e
>edce	81 00					.byte 	$81,$0
>edd0	01					.byte 	1     ; *** Load Float -785.58 ***
>edd1	b8 1e 65 c4				.dword 	$c4651eb8
>edd5	8a 80					.byte 	$8a,$80
>edd7	2b					.byte 	$2b   ; *** Command + ***
>edd8	01					.byte 	1     ; *** Load Float -784.0862880000001 ***
>edd9	be 85 05 c4				.dword 	$c40585be
>eddd	8a 80					.byte 	$8a,$80
>eddf	3d					.byte 	$3d   ; *** Command = ***
>ede0	01					.byte 	1     ; *** Load Float 939400744539.2589 ***
>ede1	ce a5 b8 da				.dword 	$dab8a5ce
>ede5	a8 00					.byte 	$a8,$0
>ede7	01					.byte 	1     ; *** Load Float 17.0 ***
>ede8	00 00 00 88				.dword 	$88000000
>edec	85 00					.byte 	$85,$0
>edee	2f					.byte 	$2f   ; *** Command / ***
>edef	01					.byte 	1     ; *** Load Float 55258867325.83876 ***
>edf0	67 f6 da cd				.dword 	$cddaf667
>edf4	a4 00					.byte 	$a4,$0
>edf6	3d					.byte 	$3d   ; *** Command = ***
>edf7	01					.byte 	1     ; *** Load Float -4.0 ***
>edf8	00 00 00 80				.dword 	$80000000
>edfc	83 80					.byte 	$83,$80
>edfe	01					.byte 	1     ; *** Load Float -4.0 ***
>edff	00 00 00 80				.dword 	$80000000
>ee03	83 80					.byte 	$83,$80
>ee05	2d					.byte 	$2d   ; *** Command - ***
>ee06	01					.byte 	1     ; *** Load Float 0.0 ***
>ee07	00 00 00 00				.dword 	$0
>ee0b	80 40					.byte 	$80,$40
>ee0d	3d					.byte 	$3d   ; *** Command = ***
>ee0e	01					.byte 	1     ; *** Load Float -33701266.194432005 ***
>ee0f	8c 64 8f 80				.dword 	$808f648c
>ee13	9a 80					.byte 	$9a,$80
>ee15	01					.byte 	1     ; *** Load Float -33701266.194432005 ***
>ee16	8c 64 8f 80				.dword 	$808f648c
>ee1a	9a 80					.byte 	$9a,$80
>ee1c	2d					.byte 	$2d   ; *** Command - ***
>ee1d	01					.byte 	1     ; *** Load Float 0.0 ***
>ee1e	00 00 00 00				.dword 	$0
>ee22	80 40					.byte 	$80,$40
>ee24	3d					.byte 	$3d   ; *** Command = ***
>ee25	01					.byte 	1     ; *** Load Float 12.0 ***
>ee26	00 00 00 c0				.dword 	$c0000000
>ee2a	84 00					.byte 	$84,$0
>ee2c	01					.byte 	1     ; *** Load Float -0.275222 ***
>ee2d	e2 e5 e9 8c				.dword 	$8ce9e5e2
>ee31	7f 80					.byte 	$7f,$80
>ee33	7e					.byte 	$7e   ; *** Command ~ ***
>ee34	01					.byte 	1     ; *** Load Float 1 ***
>ee35	00 00 00 80				.dword 	$80000000
>ee39	81 00					.byte 	$81,$0
>ee3b	3d					.byte 	$3d   ; *** Command = ***
>ee3c	01					.byte 	1     ; *** Load Float -6.390698254108429e-10 ***
>ee3d	82 8a aa af				.dword 	$afaa8a82
>ee41	62 80					.byte 	$62,$80
>ee43	01					.byte 	1     ; *** Load Float 17.0 ***
>ee44	00 00 00 88				.dword 	$88000000
>ee48	85 00					.byte 	$85,$0
>ee4a	2a					.byte 	$2a   ; *** Command * ***
>ee4b	01					.byte 	1     ; *** Load Float -1.086418703198433e-08 ***
>ee4c	2a 33 a5 ba				.dword 	$baa5332a
>ee50	66 80					.byte 	$66,$80
>ee52	3d					.byte 	$3d   ; *** Command = ***
>ee53	01					.byte 	1     ; *** Load Float -0.7 ***
>ee54	33 33 33 b3				.dword 	$b3333333
>ee58	80 80					.byte 	$80,$80
>ee5a	01					.byte 	1     ; *** Load Float 8.406948 ***
>ee5b	e7 db 82 86				.dword 	$8682dbe7
>ee5f	84 00					.byte 	$84,$0
>ee61	2f					.byte 	$2f   ; *** Command / ***
>ee62	01					.byte 	1     ; *** Load Float -0.08326446172856071 ***
>ee63	e0 8e 86 aa				.dword 	$aa868ee0
>ee67	7d 80					.byte 	$7d,$80
>ee69	3d					.byte 	$3d   ; *** Command = ***
>ee6a	01					.byte 	1     ; *** Load Float 4.0 ***
>ee6b	00 00 00 80				.dword 	$80000000
>ee6f	83 00					.byte 	$83,$0
>ee71	01					.byte 	1     ; *** Load Float -1319345233.854464 ***
>ee72	a3 38 47 9d				.dword 	$9d4738a3
>ee76	9f 80					.byte 	$9f,$80
>ee78	7e					.byte 	$7e   ; *** Command ~ ***
>ee79	01					.byte 	1     ; *** Load Float 1 ***
>ee7a	00 00 00 80				.dword 	$80000000
>ee7e	81 00					.byte 	$81,$0
>ee80	3d					.byte 	$3d   ; *** Command = ***
>ee81	01					.byte 	1     ; *** Load Float 10.0 ***
>ee82	00 00 00 a0				.dword 	$a0000000
>ee86	84 00					.byte 	$84,$0
>ee88	01					.byte 	1     ; *** Load Float 292.51 ***
>ee89	ae 47 41 92				.dword 	$924147ae
>ee8d	89 00					.byte 	$89,$0
>ee8f	2f					.byte 	$2f   ; *** Command / ***
>ee90	01					.byte 	1     ; *** Load Float 0.0341868654063109 ***
>ee91	cd 86 07 8c				.dword 	$8c0786cd
>ee95	7c 00					.byte 	$7c,$0
>ee97	3d					.byte 	$3d   ; *** Command = ***
>ee98	01					.byte 	1     ; *** Load Float -7.104175165295601e-11 ***
>ee99	66 f3 38 9c				.dword 	$9c38f366
>ee9d	5f 80					.byte 	$5f,$80
>ee9f	01					.byte 	1     ; *** Load Float -772.72 ***
>eea0	7a 14 2e c1				.dword 	$c12e147a
>eea4	8a 80					.byte 	$8a,$80
>eea6	2f					.byte 	$2f   ; *** Command / ***
>eea7	01					.byte 	1     ; *** Load Float 9.193724978382339e-14 ***
>eea8	57 37 06 cf				.dword 	$cf063757
>eeac	55 00					.byte 	$55,$0
>eeae	3d					.byte 	$3d   ; *** Command = ***
>eeaf	01					.byte 	1     ; *** Load Float -24989.401088 ***
>eeb0	5b cd 3a c3				.dword 	$c33acd5b
>eeb4	8f 80					.byte 	$8f,$80
>eeb6	01					.byte 	1     ; *** Load Float 1.339027 ***
>eeb7	9a 3c 65 ab				.dword 	$ab653c9a
>eebb	81 00					.byte 	$81,$0
>eebd	2b					.byte 	$2b   ; *** Command + ***
>eebe	01					.byte 	1     ; *** Load Float -24988.062060999997 ***
>eebf	c6 1f 38 c3				.dword 	$c3381fc6
>eec3	8f 80					.byte 	$8f,$80
>eec5	3d					.byte 	$3d   ; *** Command = ***
>eec6	01					.byte 	1     ; *** Load Float 4.0 ***
>eec7	00 00 00 80				.dword 	$80000000
>eecb	83 00					.byte 	$83,$0
>eecd	01					.byte 	1     ; *** Load Float -254.64 ***
>eece	0a d7 a3 fe				.dword 	$fea3d70a
>eed2	88 80					.byte 	$88,$80
>eed4	2d					.byte 	$2d   ; *** Command - ***
>eed5	01					.byte 	1     ; *** Load Float 258.64 ***
>eed6	85 eb 51 81				.dword 	$8151eb85
>eeda	89 00					.byte 	$89,$0
>eedc	3d					.byte 	$3d   ; *** Command = ***
>eedd	01					.byte 	1     ; *** Load Float -168.67 ***
>eede	1e 85 ab a8				.dword 	$a8ab851e
>eee2	88 80					.byte 	$88,$80
>eee4	01					.byte 	1     ; *** Load Float 560.23 ***
>eee5	51 b8 0e 8c				.dword 	$8c0eb851
>eee9	8a 00					.byte 	$8a,$0
>eeeb	7e					.byte 	$7e   ; *** Command ~ ***
>eeec	01					.byte 	1     ; *** Load Float -1 ***
>eeed	00 00 00 80				.dword 	$80000000
>eef1	81 80					.byte 	$81,$80
>eef3	3d					.byte 	$3d   ; *** Command = ***
>eef4	01					.byte 	1     ; *** Load Float -804.37 ***
>eef5	14 ae 17 c9				.dword 	$c917ae14
>eef9	8a 80					.byte 	$8a,$80
>eefb	01					.byte 	1     ; *** Load Float -896.47 ***
>eefc	7a 14 1e e0				.dword 	$e01e147a
>ef00	8a 80					.byte 	$8a,$80
>ef02	2b					.byte 	$2b   ; *** Command + ***
>ef03	01					.byte 	1     ; *** Load Float -1700.8400000000001 ***
>ef04	47 e1 9a d4				.dword 	$d49ae147
>ef08	8b 80					.byte 	$8b,$80
>ef0a	3d					.byte 	$3d   ; *** Command = ***
>ef0b	01					.byte 	1     ; *** Load Float 2.1105804443359375e-06 ***
>ef0c	f5 7e a3 8d				.dword 	$8da37ef5
>ef10	6e 00					.byte 	$6e,$0
>ef12	01					.byte 	1     ; *** Load Float -879.12 ***
>ef13	14 ae c7 db				.dword 	$dbc7ae14
>ef17	8a 80					.byte 	$8a,$80
>ef19	2d					.byte 	$2d   ; *** Command - ***
>ef1a	01					.byte 	1     ; *** Load Float 879.1200021105805 ***
>ef1b	1d ae c7 db				.dword 	$dbc7ae1d
>ef1f	8a 00					.byte 	$8a,$0
>ef21	3d					.byte 	$3d   ; *** Command = ***
>ef22	01					.byte 	1     ; *** Load Float 1.662728 ***
>ef23	67 45 d4 d4				.dword 	$d4d44567
>ef27	81 00					.byte 	$81,$0
>ef29	01					.byte 	1     ; *** Load Float 1.662728 ***
>ef2a	67 45 d4 d4				.dword 	$d4d44567
>ef2e	81 00					.byte 	$81,$0
>ef30	7e					.byte 	$7e   ; *** Command ~ ***
>ef31	01					.byte 	1     ; *** Load Float 0 ***
>ef32	00 00 00 00				.dword 	$0
>ef36	80 40					.byte 	$80,$40
>ef38	3d					.byte 	$3d   ; *** Command = ***
>ef39	01					.byte 	1     ; *** Load Float 971.52 ***
>ef3a	ae 47 e1 f2				.dword 	$f2e147ae
>ef3e	8a 00					.byte 	$8a,$0
>ef40	01					.byte 	1     ; *** Load Float 509.43 ***
>ef41	3d 0a b7 fe				.dword 	$feb70a3d
>ef45	89 00					.byte 	$89,$0
>ef47	2f					.byte 	$2f   ; *** Command / ***
>ef48	01					.byte 	1     ; *** Load Float 1.9070726105647489 ***
>ef49	8e f4 1a f4				.dword 	$f41af48e
>ef4d	81 00					.byte 	$81,$0
>ef4f	3d					.byte 	$3d   ; *** Command = ***
>ef50	01					.byte 	1     ; *** Load Float -9.976190540328388e-14 ***
>ef51	b2 d2 a4 e0				.dword 	$e0a4d2b2
>ef55	55 80					.byte 	$55,$80
>ef57	01					.byte 	1     ; *** Load Float 1.971712 ***
>ef58	0e 0f 61 fc				.dword 	$fc610f0e
>ef5c	81 00					.byte 	$81,$0
>ef5e	7e					.byte 	$7e   ; *** Command ~ ***
>ef5f	01					.byte 	1     ; *** Load Float -1 ***
>ef60	00 00 00 80				.dword 	$80000000
>ef64	81 80					.byte 	$81,$80
>ef66	3d					.byte 	$3d   ; *** Command = ***
>ef67	01					.byte 	1     ; *** Load Float 1.216744 ***
>ef68	73 44 be 9b				.dword 	$9bbe4473
>ef6c	81 00					.byte 	$81,$0
>ef6e	01					.byte 	1     ; *** Load Float 16.0 ***
>ef6f	00 00 00 80				.dword 	$80000000
>ef73	85 00					.byte 	$85,$0
>ef75	2f					.byte 	$2f   ; *** Command / ***
>ef76	01					.byte 	1     ; *** Load Float 0.0760465 ***
>ef77	73 44 be 9b				.dword 	$9bbe4473
>ef7b	7d 00					.byte 	$7d,$0
>ef7d	3d					.byte 	$3d   ; *** Command = ***
>ef7e	01					.byte 	1     ; *** Load Float -574.1 ***
>ef7f	66 66 86 8f				.dword 	$8f866666
>ef83	8a 80					.byte 	$8a,$80
>ef85	01					.byte 	1     ; *** Load Float 19.0 ***
>ef86	00 00 00 98				.dword 	$98000000
>ef8a	85 00					.byte 	$85,$0
>ef8c	7e					.byte 	$7e   ; *** Command ~ ***
>ef8d	01					.byte 	1     ; *** Load Float -1 ***
>ef8e	00 00 00 80				.dword 	$80000000
>ef92	81 80					.byte 	$81,$80
>ef94	3d					.byte 	$3d   ; *** Command = ***
>ef95	01					.byte 	1     ; *** Load Float -8.130259811878204e-10 ***
>ef96	06 9e 7b df				.dword 	$df7b9e06
>ef9a	62 80					.byte 	$62,$80
>ef9c	01					.byte 	1     ; *** Load Float -9.0 ***
>ef9d	00 00 00 90				.dword 	$90000000
>efa1	84 80					.byte 	$84,$80
>efa3	7e					.byte 	$7e   ; *** Command ~ ***
>efa4	01					.byte 	1     ; *** Load Float 1 ***
>efa5	00 00 00 80				.dword 	$80000000
>efa9	81 00					.byte 	$81,$0
>efab	3d					.byte 	$3d   ; *** Command = ***
>efac	01					.byte 	1     ; *** Load Float -308.55 ***
>efad	66 66 46 9a				.dword 	$9a466666
>efb1	89 80					.byte 	$89,$80
>efb3	01					.byte 	1     ; *** Load Float 2.89 ***
>efb4	8f c2 f5 b8				.dword 	$b8f5c28f
>efb8	82 00					.byte 	$82,$0
>efba	2b					.byte 	$2b   ; *** Command + ***
>efbb	01					.byte 	1     ; *** Load Float -305.66 ***
>efbc	e1 7a d4 98				.dword 	$98d47ae1
>efc0	89 80					.byte 	$89,$80
>efc2	3d					.byte 	$3d   ; *** Command = ***
>efc3	01					.byte 	1     ; *** Load Float 363.34 ***
>efc4	1e 85 ab b5				.dword 	$b5ab851e
>efc8	89 00					.byte 	$89,$0
>efca	01					.byte 	1     ; *** Load Float 6.292174 ***
>efcb	49 7d 59 c9				.dword 	$c9597d49
>efcf	83 00					.byte 	$83,$0
>efd1	2d					.byte 	$2d   ; *** Command - ***
>efd2	01					.byte 	1     ; *** Load Float 357.047826 ***
>efd3	29 1f 86 b2				.dword 	$b2861f29
>efd7	89 00					.byte 	$89,$0
>efd9	3d					.byte 	$3d   ; *** Command = ***
>efda	01					.byte 	1     ; *** Load Float 1.3650823384523392e-09 ***
>efdb	9f 90 9d bb				.dword 	$bb9d909f
>efdf	63 00					.byte 	$63,$0
>efe1	01					.byte 	1     ; *** Load Float 1.3650823384523392e-09 ***
>efe2	9f 90 9d bb				.dword 	$bb9d909f
>efe6	63 00					.byte 	$63,$0
>efe8	2d					.byte 	$2d   ; *** Command - ***
>efe9	01					.byte 	1     ; *** Load Float 0.0 ***
>efea	00 00 00 00				.dword 	$0
>efee	80 40					.byte 	$80,$40
>eff0	3d					.byte 	$3d   ; *** Command = ***
>eff1	01					.byte 	1     ; *** Load Float -2.0 ***
>eff2	00 00 00 80				.dword 	$80000000
>eff6	82 80					.byte 	$82,$80
>eff8	01					.byte 	1     ; *** Load Float -10.0 ***
>eff9	00 00 00 a0				.dword 	$a0000000
>effd	84 80					.byte 	$84,$80
>efff	2f					.byte 	$2f   ; *** Command / ***
>f000	01					.byte 	1     ; *** Load Float 0.2 ***
>f001	cc cc cc cc				.dword 	$cccccccc
>f005	7e 00					.byte 	$7e,$0
>f007	3d					.byte 	$3d   ; *** Command = ***
>f008	01					.byte 	1     ; *** Load Float 2.692292 ***
>f009	1a 83 4e ac				.dword 	$ac4e831a
>f00d	82 00					.byte 	$82,$0
>f00f	01					.byte 	1     ; *** Load Float -2.9623291015625e-05 ***
>f010	76 88 7f f8				.dword 	$f87f8876
>f014	71 80					.byte 	$71,$80
>f016	2b					.byte 	$2b   ; *** Command + ***
>f017	01					.byte 	1     ; *** Load Float 2.6922623767089844 ***
>f018	db 06 4e ac				.dword 	$ac4e06db
>f01c	82 00					.byte 	$82,$0
>f01e	3d					.byte 	$3d   ; *** Command = ***
>f01f	01					.byte 	1     ; *** Load Float -4384903911.17824 ***
>f020	73 29 ae 82				.dword 	$82ae2973
>f024	a1 80					.byte 	$a1,$80
>f026	01					.byte 	1     ; *** Load Float 4.0 ***
>f027	00 00 00 80				.dword 	$80000000
>f02b	83 00					.byte 	$83,$0
>f02d	7e					.byte 	$7e   ; *** Command ~ ***
>f02e	01					.byte 	1     ; *** Load Float -1 ***
>f02f	00 00 00 80				.dword 	$80000000
>f033	81 80					.byte 	$81,$80
>f035	3d					.byte 	$3d   ; *** Command = ***
>f036	01					.byte 	1     ; *** Load Float 1.0764095932245254e-09 ***
>f037	af cb f0 93				.dword 	$93f0cbaf
>f03b	63 00					.byte 	$63,$0
>f03d	01					.byte 	1     ; *** Load Float 1.0764095932245254e-09 ***
>f03e	af cb f0 93				.dword 	$93f0cbaf
>f042	63 00					.byte 	$63,$0
>f044	7e					.byte 	$7e   ; *** Command ~ ***
>f045	01					.byte 	1     ; *** Load Float 0 ***
>f046	00 00 00 00				.dword 	$0
>f04a	80 40					.byte 	$80,$40
>f04c	3d					.byte 	$3d   ; *** Command = ***
>f04d	01					.byte 	1     ; *** Load Float 4.95094 ***
>f04e	b9 19 6e 9e				.dword 	$9e6e19b9
>f052	83 00					.byte 	$83,$0
>f054	01					.byte 	1     ; *** Load Float 4.95094 ***
>f055	b9 19 6e 9e				.dword 	$9e6e19b9
>f059	83 00					.byte 	$83,$0
>f05b	7e					.byte 	$7e   ; *** Command ~ ***
>f05c	01					.byte 	1     ; *** Load Float 0 ***
>f05d	00 00 00 00				.dword 	$0
>f061	80 40					.byte 	$80,$40
>f063	3d					.byte 	$3d   ; *** Command = ***
>f064	01					.byte 	1     ; *** Load Float 2.769527 ***
>f065	2c ee 3f b1				.dword 	$b13fee2c
>f069	82 00					.byte 	$82,$0
>f06b	01					.byte 	1     ; *** Load Float -0.27705 ***
>f06c	62 7f d9 8d				.dword 	$8dd97f62
>f070	7f 80					.byte 	$7f,$80
>f072	2f					.byte 	$2f   ; *** Command / ***
>f073	01					.byte 	1     ; *** Load Float -9.996487998556217 ***
>f074	66 9d f1 9f				.dword 	$9ff19d66
>f078	84 80					.byte 	$84,$80
>f07a	3d					.byte 	$3d   ; *** Command = ***
>f07b	01					.byte 	1     ; *** Load Float 0.099943 ***
>f07c	63 ea ae cc				.dword 	$ccaeea63
>f080	7d 00					.byte 	$7d,$0
>f082	01					.byte 	1     ; *** Load Float 1.9278377294540404e-09 ***
>f083	47 e1 7a 84				.dword 	$847ae147
>f087	64 00					.byte 	$64,$0
>f089	2f					.byte 	$2f   ; *** Command / ***
>f08a	01					.byte 	1     ; *** Load Float 51842018.896633826 ***
>f08b	b9 f8 c2 c5				.dword 	$c5c2f8b9
>f08f	9a 00					.byte 	$9a,$0
>f091	3d					.byte 	$3d   ; *** Command = ***
>f092	01					.byte 	1     ; *** Load Float 2.043612 ***
>f093	fc 89 ca 82				.dword 	$82ca89fc
>f097	82 00					.byte 	$82,$0
>f099	01					.byte 	1     ; *** Load Float 8.085538 ***
>f09a	18 5d 5e 81				.dword 	$815e5d18
>f09e	84 00					.byte 	$84,$0
>f0a0	2a					.byte 	$2a   ; *** Command * ***
>f0a1	01					.byte 	1     ; *** Load Float 16.523702483256 ***
>f0a2	ed 8a 30 84				.dword 	$84308aed
>f0a6	85 00					.byte 	$85,$0
>f0a8	3d					.byte 	$3d   ; *** Command = ***
>f0a9	01					.byte 	1     ; *** Load Float 6.0 ***
>f0aa	00 00 00 c0				.dword 	$c0000000
>f0ae	83 00					.byte 	$83,$0
>f0b0	01					.byte 	1     ; *** Load Float 3.273153305053711e-07 ***
>f0b1	60 e0 b9 af				.dword 	$afb9e060
>f0b5	6b 00					.byte 	$6b,$0
>f0b7	2a					.byte 	$2a   ; *** Command * ***
>f0b8	01					.byte 	1     ; *** Load Float 1.9638919830322264e-06 ***
>f0b9	48 68 cb 83				.dword 	$83cb6848
>f0bd	6e 00					.byte 	$6e,$0
>f0bf	3d					.byte 	$3d   ; *** Command = ***
>f0c0	01					.byte 	1     ; *** Load Float 32674.545663999997 ***
>f0c1	61 17 45 ff				.dword 	$ff451761
>f0c5	8f 00					.byte 	$8f,$0
>f0c7	01					.byte 	1     ; *** Load Float -1893053358797.7502 ***
>f0c8	f1 62 61 dc				.dword 	$dc6162f1
>f0cc	a9 80					.byte 	$a9,$80
>f0ce	2a					.byte 	$2a   ; *** Command * ***
>f0cf	01					.byte 	1     ; *** Load Float -6.185465841642566e+16 ***
>f0d0	ee 7b c0 db				.dword 	$dbc07bee
>f0d4	b8 80					.byte 	$b8,$80
>f0d6	3d					.byte 	$3d   ; *** Command = ***
>f0d7	01					.byte 	1     ; *** Load Float -944.79 ***
>f0d8	5c 8f 32 ec				.dword 	$ec328f5c
>f0dc	8a 80					.byte 	$8a,$80
>f0de	01					.byte 	1     ; *** Load Float 13843.562496 ***
>f0df	fe 3f 4e d8				.dword 	$d84e3ffe
>f0e3	8e 00					.byte 	$8e,$0
>f0e5	2a					.byte 	$2a   ; *** Command * ***
>f0e6	01					.byte 	1     ; *** Load Float -13079259.41059584 ***
>f0e7	69 db 92 c7				.dword 	$c792db69
>f0eb	98 80					.byte 	$98,$80
>f0ed	3d					.byte 	$3d   ; *** Command = ***
>f0ee	01					.byte 	1     ; *** Load Float 320.4 ***
>f0ef	33 33 33 a0				.dword 	$a0333333
>f0f3	89 00					.byte 	$89,$0
>f0f5	01					.byte 	1     ; *** Load Float -9.66736024565762e-16 ***
>f0f6	99 43 52 8b				.dword 	$8b524399
>f0fa	4f 80					.byte 	$4f,$80
>f0fc	2a					.byte 	$2a   ; *** Command * ***
>f0fd	01					.byte 	1     ; *** Load Float -3.097422222708701e-13 ***
>f0fe	01 8f 5e ae				.dword 	$ae5e8f01
>f102	57 80					.byte 	$57,$80
>f104	3d					.byte 	$3d   ; *** Command = ***
>f105	01					.byte 	1     ; *** Load Float 3.121901 ***
>f106	da 39 cd c7				.dword 	$c7cd39da
>f10a	82 00					.byte 	$82,$0
>f10c	01					.byte 	1     ; *** Load Float 9.979613 ***
>f10d	ae 7e ac 9f				.dword 	$9fac7eae
>f111	84 00					.byte 	$84,$0
>f113	2d					.byte 	$2d   ; *** Command - ***
>f114	01					.byte 	1     ; *** Load Float -6.857712000000001 ***
>f115	6f 60 72 db				.dword 	$db72606f
>f119	83 80					.byte 	$83,$80
>f11b	3d					.byte 	$3d   ; *** Command = ***
>f11c	01					.byte 	1     ; *** Load Float -13.0 ***
>f11d	00 00 00 d0				.dword 	$d0000000
>f121	84 80					.byte 	$84,$80
>f123	01					.byte 	1     ; *** Load Float -8.598752319812775e-10 ***
>f124	18 57 5c ec				.dword 	$ec5c5718
>f128	62 80					.byte 	$62,$80
>f12a	2d					.byte 	$2d   ; *** Command - ***
>f12b	01					.byte 	1     ; *** Load Float -12.999999999140124 ***
>f12c	ff ff ff cf				.dword 	$cfffffff
>f130	84 80					.byte 	$84,$80
>f132	3d					.byte 	$3d   ; *** Command = ***
>f133	01					.byte 	1     ; *** Load Float -611.39 ***
>f134	c2 f5 d8 98				.dword 	$98d8f5c2
>f138	8a 80					.byte 	$8a,$80
>f13a	01					.byte 	1     ; *** Load Float -21.15 ***
>f13b	33 33 33 a9				.dword 	$a9333333
>f13f	85 80					.byte 	$85,$80
>f141	2f					.byte 	$2f   ; *** Command / ***
>f142	01					.byte 	1     ; *** Load Float 28.90732860520095 ***
>f143	7f 35 42 e7				.dword 	$e742357f
>f147	85 00					.byte 	$85,$0
>f149	3d					.byte 	$3d   ; *** Command = ***
>f14a	01					.byte 	1     ; *** Load Float -141.35 ***
>f14b	99 99 59 8d				.dword 	$8d599999
>f14f	88 80					.byte 	$88,$80
>f151	01					.byte 	1     ; *** Load Float 0.0008858779296875 ***
>f152	f1 42 3a e8				.dword 	$e83a42f1
>f156	76 00					.byte 	$76,$0
>f158	7e					.byte 	$7e   ; *** Command ~ ***
>f159	01					.byte 	1     ; *** Load Float -1 ***
>f15a	00 00 00 80				.dword 	$80000000
>f15e	81 80					.byte 	$81,$80
>f160	3d					.byte 	$3d   ; *** Command = ***
>f161	01					.byte 	1     ; *** Load Float -1641298129.846272 ***
>f162	a3 71 a8 c3				.dword 	$c3a871a3
>f166	9f 80					.byte 	$9f,$80
>f168	01					.byte 	1     ; *** Load Float 12.0 ***
>f169	00 00 00 c0				.dword 	$c0000000
>f16d	84 00					.byte 	$84,$0
>f16f	2b					.byte 	$2b   ; *** Command + ***
>f170	01					.byte 	1     ; *** Load Float -1641298117.846272 ***
>f171	8b 71 a8 c3				.dword 	$c3a8718b
>f175	9f 80					.byte 	$9f,$80
>f177	3d					.byte 	$3d   ; *** Command = ***
>f178	01					.byte 	1     ; *** Load Float -165.86 ***
>f179	f5 28 dc a5				.dword 	$a5dc28f5
>f17d	88 80					.byte 	$88,$80
>f17f	01					.byte 	1     ; *** Load Float 9.0 ***
>f180	00 00 00 90				.dword 	$90000000
>f184	84 00					.byte 	$84,$0
>f186	2a					.byte 	$2a   ; *** Command * ***
>f187	01					.byte 	1     ; *** Load Float -1492.7400000000002 ***
>f188	14 ae 97 ba				.dword 	$ba97ae14
>f18c	8b 80					.byte 	$8b,$80
>f18e	3d					.byte 	$3d   ; *** Command = ***
>f18f	01					.byte 	1     ; *** Load Float -1.6120357031468301e-12 ***
>f190	06 b5 df e2				.dword 	$e2dfb506
>f194	59 80					.byte 	$59,$80
>f196	01					.byte 	1     ; *** Load Float -142039859878.42868 ***
>f197	0a f1 48 84				.dword 	$8448f10a
>f19b	a6 80					.byte 	$a6,$80
>f19d	2d					.byte 	$2d   ; *** Command - ***
>f19e	01					.byte 	1     ; *** Load Float 142039859878.42868 ***
>f19f	0a f1 48 84				.dword 	$8448f10a
>f1a3	a6 00					.byte 	$a6,$0
>f1a5	3d					.byte 	$3d   ; *** Command = ***
>f1a6	01					.byte 	1     ; *** Load Float 809.72 ***
>f1a7	7a 14 6e ca				.dword 	$ca6e147a
>f1ab	8a 00					.byte 	$8a,$0
>f1ad	01					.byte 	1     ; *** Load Float 8.094702934613451e-13 ***
>f1ae	56 7b d8 e3				.dword 	$e3d87b56
>f1b2	58 00					.byte 	$58,$0
>f1b4	7e					.byte 	$7e   ; *** Command ~ ***
>f1b5	01					.byte 	1     ; *** Load Float 1 ***
>f1b6	00 00 00 80				.dword 	$80000000
>f1ba	81 00					.byte 	$81,$0
>f1bc	3d					.byte 	$3d   ; *** Command = ***
>f1bd	01					.byte 	1     ; *** Load Float -4.0 ***
>f1be	00 00 00 80				.dword 	$80000000
>f1c2	83 80					.byte 	$83,$80
>f1c4	01					.byte 	1     ; *** Load Float 7.979307 ***
>f1c5	a2 7b 56 ff				.dword 	$ff567ba2
>f1c9	83 00					.byte 	$83,$0
>f1cb	2d					.byte 	$2d   ; *** Command - ***
>f1cc	01					.byte 	1     ; *** Load Float -11.979307 ***
>f1cd	d1 3d ab bf				.dword 	$bfab3dd1
>f1d1	84 80					.byte 	$84,$80
>f1d3	3d					.byte 	$3d   ; *** Command = ***
>f1d4	01					.byte 	1     ; *** Load Float 10.0 ***
>f1d5	00 00 00 a0				.dword 	$a0000000
>f1d9	84 00					.byte 	$84,$0
>f1db	01					.byte 	1     ; *** Load Float 373.6 ***
>f1dc	cc cc cc ba				.dword 	$bacccccc
>f1e0	89 00					.byte 	$89,$0
>f1e2	2a					.byte 	$2a   ; *** Command * ***
>f1e3	01					.byte 	1     ; *** Load Float 3736.0 ***
>f1e4	00 00 80 e9				.dword 	$e9800000
>f1e8	8c 00					.byte 	$8c,$0
>f1ea	3d					.byte 	$3d   ; *** Command = ***
>f1eb	01					.byte 	1     ; *** Load Float -7.0 ***
>f1ec	00 00 00 e0				.dword 	$e0000000
>f1f0	83 80					.byte 	$83,$80
>f1f2	01					.byte 	1     ; *** Load Float 4.632250139025018e-16 ***
>f1f3	1e f9 83 85				.dword 	$8583f91e
>f1f7	4e 00					.byte 	$4e,$0
>f1f9	2a					.byte 	$2a   ; *** Command * ***
>f1fa	01					.byte 	1     ; *** Load Float -3.242575097317513e-15 ***
>f1fb	f5 f3 a6 e9				.dword 	$e9a6f3f5
>f1ff	50 80					.byte 	$50,$80
>f201	3d					.byte 	$3d   ; *** Command = ***
>f202	01					.byte 	1     ; *** Load Float -3.0 ***
>f203	00 00 00 c0				.dword 	$c0000000
>f207	82 80					.byte 	$82,$80
>f209	01					.byte 	1     ; *** Load Float -631.48 ***
>f20a	51 b8 de 9d				.dword 	$9ddeb851
>f20e	8a 80					.byte 	$8a,$80
>f210	2a					.byte 	$2a   ; *** Command * ***
>f211	01					.byte 	1     ; *** Load Float 1894.44 ***
>f212	7a 14 ce ec				.dword 	$ecce147a
>f216	8b 00					.byte 	$8b,$0
>f218	3d					.byte 	$3d   ; *** Command = ***
>f219	01					.byte 	1     ; *** Load Float -7.0 ***
>f21a	00 00 00 e0				.dword 	$e0000000
>f21e	83 80					.byte 	$83,$80
>f220	01					.byte 	1     ; *** Load Float -11.0 ***
>f221	00 00 00 b0				.dword 	$b0000000
>f225	84 80					.byte 	$84,$80
>f227	2a					.byte 	$2a   ; *** Command * ***
>f228	01					.byte 	1     ; *** Load Float 77.0 ***
>f229	00 00 00 9a				.dword 	$9a000000
>f22d	87 00					.byte 	$87,$0
>f22f	3d					.byte 	$3d   ; *** Command = ***
>f230	01					.byte 	1     ; *** Load Float -4.0 ***
>f231	00 00 00 80				.dword 	$80000000
>f235	83 80					.byte 	$83,$80
>f237	01					.byte 	1     ; *** Load Float -0.734789 ***
>f238	c4 21 1b bc				.dword 	$bc1b21c4
>f23c	80 80					.byte 	$80,$80
>f23e	2f					.byte 	$2f   ; *** Command / ***
>f23f	01					.byte 	1     ; *** Load Float 5.443739631377171 ***
>f240	74 1d 33 ae				.dword 	$ae331d74
>f244	83 00					.byte 	$83,$0
>f246	3d					.byte 	$3d   ; *** Command = ***
>f247	01					.byte 	1     ; *** Load Float -97730907.078656 ***
>f248	62 2b 68 ba				.dword 	$ba682b62
>f24c	9b 80					.byte 	$9b,$80
>f24e	01					.byte 	1     ; *** Load Float -43019.993087999996 ***
>f24f	3b fe 0b a8				.dword 	$a80bfe3b
>f253	90 80					.byte 	$90,$80
>f255	2d					.byte 	$2d   ; *** Command - ***
>f256	01					.byte 	1     ; *** Load Float -97687887.085568 ***
>f257	e2 29 53 ba				.dword 	$ba5329e2
>f25b	9b 80					.byte 	$9b,$80
>f25d	3d					.byte 	$3d   ; *** Command = ***
>f25e	01					.byte 	1     ; *** Load Float -0.0002339794921875 ***
>f25f	45 64 58 f5				.dword 	$f5586445
>f263	74 80					.byte 	$74,$80
>f265	01					.byte 	1     ; *** Load Float 399.23 ***
>f266	a3 70 9d c7				.dword 	$c79d70a3
>f26a	89 00					.byte 	$89,$0
>f26c	2a					.byte 	$2a   ; *** Command * ***
>f26d	01					.byte 	1     ; *** Load Float -0.09341163266601563 ***
>f26e	1a 99 4e bf				.dword 	$bf4e991a
>f272	7d 80					.byte 	$7d,$80
>f274	3d					.byte 	$3d   ; *** Command = ***
>f275	01					.byte 	1     ; *** Load Float 6.0 ***
>f276	00 00 00 c0				.dword 	$c0000000
>f27a	83 00					.byte 	$83,$0
>f27c	01					.byte 	1     ; *** Load Float 1.0 ***
>f27d	00 00 00 80				.dword 	$80000000
>f281	81 00					.byte 	$81,$0
>f283	2a					.byte 	$2a   ; *** Command * ***
>f284	01					.byte 	1     ; *** Load Float 6.0 ***
>f285	00 00 00 c0				.dword 	$c0000000
>f289	83 00					.byte 	$83,$0
>f28b	3d					.byte 	$3d   ; *** Command = ***
>f28c	01					.byte 	1     ; *** Load Float -8.280274244043539e-16 ***
>f28d	d2 a3 a9 ee				.dword 	$eea9a3d2
>f291	4e 80					.byte 	$4e,$80
>f293	01					.byte 	1     ; *** Load Float 0.569435 ***
>f294	fe 7d c6 91				.dword 	$91c67dfe
>f298	80 00					.byte 	$80,$0
>f29a	7e					.byte 	$7e   ; *** Command ~ ***
>f29b	01					.byte 	1     ; *** Load Float -1 ***
>f29c	00 00 00 80				.dword 	$80000000
>f2a0	81 80					.byte 	$81,$80
>f2a2	3d					.byte 	$3d   ; *** Command = ***
>f2a3	01					.byte 	1     ; *** Load Float -925.06 ***
>f2a4	0a d7 43 e7				.dword 	$e743d70a
>f2a8	8a 80					.byte 	$8a,$80
>f2aa	01					.byte 	1     ; *** Load Float -11.0 ***
>f2ab	00 00 00 b0				.dword 	$b0000000
>f2af	84 80					.byte 	$84,$80
>f2b1	2d					.byte 	$2d   ; *** Command - ***
>f2b2	01					.byte 	1     ; *** Load Float -914.06 ***
>f2b3	0a d7 83 e4				.dword 	$e483d70a
>f2b7	8a 80					.byte 	$8a,$80
>f2b9	3d					.byte 	$3d   ; *** Command = ***
>f2ba	01					.byte 	1     ; *** Load Float -2.0 ***
>f2bb	00 00 00 80				.dword 	$80000000
>f2bf	82 80					.byte 	$82,$80
>f2c1	01					.byte 	1     ; *** Load Float -7170.686976 ***
>f2c2	ed 7e 15 e0				.dword 	$e0157eed
>f2c6	8d 80					.byte 	$8d,$80
>f2c8	2b					.byte 	$2b   ; *** Command + ***
>f2c9	01					.byte 	1     ; *** Load Float -7172.686976 ***
>f2ca	ed 7e 25 e0				.dword 	$e0257eed
>f2ce	8d 80					.byte 	$8d,$80
>f2d0	3d					.byte 	$3d   ; *** Command = ***
>f2d1	01					.byte 	1     ; *** Load Float -1.7193078994750978e-07 ***
>f2d2	c6 f9 9b b8				.dword 	$b89bf9c6
>f2d6	6a 80					.byte 	$6a,$80
>f2d8	01					.byte 	1     ; *** Load Float 6.527386 ***
>f2d9	9a 58 e0 d0				.dword 	$d0e0589a
>f2dd	83 00					.byte 	$83,$0
>f2df	2d					.byte 	$2d   ; *** Command - ***
>f2e0	01					.byte 	1     ; *** Load Float -6.5273861719307895 ***
>f2e1	f7 58 e0 d0				.dword 	$d0e058f7
>f2e5	83 80					.byte 	$83,$80
>f2e7	3d					.byte 	$3d   ; *** Command = ***
>f2e8	01					.byte 	1     ; *** Load Float -19114150655.42656 ***
>f2e9	5f 59 69 8e				.dword 	$8e69595f
>f2ed	a3 80					.byte 	$a3,$80
>f2ef	01					.byte 	1     ; *** Load Float -1.5039518075354862e-14 ***
>f2f0	82 c4 76 87				.dword 	$8776c482
>f2f4	53 80					.byte 	$53,$80
>f2f6	2a					.byte 	$2a   ; *** Command * ***
>f2f7	01					.byte 	1     ; *** Load Float 0.00028746761427734374 ***
>f2f8	04 40 b7 96				.dword 	$96b74004
>f2fc	75 00					.byte 	$75,$0
>f2fe	3d					.byte 	$3d   ; *** Command = ***
>f2ff	01					.byte 	1     ; *** Load Float 523.66 ***
>f300	70 3d ea 82				.dword 	$82ea3d70
>f304	8a 00					.byte 	$8a,$0
>f306	01					.byte 	1     ; *** Load Float -11646.5664 ***
>f307	fe 43 fa b5				.dword 	$b5fa43fe
>f30b	8e 80					.byte 	$8e,$80
>f30d	2b					.byte 	$2b   ; *** Command + ***
>f30e	01					.byte 	1     ; *** Load Float -11122.9064 ***
>f30f	27 a0 cb ad				.dword 	$adcba027
>f313	8e 80					.byte 	$8e,$80
>f315	3d					.byte 	$3d   ; *** Command = ***
>f316	01					.byte 	1     ; *** Load Float 18396687.106048003 ***
>f317	8d 07 5b 8c				.dword 	$8c5b078d
>f31b	99 00					.byte 	$99,$0
>f31d	01					.byte 	1     ; *** Load Float 4.073557 ***
>f31e	35 94 5a 82				.dword 	$825a9435
>f322	83 00					.byte 	$83,$0
>f324	2b					.byte 	$2b   ; *** Command + ***
>f325	01					.byte 	1     ; *** Load Float 18396691.179605003 ***
>f326	96 09 5b 8c				.dword 	$8c5b0996
>f32a	99 00					.byte 	$99,$0
>f32c	3d					.byte 	$3d   ; *** Command = ***
>f32d	01					.byte 	1     ; *** Load Float -16.0 ***
>f32e	00 00 00 80				.dword 	$80000000
>f332	85 80					.byte 	$85,$80
>f334	01					.byte 	1     ; *** Load Float -7.216405868530273e-07 ***
>f335	76 c3 b6 c1				.dword 	$c1b6c376
>f339	6c 80					.byte 	$6c,$80
>f33b	2a					.byte 	$2a   ; *** Command * ***
>f33c	01					.byte 	1     ; *** Load Float 1.1546249389648438e-05 ***
>f33d	76 c3 b6 c1				.dword 	$c1b6c376
>f341	70 00					.byte 	$70,$0
>f343	3d					.byte 	$3d   ; *** Command = ***
>f344	01					.byte 	1     ; *** Load Float -2.1004979498684406e-10 ***
>f345	da c2 f3 e6				.dword 	$e6f3c2da
>f349	60 80					.byte 	$60,$80
>f34b	01					.byte 	1     ; *** Load Float 952.22 ***
>f34c	7a 14 0e ee				.dword 	$ee0e147a
>f350	8a 00					.byte 	$8a,$0
>f352	2d					.byte 	$2d   ; *** Command - ***
>f353	01					.byte 	1     ; *** Load Float -952.2200000002101 ***
>f354	7a 14 0e ee				.dword 	$ee0e147a
>f358	8a 80					.byte 	$8a,$80
>f35a	3d					.byte 	$3d   ; *** Command = ***
>f35b	01					.byte 	1     ; *** Load Float 2.042451 ***
>f35c	66 84 b7 82				.dword 	$82b78466
>f360	82 00					.byte 	$82,$0
>f362	01					.byte 	1     ; *** Load Float -1.2942164175910875e-12 ***
>f363	84 0f 25 b6				.dword 	$b6250f84
>f367	59 80					.byte 	$59,$80
>f369	7e					.byte 	$7e   ; *** Command ~ ***
>f36a	01					.byte 	1     ; *** Load Float 1 ***
>f36b	00 00 00 80				.dword 	$80000000
>f36f	81 00					.byte 	$81,$0
>f371	3d					.byte 	$3d   ; *** Command = ***
>f372	01					.byte 	1     ; *** Load Float -479.307776 ***
>f373	34 65 a7 ef				.dword 	$efa76534
>f377	89 80					.byte 	$89,$80
>f379	01					.byte 	1     ; *** Load Float 54.24 ***
>f37a	8f c2 f5 d8				.dword 	$d8f5c28f
>f37e	86 00					.byte 	$86,$0
>f380	7e					.byte 	$7e   ; *** Command ~ ***
>f381	01					.byte 	1     ; *** Load Float -1 ***
>f382	00 00 00 80				.dword 	$80000000
>f386	81 80					.byte 	$81,$80
>f388	3d					.byte 	$3d   ; *** Command = ***
>f389	01					.byte 	1     ; *** Load Float 10.0 ***
>f38a	00 00 00 a0				.dword 	$a0000000
>f38e	84 00					.byte 	$84,$0
>f390	01					.byte 	1     ; *** Load Float 8.228719234466553e-09 ***
>f391	38 4a 5e 8d				.dword 	$8d5e4a38
>f395	66 00					.byte 	$66,$0
>f397	2d					.byte 	$2d   ; *** Command - ***
>f398	01					.byte 	1     ; *** Load Float 9.999999991771281 ***
>f399	fd ff ff 9f				.dword 	$9ffffffd
>f39d	84 00					.byte 	$84,$0
>f39f	3d					.byte 	$3d   ; *** Command = ***
>f3a0	01					.byte 	1     ; *** Load Float 118035968533660.17 ***
>f3a1	f3 c7 b4 d6				.dword 	$d6b4c7f3
>f3a5	af 00					.byte 	$af,$0
>f3a7	01					.byte 	1     ; *** Load Float 460.46 ***
>f3a8	47 e1 3a e6				.dword 	$e63ae147
>f3ac	89 00					.byte 	$89,$0
>f3ae	2b					.byte 	$2b   ; *** Command + ***
>f3af	01					.byte 	1     ; *** Load Float 118035968534120.62 ***
>f3b0	f3 c7 b4 d6				.dword 	$d6b4c7f3
>f3b4	af 00					.byte 	$af,$0
>f3b6	3d					.byte 	$3d   ; *** Command = ***
>f3b7	01					.byte 	1     ; *** Load Float 5.687792 ***
>f3b8	5e 64 02 b6				.dword 	$b602645e
>f3bc	83 00					.byte 	$83,$0
>f3be	01					.byte 	1     ; *** Load Float -728.49 ***
>f3bf	28 5c 1f b6				.dword 	$b61f5c28
>f3c3	8a 80					.byte 	$8a,$80
>f3c5	2d					.byte 	$2d   ; *** Command - ***
>f3c6	01					.byte 	1     ; *** Load Float 734.177792 ***
>f3c7	f1 60 8b b7				.dword 	$b78b60f1
>f3cb	8a 00					.byte 	$8a,$0
>f3cd	3d					.byte 	$3d   ; *** Command = ***
>f3ce	01					.byte 	1     ; *** Load Float -11.0 ***
>f3cf	00 00 00 b0				.dword 	$b0000000
>f3d3	84 80					.byte 	$84,$80
>f3d5	01					.byte 	1     ; *** Load Float -912.65 ***
>f3d6	99 99 29 e4				.dword 	$e4299999
>f3da	8a 80					.byte 	$8a,$80
>f3dc	2f					.byte 	$2f   ; *** Command / ***
>f3dd	01					.byte 	1     ; *** Load Float 0.012052813236180354 ***
>f3de	ab 29 79 c5				.dword 	$c57929ab
>f3e2	7a 00					.byte 	$7a,$0
>f3e4	3d					.byte 	$3d   ; *** Command = ***
>f3e5	01					.byte 	1     ; *** Load Float 154822777664905.94 ***
>f3e6	aa 7c cf 8c				.dword 	$8ccf7caa
>f3ea	b0 00					.byte 	$b0,$0
>f3ec	01					.byte 	1     ; *** Load Float 1.0121657396666704e-11 ***
>f3ed	79 e4 0f b2				.dword 	$b20fe479
>f3f1	5c 00					.byte 	$5c,$0
>f3f3	2d					.byte 	$2d   ; *** Command - ***
>f3f4	01					.byte 	1     ; *** Load Float 154822777664905.94 ***
>f3f5	aa 7c cf 8c				.dword 	$8ccf7caa
>f3f9	b0 00					.byte 	$b0,$0
>f3fb	3d					.byte 	$3d   ; *** Command = ***
>f3fc	01					.byte 	1     ; *** Load Float -1918317936980.787 ***
>f3fd	60 54 52 df				.dword 	$df525460
>f401	a9 80					.byte 	$a9,$80
>f403	01					.byte 	1     ; *** Load Float -903.85 ***
>f404	66 66 f6 e1				.dword 	$e1f66666
>f408	8a 80					.byte 	$8a,$80
>f40a	2d					.byte 	$2d   ; *** Command - ***
>f40b	01					.byte 	1     ; *** Load Float -1918317936076.937 ***
>f40c	5e 54 52 df				.dword 	$df52545e
>f410	a9 80					.byte 	$a9,$80
>f412	3d					.byte 	$3d   ; *** Command = ***
>f413	01					.byte 	1     ; *** Load Float -1.1513520803418942e-14 ***
>f414	2f be 68 cf				.dword 	$cf68be2f
>f418	52 80					.byte 	$52,$80
>f41a	01					.byte 	1     ; *** Load Float -5.766227841377258e-09 ***
>f41b	c7 46 20 c6				.dword 	$c62046c7
>f41f	65 80					.byte 	$65,$80
>f421	2b					.byte 	$2b   ; *** Command + ***
>f422	01					.byte 	1     ; *** Load Float -5.766239354898062e-09 ***
>f423	b4 60 20 c6				.dword 	$c62060b4
>f427	65 80					.byte 	$65,$80
>f429	3d					.byte 	$3d   ; *** Command = ***
>f42a	01					.byte 	1     ; *** Load Float -257.17 ***
>f42b	8f c2 95 80				.dword 	$8095c28f
>f42f	89 80					.byte 	$89,$80
>f431	01					.byte 	1     ; *** Load Float 16.0 ***
>f432	00 00 00 80				.dword 	$80000000
>f436	85 00					.byte 	$85,$0
>f438	2a					.byte 	$2a   ; *** Command * ***
>f439	01					.byte 	1     ; *** Load Float -4114.72 ***
>f43a	8f c2 95 80				.dword 	$8095c28f
>f43e	8d 80					.byte 	$8d,$80
>f440	3d					.byte 	$3d   ; *** Command = ***
>f441	01					.byte 	1     ; *** Load Float 6.0 ***
>f442	00 00 00 c0				.dword 	$c0000000
>f446	83 00					.byte 	$83,$0
>f448	01					.byte 	1     ; *** Load Float 1.0444564395584167e-12 ***
>f449	51 82 fe 92				.dword 	$92fe8251
>f44d	59 00					.byte 	$59,$0
>f44f	2f					.byte 	$2f   ; *** Command / ***
>f450	01					.byte 	1     ; *** Load Float 5744614875979.63 ***
>f451	54 b7 30 a7				.dword 	$a730b754
>f455	ab 00					.byte 	$ab,$0
>f457	3d					.byte 	$3d   ; *** Command = ***
>f458	01					.byte 	1     ; *** Load Float 16.0 ***
>f459	00 00 00 80				.dword 	$80000000
>f45d	85 00					.byte 	$85,$0
>f45f	01					.byte 	1     ; *** Load Float -9.013433555082883e-15 ***
>f460	21 20 5f a2				.dword 	$a25f2021
>f464	52 80					.byte 	$52,$80
>f466	2b					.byte 	$2b   ; *** Command + ***
>f467	01					.byte 	1     ; *** Load Float 15.999999999999991 ***
>f468	ff ff ff ff				.dword 	$ffffffff
>f46c	84 00					.byte 	$84,$0
>f46e	3d					.byte 	$3d   ; *** Command = ***
>f46f	01					.byte 	1     ; *** Load Float 6.0 ***
>f470	00 00 00 c0				.dword 	$c0000000
>f474	83 00					.byte 	$83,$0
>f476	01					.byte 	1     ; *** Load Float 222650554868.8261 ***
>f477	67 07 5c cf				.dword 	$cf5c0767
>f47b	a6 00					.byte 	$a6,$0
>f47d	7e					.byte 	$7e   ; *** Command ~ ***
>f47e	01					.byte 	1     ; *** Load Float -1 ***
>f47f	00 00 00 80				.dword 	$80000000
>f483	81 80					.byte 	$81,$80
>f485	3d					.byte 	$3d   ; *** Command = ***
>f486	01					.byte 	1     ; *** Load Float 0.0 ***
>f487	00 00 00 00				.dword 	$0
>f48b	80 40					.byte 	$80,$40
>f48d	01					.byte 	1     ; *** Load Float -6.335158104775474e-13 ***
>f48e	05 a0 51 b2				.dword 	$b251a005
>f492	58 80					.byte 	$58,$80
>f494	2b					.byte 	$2b   ; *** Command + ***
>f495	01					.byte 	1     ; *** Load Float -6.335158104775474e-13 ***
>f496	05 a0 51 b2				.dword 	$b251a005
>f49a	58 80					.byte 	$58,$80
>f49c	3d					.byte 	$3d   ; *** Command = ***
>f49d	01					.byte 	1     ; *** Load Float 405.47 ***
>f49e	f5 28 bc ca				.dword 	$cabc28f5
>f4a2	89 00					.byte 	$89,$0
>f4a4	01					.byte 	1     ; *** Load Float 32239088301275.87 ***
>f4a5	3f fb 91 ea				.dword 	$ea91fb3f
>f4a9	ad 00					.byte 	$ad,$0
>f4ab	7e					.byte 	$7e   ; *** Command ~ ***
>f4ac	01					.byte 	1     ; *** Load Float -1 ***
>f4ad	00 00 00 80				.dword 	$80000000
>f4b1	81 80					.byte 	$81,$80
>f4b3	3d					.byte 	$3d   ; *** Command = ***
>f4b4	01					.byte 	1     ; *** Load Float 179.33 ***
>f4b5	e1 7a 54 b3				.dword 	$b3547ae1
>f4b9	88 00					.byte 	$88,$0
>f4bb	01					.byte 	1     ; *** Load Float 8.063902 ***
>f4bc	1a be 05 81				.dword 	$8105be1a
>f4c0	84 00					.byte 	$84,$0
>f4c2	2f					.byte 	$2f   ; *** Command / ***
>f4c3	01					.byte 	1     ; *** Load Float 22.238613514896386 ***
>f4c4	33 ae e8 b1				.dword 	$b1e8ae33
>f4c8	85 00					.byte 	$85,$0
>f4ca	3d					.byte 	$3d   ; *** Command = ***
>f4cb	01					.byte 	1     ; *** Load Float -634.09 ***
>f4cc	8f c2 85 9e				.dword 	$9e85c28f
>f4d0	8a 80					.byte 	$8a,$80
>f4d2	01					.byte 	1     ; *** Load Float -867.95 ***
>f4d3	cc cc fc d8				.dword 	$d8fccccc
>f4d7	8a 80					.byte 	$8a,$80
>f4d9	2a					.byte 	$2a   ; *** Command * ***
>f4da	01					.byte 	1     ; *** Load Float 550358.4155 ***
>f4db	a5 66 5d 86				.dword 	$865d66a5
>f4df	94 00					.byte 	$94,$0
>f4e1	3d					.byte 	$3d   ; *** Command = ***
>f4e2	01					.byte 	1     ; *** Load Float 2.2640940733253955e-10 ***
>f4e3	28 95 f0 f8				.dword 	$f8f09528
>f4e7	60 00					.byte 	$60,$0
>f4e9	01					.byte 	1     ; *** Load Float -6.34128600358963e-09 ***
>f4ea	a4 8a e2 d9				.dword 	$d9e28aa4
>f4ee	65 80					.byte 	$65,$80
>f4f0	2b					.byte 	$2b   ; *** Command + ***
>f4f1	01					.byte 	1     ; *** Load Float -6.1148765962570905e-09 ***
>f4f2	fa 05 1b d2				.dword 	$d21b05fa
>f4f6	65 80					.byte 	$65,$80
>f4f8	3d					.byte 	$3d   ; *** Command = ***
>f4f9	01					.byte 	1     ; *** Load Float 11.0 ***
>f4fa	00 00 00 b0				.dword 	$b0000000
>f4fe	84 00					.byte 	$84,$0
>f500	01					.byte 	1     ; *** Load Float 11.0 ***
>f501	00 00 00 b0				.dword 	$b0000000
>f505	84 00					.byte 	$84,$0
>f507	7e					.byte 	$7e   ; *** Command ~ ***
>f508	01					.byte 	1     ; *** Load Float 0 ***
>f509	00 00 00 00				.dword 	$0
>f50d	80 40					.byte 	$80,$40
>f50f	3d					.byte 	$3d   ; *** Command = ***
>f510	01					.byte 	1     ; *** Load Float -823.78 ***
>f511	85 eb f1 cd				.dword 	$cdf1eb85
>f515	8a 80					.byte 	$8a,$80
>f517	01					.byte 	1     ; *** Load Float -13.0 ***
>f518	00 00 00 d0				.dword 	$d0000000
>f51c	84 80					.byte 	$84,$80
>f51e	2a					.byte 	$2a   ; *** Command * ***
>f51f	01					.byte 	1     ; *** Load Float 10709.14 ***
>f520	5c 8f 54 a7				.dword 	$a7548f5c
>f524	8e 00					.byte 	$8e,$0
>f526	3d					.byte 	$3d   ; *** Command = ***
>f527	01					.byte 	1     ; *** Load Float -899.77 ***
>f528	ae 47 f1 e0				.dword 	$e0f147ae
>f52c	8a 80					.byte 	$8a,$80
>f52e	01					.byte 	1     ; *** Load Float -46911578.963968 ***
>f52f	bd 16 f4 b2				.dword 	$b2f416bd
>f533	9a 80					.byte 	$9a,$80
>f535	7e					.byte 	$7e   ; *** Command ~ ***
>f536	01					.byte 	1     ; *** Load Float 1 ***
>f537	00 00 00 80				.dword 	$80000000
>f53b	81 00					.byte 	$81,$0
>f53d	3d					.byte 	$3d   ; *** Command = ***
>f53e	01					.byte 	1     ; *** Load Float 18.0 ***
>f53f	00 00 00 90				.dword 	$90000000
>f543	85 00					.byte 	$85,$0
>f545	01					.byte 	1     ; *** Load Float 123041578781994.12 ***
>f546	31 b3 cf df				.dword 	$dfcfb331
>f54a	af 00					.byte 	$af,$0
>f54c	2b					.byte 	$2b   ; *** Command + ***
>f54d	01					.byte 	1     ; *** Load Float 123041578782012.12 ***
>f54e	31 b3 cf df				.dword 	$dfcfb331
>f552	af 00					.byte 	$af,$0
>f554	3d					.byte 	$3d   ; *** Command = ***
>f555	01					.byte 	1     ; *** Load Float 0.519662 ***
>f556	9e 91 08 85				.dword 	$8508919e
>f55a	80 00					.byte 	$80,$0
>f55c	01					.byte 	1     ; *** Load Float 0.043923 ***
>f55d	88 9a e8 b3				.dword 	$b3e89a88
>f561	7c 00					.byte 	$7c,$0
>f563	2f					.byte 	$2f   ; *** Command / ***
>f564	01					.byte 	1     ; *** Load Float 11.831204608064112 ***
>f565	33 9d 4c bd				.dword 	$bd4c9d33
>f569	84 00					.byte 	$84,$0
>f56b	3d					.byte 	$3d   ; *** Command = ***
>f56c	01					.byte 	1     ; *** Load Float 0.0 ***
>f56d	00 00 00 00				.dword 	$0
>f571	80 40					.byte 	$80,$40
>f573	01					.byte 	1     ; *** Load Float 18.0 ***
>f574	00 00 00 90				.dword 	$90000000
>f578	85 00					.byte 	$85,$0
>f57a	2b					.byte 	$2b   ; *** Command + ***
>f57b	01					.byte 	1     ; *** Load Float 18.0 ***
>f57c	00 00 00 90				.dword 	$90000000
>f580	85 00					.byte 	$85,$0
>f582	3d					.byte 	$3d   ; *** Command = ***
>f583	01					.byte 	1     ; *** Load Float 17.0 ***
>f584	00 00 00 88				.dword 	$88000000
>f588	85 00					.byte 	$85,$0
>f58a	01					.byte 	1     ; *** Load Float 799.98 ***
>f58b	51 b8 fe c7				.dword 	$c7feb851
>f58f	8a 00					.byte 	$8a,$0
>f591	2d					.byte 	$2d   ; *** Command - ***
>f592	01					.byte 	1     ; *** Load Float -782.98 ***
>f593	51 b8 be c3				.dword 	$c3beb851
>f597	8a 80					.byte 	$8a,$80
>f599	3d					.byte 	$3d   ; *** Command = ***
>f59a	01					.byte 	1     ; *** Load Float 4.910395 ***
>f59b	b1 f4 21 9d				.dword 	$9d21f4b1
>f59f	83 00					.byte 	$83,$0
>f5a1	01					.byte 	1     ; *** Load Float 20790390491.709442 ***
>f5a2	db 85 e6 9a				.dword 	$9ae685db
>f5a6	a3 00					.byte 	$a3,$0
>f5a8	2d					.byte 	$2d   ; *** Command - ***
>f5a9	01					.byte 	1     ; *** Load Float -20790390486.799046 ***
>f5aa	da 85 e6 9a				.dword 	$9ae685da
>f5ae	a3 80					.byte 	$a3,$80
>f5b0	3d					.byte 	$3d   ; *** Command = ***
>f5b1	01					.byte 	1     ; *** Load Float -2.175477220589528e-14 ***
>f5b2	e3 16 f3 c3				.dword 	$c3f316e3
>f5b6	53 80					.byte 	$53,$80
>f5b8	01					.byte 	1     ; *** Load Float 0.0 ***
>f5b9	00 00 00 00				.dword 	$0
>f5bd	80 40					.byte 	$80,$40
>f5bf	2a					.byte 	$2a   ; *** Command * ***
>f5c0	01					.byte 	1     ; *** Load Float -0.0 ***
>f5c1	00 00 00 00				.dword 	$0
>f5c5	80 40					.byte 	$80,$40
>f5c7	3d					.byte 	$3d   ; *** Command = ***
>f5c8	01					.byte 	1     ; *** Load Float -2.9114471435546874e-05 ***
>f5c9	f0 d9 3a f4				.dword 	$f43ad9f0
>f5cd	71 80					.byte 	$71,$80
>f5cf	01					.byte 	1     ; *** Load Float -16.0 ***
>f5d0	00 00 00 80				.dword 	$80000000
>f5d4	85 80					.byte 	$85,$80
>f5d6	2a					.byte 	$2a   ; *** Command * ***
>f5d7	01					.byte 	1     ; *** Load Float 0.00046583154296875 ***
>f5d8	f0 d9 3a f4				.dword 	$f43ad9f0
>f5dc	75 00					.byte 	$75,$0
>f5de	3d					.byte 	$3d   ; *** Command = ***
>f5df	01					.byte 	1     ; *** Load Float -12.0 ***
>f5e0	00 00 00 c0				.dword 	$c0000000
>f5e4	84 80					.byte 	$84,$80
>f5e6	01					.byte 	1     ; *** Load Float -1.1514052748680115e-08 ***
>f5e7	ea 56 cf c5				.dword 	$c5cf56ea
>f5eb	66 80					.byte 	$66,$80
>f5ed	2f					.byte 	$2f   ; *** Command / ***
>f5ee	01					.byte 	1     ; *** Load Float 1042204709.4908081 ***
>f5ef	95 20 7b f8				.dword 	$f87b2095
>f5f3	9e 00					.byte 	$9e,$0
>f5f5	3d					.byte 	$3d   ; *** Command = ***
>f5f6	01					.byte 	1     ; *** Load Float 0.38322 ***
>f5f7	6e 69 35 c4				.dword 	$c435696e
>f5fb	7f 00					.byte 	$7f,$0
>f5fd	01					.byte 	1     ; *** Load Float -16.83 ***
>f5fe	0a d7 a3 86				.dword 	$86a3d70a
>f602	85 80					.byte 	$85,$80
>f604	2f					.byte 	$2f   ; *** Command / ***
>f605	01					.byte 	1     ; *** Load Float -0.02277005347593583 ***
>f606	60 43 88 ba				.dword 	$ba884360
>f60a	7b 80					.byte 	$7b,$80
>f60c	3d					.byte 	$3d   ; *** Command = ***
>f60d	01					.byte 	1     ; *** Load Float 445.52 ***
>f60e	5c 8f c2 de				.dword 	$dec28f5c
>f612	89 00					.byte 	$89,$0
>f614	01					.byte 	1     ; *** Load Float 826.97 ***
>f615	7a 14 be ce				.dword 	$cebe147a
>f619	8a 00					.byte 	$8a,$0
>f61b	2a					.byte 	$2a   ; *** Command * ***
>f61c	01					.byte 	1     ; *** Load Float 368431.6744 ***
>f61d	94 f5 e5 b3				.dword 	$b3e5f594
>f621	93 00					.byte 	$93,$0
>f623	3d					.byte 	$3d   ; *** Command = ***
>f624	01					.byte 	1     ; *** Load Float 16.0 ***
>f625	00 00 00 80				.dword 	$80000000
>f629	85 00					.byte 	$85,$0
>f62b	01					.byte 	1     ; *** Load Float 6.4467010498046884e-06 ***
>f62c	87 bd 50 d8				.dword 	$d850bd87
>f630	6f 00					.byte 	$6f,$0
>f632	7e					.byte 	$7e   ; *** Command ~ ***
>f633	01					.byte 	1     ; *** Load Float 1 ***
>f634	00 00 00 80				.dword 	$80000000
>f638	81 00					.byte 	$81,$0
>f63a	3d					.byte 	$3d   ; *** Command = ***
>f63b	01					.byte 	1     ; *** Load Float -50.57 ***
>f63c	14 ae 47 ca				.dword 	$ca47ae14
>f640	86 80					.byte 	$86,$80
>f642	01					.byte 	1     ; *** Load Float 19.0 ***
>f643	00 00 00 98				.dword 	$98000000
>f647	85 00					.byte 	$85,$0
>f649	2b					.byte 	$2b   ; *** Command + ***
>f64a	01					.byte 	1     ; *** Load Float -31.57 ***
>f64b	28 5c 8f fc				.dword 	$fc8f5c28
>f64f	85 80					.byte 	$85,$80
>f651	3d					.byte 	$3d   ; *** Command = ***
>f652	01					.byte 	1     ; *** Load Float -16.0 ***
>f653	00 00 00 80				.dword 	$80000000
>f657	85 80					.byte 	$85,$80
>f659	01					.byte 	1     ; *** Load Float 5.32348 ***
>f65a	ba f2 59 aa				.dword 	$aa59f2ba
>f65e	83 00					.byte 	$83,$0
>f660	2b					.byte 	$2b   ; *** Command + ***
>f661	01					.byte 	1     ; *** Load Float -10.67652 ***
>f662	a2 06 d3 aa				.dword 	$aad306a2
>f666	84 80					.byte 	$84,$80
>f668	3d					.byte 	$3d   ; *** Command = ***
>f669	01					.byte 	1     ; *** Load Float 739.59 ***
>f66a	8f c2 e5 b8				.dword 	$b8e5c28f
>f66e	8a 00					.byte 	$8a,$0
>f670	01					.byte 	1     ; *** Load Float 1.071297 ***
>f671	95 42 20 89				.dword 	$89204295
>f675	81 00					.byte 	$81,$0
>f677	2b					.byte 	$2b   ; *** Command + ***
>f678	01					.byte 	1     ; *** Load Float 740.661297 ***
>f679	b0 52 2a b9				.dword 	$b92a52b0
>f67d	8a 00					.byte 	$8a,$0
>f67f	3d					.byte 	$3d   ; *** Command = ***
>f680	01					.byte 	1     ; *** Load Float -1.0 ***
>f681	00 00 00 80				.dword 	$80000000
>f685	81 80					.byte 	$81,$80
>f687	01					.byte 	1     ; *** Load Float 0.550767 ***
>f688	ec 10 ff 8c				.dword 	$8cff10ec
>f68c	80 00					.byte 	$80,$0
>f68e	7e					.byte 	$7e   ; *** Command ~ ***
>f68f	01					.byte 	1     ; *** Load Float -1 ***
>f690	00 00 00 80				.dword 	$80000000
>f694	81 80					.byte 	$81,$80
>f696	3d					.byte 	$3d   ; *** Command = ***
>f697	01					.byte 	1     ; *** Load Float -65.08 ***
>f698	c2 f5 28 82				.dword 	$8228f5c2
>f69c	87 80					.byte 	$87,$80
>f69e	01					.byte 	1     ; *** Load Float 812.12 ***
>f69f	14 ae 07 cb				.dword 	$cb07ae14
>f6a3	8a 00					.byte 	$8a,$0
>f6a5	7e					.byte 	$7e   ; *** Command ~ ***
>f6a6	01					.byte 	1     ; *** Load Float -1 ***
>f6a7	00 00 00 80				.dword 	$80000000
>f6ab	81 80					.byte 	$81,$80
>f6ad	3d					.byte 	$3d   ; *** Command = ***
>f6ae	01					.byte 	1     ; *** Load Float -5.0 ***
>f6af	00 00 00 a0				.dword 	$a0000000
>f6b3	83 80					.byte 	$83,$80
>f6b5	01					.byte 	1     ; *** Load Float 43473176834263.22 ***
>f6b6	0c 8d 27 9e				.dword 	$9e278d0c
>f6ba	ae 00					.byte 	$ae,$0
>f6bc	2f					.byte 	$2f   ; *** Command / ***
>f6bd	01					.byte 	1     ; *** Load Float -1.1501344884598516e-13 ***
>f6be	9f 5e 7e 81				.dword 	$817e5e9f
>f6c2	56 80					.byte 	$56,$80
>f6c4	3d					.byte 	$3d   ; *** Command = ***
>f6c5	01					.byte 	1     ; *** Load Float 16.0 ***
>f6c6	00 00 00 80				.dword 	$80000000
>f6ca	85 00					.byte 	$85,$0
>f6cc	01					.byte 	1     ; *** Load Float 118357412957063.75 ***
>f6cd	1c 77 4a d7				.dword 	$d74a771c
>f6d1	af 00					.byte 	$af,$0
>f6d3	2a					.byte 	$2a   ; *** Command * ***
>f6d4	01					.byte 	1     ; *** Load Float 1893718607313020.0 ***
>f6d5	1c 77 4a d7				.dword 	$d74a771c
>f6d9	b3 00					.byte 	$b3,$0
>f6db	3d					.byte 	$3d   ; *** Command = ***
>f6dc	01					.byte 	1     ; *** Load Float 2203.8528 ***
>f6dd	11 a5 bd 89				.dword 	$89bda511
>f6e1	8c 00					.byte 	$8c,$0
>f6e3	01					.byte 	1     ; *** Load Float 3.0 ***
>f6e4	00 00 00 c0				.dword 	$c0000000
>f6e8	82 00					.byte 	$82,$0
>f6ea	7e					.byte 	$7e   ; *** Command ~ ***
>f6eb	01					.byte 	1     ; *** Load Float 1 ***
>f6ec	00 00 00 80				.dword 	$80000000
>f6f0	81 00					.byte 	$81,$0
>f6f2	3d					.byte 	$3d   ; *** Command = ***
>f6f3	01					.byte 	1     ; *** Load Float 5.608299 ***
>f6f4	76 2f 77 b3				.dword 	$b3772f76
>f6f8	83 00					.byte 	$83,$0
>f6fa	01					.byte 	1     ; *** Load Float 488.91 ***
>f6fb	e1 7a 74 f4				.dword 	$f4747ae1
>f6ff	89 00					.byte 	$89,$0
>f701	2b					.byte 	$2b   ; *** Command + ***
>f702	01					.byte 	1     ; *** Load Float 494.518299 ***
>f703	9f 57 42 f7				.dword 	$f742579f
>f707	89 00					.byte 	$89,$0
>f709	3d					.byte 	$3d   ; *** Command = ***
>f70a	01					.byte 	1     ; *** Load Float -169.05 ***
>f70b	cc cc 0c a9				.dword 	$a90ccccc
>f70f	88 80					.byte 	$88,$80
>f711	01					.byte 	1     ; *** Load Float 2.1222329139709471e-07 ***
>f712	80 7e df e3				.dword 	$e3df7e80
>f716	6a 00					.byte 	$6a,$0
>f718	2f					.byte 	$2f   ; *** Command / ***
>f719	01					.byte 	1     ; *** Load Float -796566667.5279652 ***
>f71a	2e 92 ea bd				.dword 	$bdea922e
>f71e	9e 80					.byte 	$9e,$80
>f720	3d					.byte 	$3d   ; *** Command = ***
>f721	01					.byte 	1     ; *** Load Float -3.8351058959960937e-07 ***
>f722	48 4b e5 cd				.dword 	$cde54b48
>f726	6b 80					.byte 	$6b,$80
>f728	01					.byte 	1     ; *** Load Float -6.861850619316101e-09 ***
>f729	f2 79 c5 eb				.dword 	$ebc579f2
>f72d	65 80					.byte 	$65,$80
>f72f	2b					.byte 	$2b   ; *** Command + ***
>f730	01					.byte 	1     ; *** Load Float -3.903724402189255e-07 ***
>f731	30 61 94 d1				.dword 	$d1946130
>f735	6b 80					.byte 	$6b,$80
>f737	3d					.byte 	$3d   ; *** Command = ***
>f738	01					.byte 	1     ; *** Load Float -95.29 ***
>f739	e1 7a 94 be				.dword 	$be947ae1
>f73d	87 80					.byte 	$87,$80
>f73f	01					.byte 	1     ; *** Load Float 18.0 ***
>f740	00 00 00 90				.dword 	$90000000
>f744	85 00					.byte 	$85,$0
>f746	2d					.byte 	$2d   ; *** Command - ***
>f747	01					.byte 	1     ; *** Load Float -113.29 ***
>f748	e1 7a 94 e2				.dword 	$e2947ae1
>f74c	87 80					.byte 	$87,$80
>f74e	3d					.byte 	$3d   ; *** Command = ***
>f74f	01					.byte 	1     ; *** Load Float 153.6 ***
>f750	99 99 99 99				.dword 	$99999999
>f754	88 00					.byte 	$88,$0
>f756	01					.byte 	1     ; *** Load Float -6.91765222882168e-15 ***
>f757	83 14 3c f9				.dword 	$f93c1483
>f75b	51 80					.byte 	$51,$80
>f75d	2b					.byte 	$2b   ; *** Command + ***
>f75e	01					.byte 	1     ; *** Load Float 153.6 ***
>f75f	99 99 99 99				.dword 	$99999999
>f763	88 00					.byte 	$88,$0
>f765	3d					.byte 	$3d   ; *** Command = ***
>f766	01					.byte 	1     ; *** Load Float 4.384215 ***
>f767	41 7d 4b 8c				.dword 	$8c4b7d41
>f76b	83 00					.byte 	$83,$0
>f76d	01					.byte 	1     ; *** Load Float -0.00016664111328125 ***
>f76e	1b 62 bc ae				.dword 	$aebc621b
>f772	74 80					.byte 	$74,$80
>f774	2a					.byte 	$2a   ; *** Command * ***
>f775	01					.byte 	1     ; *** Load Float -0.0007305904684643555 ***
>f776	ac 18 85 bf				.dword 	$bf8518ac
>f77a	76 80					.byte 	$76,$80
>f77c	3d					.byte 	$3d   ; *** Command = ***
>f77d	01					.byte 	1     ; *** Load Float -10.0 ***
>f77e	00 00 00 a0				.dword 	$a0000000
>f782	84 80					.byte 	$84,$80
>f784	01					.byte 	1     ; *** Load Float -978.76 ***
>f785	d7 a3 b0 f4				.dword 	$f4b0a3d7
>f789	8a 80					.byte 	$8a,$80
>f78b	2a					.byte 	$2a   ; *** Command * ***
>f78c	01					.byte 	1     ; *** Load Float 9787.6 ***
>f78d	66 66 ee 98				.dword 	$98ee6666
>f791	8e 00					.byte 	$8e,$0
>f793	3d					.byte 	$3d   ; *** Command = ***
>f794	01					.byte 	1     ; *** Load Float 9.202204 ***
>f795	42 3a 3c 93				.dword 	$933c3a42
>f799	84 00					.byte 	$84,$0
>f79b	01					.byte 	1     ; *** Load Float -5.356683686841279e-12 ***
>f79c	a1 b7 78 bc				.dword 	$bc78b7a1
>f7a0	5b 80					.byte 	$5b,$80
>f7a2	2b					.byte 	$2b   ; *** Command + ***
>f7a3	01					.byte 	1     ; *** Load Float 9.202203999994643 ***
>f7a4	42 3a 3c 93				.dword 	$933c3a42
>f7a8	84 00					.byte 	$84,$0
>f7aa	3d					.byte 	$3d   ; *** Command = ***
>f7ab	01					.byte 	1     ; *** Load Float -28.82 ***
>f7ac	28 5c 8f e6				.dword 	$e68f5c28
>f7b0	85 80					.byte 	$85,$80
>f7b2	01					.byte 	1     ; *** Load Float 8.839241 ***
>f7b3	f8 87 6d 8d				.dword 	$8d6d87f8
>f7b7	84 00					.byte 	$84,$0
>f7b9	2d					.byte 	$2d   ; *** Command - ***
>f7ba	01					.byte 	1     ; *** Load Float -37.659241 ***
>f7bb	12 10 a3 96				.dword 	$96a31012
>f7bf	86 80					.byte 	$86,$80
>f7c1	3d					.byte 	$3d   ; *** Command = ***
>f7c2	01					.byte 	1     ; *** Load Float 174764074700.11188 ***
>f7c3	9b 00 c3 a2				.dword 	$a2c3009b
>f7c7	a6 00					.byte 	$a6,$0
>f7c9	01					.byte 	1     ; *** Load Float 18.0 ***
>f7ca	00 00 00 90				.dword 	$90000000
>f7ce	85 00					.byte 	$85,$0
>f7d0	2a					.byte 	$2a   ; *** Command * ***
>f7d1	01					.byte 	1     ; *** Load Float 3145753344602.0137 ***
>f7d2	ae 60 1b b7				.dword 	$b71b60ae
>f7d6	aa 00					.byte 	$aa,$0
>f7d8	3d					.byte 	$3d   ; *** Command = ***
>f7d9	01					.byte 	1     ; *** Load Float 1.9913068172172642e-13 ***
>f7da	e4 82 33 e0				.dword 	$e03382e4
>f7de	56 00					.byte 	$56,$0
>f7e0	01					.byte 	1     ; *** Load Float 6.806797 ***
>f7e1	f1 47 d1 d9				.dword 	$d9d147f1
>f7e5	83 00					.byte 	$83,$0
>f7e7	2f					.byte 	$2f   ; *** Command / ***
>f7e8	01					.byte 	1     ; *** Load Float 2.92546820070771e-14 ***
>f7e9	1c 5a c0 83				.dword 	$83c05a1c
>f7ed	54 00					.byte 	$54,$0
>f7ef	3d					.byte 	$3d   ; *** Command = ***
>f7f0	01					.byte 	1     ; *** Load Float 562340278621756.7 ***
>f7f1	46 06 b9 ff				.dword 	$ffb90646
>f7f5	b1 00					.byte 	$b1,$0
>f7f7	01					.byte 	1     ; *** Load Float 799.89 ***
>f7f8	c2 f5 f8 c7				.dword 	$c7f8f5c2
>f7fc	8a 00					.byte 	$8a,$0
>f7fe	7e					.byte 	$7e   ; *** Command ~ ***
>f7ff	01					.byte 	1     ; *** Load Float 1 ***
>f800	00 00 00 80				.dword 	$80000000
>f804	81 00					.byte 	$81,$0
>f806	3d					.byte 	$3d   ; *** Command = ***
>f807	01					.byte 	1     ; *** Load Float -500.47 ***
>f808	f5 28 3c fa				.dword 	$fa3c28f5
>f80c	89 80					.byte 	$89,$80
>f80e	01					.byte 	1     ; *** Load Float -1.011120502880658e-13 ***
>f80f	ea 20 af e3				.dword 	$e3af20ea
>f813	55 80					.byte 	$55,$80
>f815	2f					.byte 	$2f   ; *** Command / ***
>f816	01					.byte 	1     ; *** Load Float 4949657321498012.0 ***
>f817	33 7f ad 8c				.dword 	$8cad7f33
>f81b	b5 00					.byte 	$b5,$0
>f81d	3d					.byte 	$3d   ; *** Command = ***
>f81e	01					.byte 	1     ; *** Load Float 0.915044 ***
>f81f	d6 52 40 ea				.dword 	$ea4052d6
>f823	80 00					.byte 	$80,$0
>f825	01					.byte 	1     ; *** Load Float -3.0 ***
>f826	00 00 00 c0				.dword 	$c0000000
>f82a	82 80					.byte 	$82,$80
>f82c	2b					.byte 	$2b   ; *** Command + ***
>f82d	01					.byte 	1     ; *** Load Float -2.084956 ***
>f82e	4a eb 6f 85				.dword 	$856feb4a
>f832	82 80					.byte 	$82,$80
>f834	3d					.byte 	$3d   ; *** Command = ***
>f835	01					.byte 	1     ; *** Load Float 2.01079 ***
>f836	8a c8 b0 80				.dword 	$80b0c88a
>f83a	82 00					.byte 	$82,$0
>f83c	01					.byte 	1     ; *** Load Float 19.0 ***
>f83d	00 00 00 98				.dword 	$98000000
>f841	85 00					.byte 	$85,$0
>f843	2a					.byte 	$2a   ; *** Command * ***
>f844	01					.byte 	1     ; *** Load Float 38.20501 ***
>f845	24 ee d1 98				.dword 	$98d1ee24
>f849	86 00					.byte 	$86,$0
>f84b	3d					.byte 	$3d   ; *** Command = ***
>f84c	01					.byte 	1     ; *** Load Float 3.0125804073577456e-15 ***
>f84d	be 4c 14 d9				.dword 	$d9144cbe
>f851	50 00					.byte 	$50,$0
>f853	01					.byte 	1     ; *** Load Float 7.904345 ***
>f854	ec 64 f0 fc				.dword 	$fcf064ec
>f858	83 00					.byte 	$83,$0
>f85a	2d					.byte 	$2d   ; *** Command - ***
>f85b	01					.byte 	1     ; *** Load Float -7.9043449999999975 ***
>f85c	ec 64 f0 fc				.dword 	$fcf064ec
>f860	83 80					.byte 	$83,$80
>f862	3d					.byte 	$3d   ; *** Command = ***
>f863	01					.byte 	1     ; *** Load Float 6.938395 ***
>f864	f3 54 07 de				.dword 	$de0754f3
>f868	83 00					.byte 	$83,$0
>f86a	01					.byte 	1     ; *** Load Float -1097.13408 ***
>f86b	62 4a 24 89				.dword 	$89244a62
>f86f	8b 80					.byte 	$8b,$80
>f871	7e					.byte 	$7e   ; *** Command ~ ***
>f872	01					.byte 	1     ; *** Load Float 1 ***
>f873	00 00 00 80				.dword 	$80000000
>f877	81 00					.byte 	$81,$0
>f879	3d					.byte 	$3d   ; *** Command = ***
>f87a	01					.byte 	1     ; *** Load Float -213.71 ***
>f87b	8f c2 b5 d5				.dword 	$d5b5c28f
>f87f	88 80					.byte 	$88,$80
>f881	01					.byte 	1     ; *** Load Float 1.0 ***
>f882	00 00 00 80				.dword 	$80000000
>f886	81 00					.byte 	$81,$0
>f888	2d					.byte 	$2d   ; *** Command - ***
>f889	01					.byte 	1     ; *** Load Float -214.71 ***
>f88a	8f c2 b5 d6				.dword 	$d6b5c28f
>f88e	88 80					.byte 	$88,$80
>f890	3d					.byte 	$3d   ; *** Command = ***
>f891	01					.byte 	1     ; *** Load Float 4.0 ***
>f892	00 00 00 80				.dword 	$80000000
>f896	83 00					.byte 	$83,$0
>f898	01					.byte 	1     ; *** Load Float 4.460027 ***
>f899	8b 8a b8 8e				.dword 	$8eb88a8b
>f89d	83 00					.byte 	$83,$0
>f89f	2f					.byte 	$2f   ; *** Command / ***
>f8a0	01					.byte 	1     ; *** Load Float 0.8968555571524567 ***
>f8a1	67 53 98 e5				.dword 	$e5985367
>f8a5	80 00					.byte 	$80,$0
>f8a7	3d					.byte 	$3d   ; *** Command = ***
>f8a8	01					.byte 	1     ; *** Load Float -5.1525421142578126e-06 ***
>f8a9	ef ff e3 ac				.dword 	$ace3ffef
>f8ad	6f 80					.byte 	$6f,$80
>f8af	01					.byte 	1     ; *** Load Float 8.120758 ***
>f8b0	f0 9f ee 81				.dword 	$81ee9ff0
>f8b4	84 00					.byte 	$84,$0
>f8b6	2d					.byte 	$2d   ; *** Command - ***
>f8b7	01					.byte 	1     ; *** Load Float -8.120763152542114 ***
>f8b8	57 a5 ee 81				.dword 	$81eea557
>f8bc	84 80					.byte 	$84,$80
>f8be	3d					.byte 	$3d   ; *** Command = ***
>f8bf	01					.byte 	1     ; *** Load Float 8.08234 ***
>f8c0	bf 43 51 81				.dword 	$815143bf
>f8c4	84 00					.byte 	$84,$0
>f8c6	01					.byte 	1     ; *** Load Float 0.0 ***
>f8c7	00 00 00 00				.dword 	$0
>f8cb	80 40					.byte 	$80,$40
>f8cd	2a					.byte 	$2a   ; *** Command * ***
>f8ce	01					.byte 	1     ; *** Load Float 0.0 ***
>f8cf	00 00 00 00				.dword 	$0
>f8d3	80 40					.byte 	$80,$40
>f8d5	3d					.byte 	$3d   ; *** Command = ***
>f8d6	01					.byte 	1     ; *** Load Float 115839.860736 ***
>f8d7	2c ee 3f e2				.dword 	$e23fee2c
>f8db	91 00					.byte 	$91,$0
>f8dd	01					.byte 	1     ; *** Load Float 830.97 ***
>f8de	7a 14 be cf				.dword 	$cfbe147a
>f8e2	8a 00					.byte 	$8a,$0
>f8e4	2b					.byte 	$2b   ; *** Command + ***
>f8e5	01					.byte 	1     ; *** Load Float 116670.830736 ***
>f8e6	55 6a df e3				.dword 	$e3df6a55
>f8ea	91 00					.byte 	$91,$0
>f8ec	3d					.byte 	$3d   ; *** Command = ***
>f8ed	01					.byte 	1     ; *** Load Float 2.0 ***
>f8ee	00 00 00 80				.dword 	$80000000
>f8f2	82 00					.byte 	$82,$0
>f8f4	01					.byte 	1     ; *** Load Float 4.627366 ***
>f8f5	dc 61 13 94				.dword 	$941361dc
>f8f9	83 00					.byte 	$83,$0
>f8fb	2a					.byte 	$2a   ; *** Command * ***
>f8fc	01					.byte 	1     ; *** Load Float 9.254732 ***
>f8fd	dc 61 13 94				.dword 	$941361dc
>f901	84 00					.byte 	$84,$0
>f903	3d					.byte 	$3d   ; *** Command = ***
>f904	01					.byte 	1     ; *** Load Float 4.0557421743869785e-10 ***
>f905	27 7f f7 de				.dword 	$def77f27
>f909	61 00					.byte 	$61,$0
>f90b	01					.byte 	1     ; *** Load Float 5.79133 ***
>f90c	4a 93 52 b9				.dword 	$b952934a
>f910	83 00					.byte 	$83,$0
>f912	2f					.byte 	$2f   ; *** Command / ***
>f913	01					.byte 	1     ; *** Load Float 7.003127389368208e-11 ***
>f914	35 1a 00 9a				.dword 	$9a001a35
>f918	5f 00					.byte 	$5f,$0
>f91a	3d					.byte 	$3d   ; *** Command = ***
>f91b	01					.byte 	1     ; *** Load Float -5.0080643632099966e-14 ***
>f91c	0e 0d 8b e1				.dword 	$e18b0d0e
>f920	54 80					.byte 	$54,$80
>f922	01					.byte 	1     ; *** Load Float -267.39 ***
>f923	85 eb b1 85				.dword 	$85b1eb85
>f927	89 80					.byte 	$89,$80
>f929	2a					.byte 	$2a   ; *** Command * ***
>f92a	01					.byte 	1     ; *** Load Float 1.339106330078721e-11 ***
>f92b	d9 fc 93 eb				.dword 	$eb93fcd9
>f92f	5c 00					.byte 	$5c,$0
>f931	3d					.byte 	$3d   ; *** Command = ***
>f932	01					.byte 	1     ; *** Load Float 751.3 ***
>f933	33 33 d3 bb				.dword 	$bbd33333
>f937	8a 00					.byte 	$8a,$0
>f939	01					.byte 	1     ; *** Load Float -539.03 ***
>f93a	85 eb c1 86				.dword 	$86c1eb85
>f93e	8a 80					.byte 	$8a,$80
>f940	7e					.byte 	$7e   ; *** Command ~ ***
>f941	01					.byte 	1     ; *** Load Float 1 ***
>f942	00 00 00 80				.dword 	$80000000
>f946	81 00					.byte 	$81,$0
>f948	3d					.byte 	$3d   ; *** Command = ***
>f949	01					.byte 	1     ; *** Load Float -775.56 ***
>f94a	0a d7 e3 c1				.dword 	$c1e3d70a
>f94e	8a 80					.byte 	$8a,$80
>f950	01					.byte 	1     ; *** Load Float 8.950719 ***
>f951	20 25 36 8f				.dword 	$8f362520
>f955	84 00					.byte 	$84,$0
>f957	2b					.byte 	$2b   ; *** Command + ***
>f958	01					.byte 	1     ; *** Load Float -766.6092809999999 ***
>f959	75 fe a6 bf				.dword 	$bfa6fe75
>f95d	8a 80					.byte 	$8a,$80
>f95f	3d					.byte 	$3d   ; *** Command = ***
>f960	01					.byte 	1     ; *** Load Float 17.0 ***
>f961	00 00 00 88				.dword 	$88000000
>f965	85 00					.byte 	$85,$0
>f967	01					.byte 	1     ; *** Load Float 54998121377.16941 ***
>f968	ba 4b e2 cc				.dword 	$cce24bba
>f96c	a4 00					.byte 	$a4,$0
>f96e	2b					.byte 	$2b   ; *** Command + ***
>f96f	01					.byte 	1     ; *** Load Float 54998121394.16941 ***
>f970	bb 4b e2 cc				.dword 	$cce24bbb
>f974	a4 00					.byte 	$a4,$0
>f976	3d					.byte 	$3d   ; *** Command = ***
>f977	01					.byte 	1     ; *** Load Float 11.0 ***
>f978	00 00 00 b0				.dword 	$b0000000
>f97c	84 00					.byte 	$84,$0
>f97e	01					.byte 	1     ; *** Load Float -217774.555136 ***
>f97f	87 a3 ab d4				.dword 	$d4aba387
>f983	92 80					.byte 	$92,$80
>f985	2d					.byte 	$2d   ; *** Command - ***
>f986	01					.byte 	1     ; *** Load Float 217785.555136 ***
>f987	87 63 ae d4				.dword 	$d4ae6387
>f98b	92 00					.byte 	$92,$0
>f98d	3d					.byte 	$3d   ; *** Command = ***
>f98e	01					.byte 	1     ; *** Load Float 139057887.707136 ***
>f98f	fb ad 9d 84				.dword 	$849dadfb
>f993	9c 00					.byte 	$9c,$0
>f995	01					.byte 	1     ; *** Load Float -190.65 ***
>f996	66 66 a6 be				.dword 	$bea66666
>f99a	88 80					.byte 	$88,$80
>f99c	2b					.byte 	$2b   ; *** Command + ***
>f99d	01					.byte 	1     ; *** Load Float 139057697.057136 ***
>f99e	10 a2 9d 84				.dword 	$849da210
>f9a2	9c 00					.byte 	$9c,$0
>f9a4	3d					.byte 	$3d   ; *** Command = ***
>f9a5	01					.byte 	1     ; *** Load Float 8.405891 ***
>f9a6	8f 87 7e 86				.dword 	$867e878f
>f9aa	84 00					.byte 	$84,$0
>f9ac	01					.byte 	1     ; *** Load Float 2.370076 ***
>f9ad	3f 53 af 97				.dword 	$97af533f
>f9b1	82 00					.byte 	$82,$0
>f9b3	7e					.byte 	$7e   ; *** Command ~ ***
>f9b4	01					.byte 	1     ; *** Load Float 1 ***
>f9b5	00 00 00 80				.dword 	$80000000
>f9b9	81 00					.byte 	$81,$0
>f9bb	3d					.byte 	$3d   ; *** Command = ***
>f9bc	01					.byte 	1     ; *** Load Float 1.940605 ***
>f9bd	a0 be 65 f8				.dword 	$f865bea0
>f9c1	81 00					.byte 	$81,$0
>f9c3	01					.byte 	1     ; *** Load Float 1.940605 ***
>f9c4	a0 be 65 f8				.dword 	$f865bea0
>f9c8	81 00					.byte 	$81,$0
>f9ca	2a					.byte 	$2a   ; *** Command * ***
>f9cb	01					.byte 	1     ; *** Load Float 3.7659477660249996 ***
>f9cc	c7 49 05 f1				.dword 	$f10549c7
>f9d0	82 00					.byte 	$82,$0
>f9d2	3d					.byte 	$3d   ; *** Command = ***
>f9d3	01					.byte 	1     ; *** Load Float -610.51 ***
>f9d4	d7 a3 a0 98				.dword 	$98a0a3d7
>f9d8	8a 80					.byte 	$8a,$80
>f9da	01					.byte 	1     ; *** Load Float -16.0 ***
>f9db	00 00 00 80				.dword 	$80000000
>f9df	85 80					.byte 	$85,$80
>f9e1	2a					.byte 	$2a   ; *** Command * ***
>f9e2	01					.byte 	1     ; *** Load Float 9768.16 ***
>f9e3	d7 a3 a0 98				.dword 	$98a0a3d7
>f9e7	8e 00					.byte 	$8e,$0
>f9e9	3d					.byte 	$3d   ; *** Command = ***
>f9ea	01					.byte 	1     ; *** Load Float -134.22 ***
>f9eb	eb 51 38 86				.dword 	$863851eb
>f9ef	88 80					.byte 	$88,$80
>f9f1	01					.byte 	1     ; *** Load Float 62003355.844608 ***
>f9f2	f6 26 86 ec				.dword 	$ec8626f6
>f9f6	9a 00					.byte 	$9a,$0
>f9f8	2f					.byte 	$2f   ; *** Command / ***
>f9f9	01					.byte 	1     ; *** Load Float -2.164721540820797e-06 ***
>f9fa	05 a2 45 91				.dword 	$9145a205
>f9fe	6e 80					.byte 	$6e,$80
>fa00	3d					.byte 	$3d   ; *** Command = ***
>fa01	01					.byte 	1     ; *** Load Float -210.47 ***
>fa02	eb 51 78 d2				.dword 	$d27851eb
>fa06	88 80					.byte 	$88,$80
>fa08	01					.byte 	1     ; *** Load Float -19.0 ***
>fa09	00 00 00 98				.dword 	$98000000
>fa0d	85 80					.byte 	$85,$80
>fa0f	7e					.byte 	$7e   ; *** Command ~ ***
>fa10	01					.byte 	1     ; *** Load Float -1 ***
>fa11	00 00 00 80				.dword 	$80000000
>fa15	81 80					.byte 	$81,$80
>fa17	3d					.byte 	$3d   ; *** Command = ***
>fa18	01					.byte 	1     ; *** Load Float -7.0 ***
>fa19	00 00 00 e0				.dword 	$e0000000
>fa1d	83 80					.byte 	$83,$80
>fa1f	01					.byte 	1     ; *** Load Float 0.0 ***
>fa20	00 00 00 00				.dword 	$0
>fa24	80 40					.byte 	$80,$40
>fa26	2b					.byte 	$2b   ; *** Command + ***
>fa27	01					.byte 	1     ; *** Load Float -7.0 ***
>fa28	00 00 00 e0				.dword 	$e0000000
>fa2c	83 80					.byte 	$83,$80
>fa2e	3d					.byte 	$3d   ; *** Command = ***
>fa2f	01					.byte 	1     ; *** Load Float -629957885.689856 ***
>fa30	f6 93 31 96				.dword 	$963193f6
>fa34	9e 80					.byte 	$9e,$80
>fa36	01					.byte 	1     ; *** Load Float -238515139865168.8 ***
>fa37	2f a2 ed d8				.dword 	$d8eda22f
>fa3b	b0 80					.byte 	$b0,$80
>fa3d	7e					.byte 	$7e   ; *** Command ~ ***
>fa3e	01					.byte 	1     ; *** Load Float 1 ***
>fa3f	00 00 00 80				.dword 	$80000000
>fa43	81 00					.byte 	$81,$0
>fa45	3d					.byte 	$3d   ; *** Command = ***
>fa46	01					.byte 	1     ; *** Load Float 4.985681 ***
>fa47	e1 b2 8a 9f				.dword 	$9f8ab2e1
>fa4b	83 00					.byte 	$83,$0
>fa4d	01					.byte 	1     ; *** Load Float 2.800490619847551e-12 ***
>fa4e	6f 27 11 c5				.dword 	$c511276f
>fa52	5a 00					.byte 	$5a,$0
>fa54	2f					.byte 	$2f   ; *** Command / ***
>fa55	01					.byte 	1     ; *** Load Float 1780288412560.8687 ***
>fa56	ad ba 40 cf				.dword 	$cf40baad
>fa5a	a9 00					.byte 	$a9,$0
>fa5c	3d					.byte 	$3d   ; *** Command = ***
>fa5d	01					.byte 	1     ; *** Load Float 672.34 ***
>fa5e	8f c2 15 a8				.dword 	$a815c28f
>fa62	8a 00					.byte 	$8a,$0
>fa64	01					.byte 	1     ; *** Load Float 703.24 ***
>fa65	28 5c cf af				.dword 	$afcf5c28
>fa69	8a 00					.byte 	$8a,$0
>fa6b	7e					.byte 	$7e   ; *** Command ~ ***
>fa6c	01					.byte 	1     ; *** Load Float -1 ***
>fa6d	00 00 00 80				.dword 	$80000000
>fa71	81 80					.byte 	$81,$80
>fa73	3d					.byte 	$3d   ; *** Command = ***
>fa74	01					.byte 	1     ; *** Load Float -3.8611425168255664e-16 ***
>fa75	01 68 94 de				.dword 	$de946801
>fa79	4d 80					.byte 	$4d,$80
>fa7b	01					.byte 	1     ; *** Load Float 17.0 ***
>fa7c	00 00 00 88				.dword 	$88000000
>fa80	85 00					.byte 	$85,$0
>fa82	2a					.byte 	$2a   ; *** Command * ***
>fa83	01					.byte 	1     ; *** Load Float -6.563942278603463e-15 ***
>fa84	81 ae 7d ec				.dword 	$ec7dae81
>fa88	51 80					.byte 	$51,$80
>fa8a	3d					.byte 	$3d   ; *** Command = ***
>fa8b	01					.byte 	1     ; *** Load Float 389729.4848 ***
>fa8c	83 2f 4c be				.dword 	$be4c2f83
>fa90	93 00					.byte 	$93,$0
>fa92	01					.byte 	1     ; *** Load Float 8.028369140624999e-05 ***
>fa93	87 fa 5d a8				.dword 	$a85dfa87
>fa97	73 00					.byte 	$73,$0
>fa99	2b					.byte 	$2b   ; *** Command + ***
>fa9a	01					.byte 	1     ; *** Load Float 389729.48488028365 ***
>fa9b	84 2f 4c be				.dword 	$be4c2f84
>fa9f	93 00					.byte 	$93,$0
>faa1	3d					.byte 	$3d   ; *** Command = ***
>faa2	01					.byte 	1     ; *** Load Float -6.0 ***
>faa3	00 00 00 c0				.dword 	$c0000000
>faa7	83 80					.byte 	$83,$80
>faa9	01					.byte 	1     ; *** Load Float -8.0 ***
>faaa	00 00 00 80				.dword 	$80000000
>faae	84 80					.byte 	$84,$80
>fab0	7e					.byte 	$7e   ; *** Command ~ ***
>fab1	01					.byte 	1     ; *** Load Float 1 ***
>fab2	00 00 00 80				.dword 	$80000000
>fab6	81 00					.byte 	$81,$0
>fab8	3d					.byte 	$3d   ; *** Command = ***
>fab9	01					.byte 	1     ; *** Load Float 5.994077 ***
>faba	91 7a cf bf				.dword 	$bfcf7a91
>fabe	83 00					.byte 	$83,$0
>fac0	01					.byte 	1     ; *** Load Float 5.74454 ***
>fac1	8c 45 d3 b7				.dword 	$b7d3458c
>fac5	83 00					.byte 	$83,$0
>fac7	2d					.byte 	$2d   ; *** Command - ***
>fac8	01					.byte 	1     ; *** Load Float 0.24953700000000012 ***
>fac9	98 a0 86 ff				.dword 	$ff86a098
>facd	7e 00					.byte 	$7e,$0
>facf	3d					.byte 	$3d   ; *** Command = ***
>fad0	01					.byte 	1     ; *** Load Float 2.0 ***
>fad1	00 00 00 80				.dword 	$80000000
>fad5	82 00					.byte 	$82,$0
>fad7	01					.byte 	1     ; *** Load Float -466.44 ***
>fad8	eb 51 38 e9				.dword 	$e93851eb
>fadc	89 80					.byte 	$89,$80
>fade	2d					.byte 	$2d   ; *** Command - ***
>fadf	01					.byte 	1     ; *** Load Float 468.44 ***
>fae0	eb 51 38 ea				.dword 	$ea3851eb
>fae4	89 00					.byte 	$89,$0
>fae6	3d					.byte 	$3d   ; *** Command = ***
>fae7	01					.byte 	1     ; *** Load Float 14.0 ***
>fae8	00 00 00 e0				.dword 	$e0000000
>faec	84 00					.byte 	$84,$0
>faee	01					.byte 	1     ; *** Load Float 6.466601 ***
>faef	38 65 ee ce				.dword 	$ceee6538
>faf3	83 00					.byte 	$83,$0
>faf5	2a					.byte 	$2a   ; *** Command * ***
>faf6	01					.byte 	1     ; *** Load Float 90.532414 ***
>faf7	91 98 10 b5				.dword 	$b5109891
>fafb	87 00					.byte 	$87,$0
>fafd	3d					.byte 	$3d   ; *** Command = ***
>fafe	01					.byte 	1     ; *** Load Float -1714.098176 ***
>faff	41 24 43 d6				.dword 	$d6432441
>fb03	8b 80					.byte 	$8b,$80
>fb05	01					.byte 	1     ; *** Load Float 991.85 ***
>fb06	66 66 f6 f7				.dword 	$f7f66666
>fb0a	8a 00					.byte 	$8a,$0
>fb0c	7e					.byte 	$7e   ; *** Command ~ ***
>fb0d	01					.byte 	1     ; *** Load Float -1 ***
>fb0e	00 00 00 80				.dword 	$80000000
>fb12	81 80					.byte 	$81,$80
>fb14	3d					.byte 	$3d   ; *** Command = ***
>fb15	01					.byte 	1     ; *** Load Float 0.949473 ***
>fb16	9b a9 10 f3				.dword 	$f310a99b
>fb1a	80 00					.byte 	$80,$0
>fb1c	01					.byte 	1     ; *** Load Float 7.1436 ***
>fb1d	06 5f 98 e4				.dword 	$e4985f06
>fb21	83 00					.byte 	$83,$0
>fb23	2a					.byte 	$2a   ; *** Command * ***
>fb24	01					.byte 	1     ; *** Load Float 6.7826553228 ***
>fb25	2c 83 0b d9				.dword 	$d90b832c
>fb29	83 00					.byte 	$83,$0
>fb2b	3d					.byte 	$3d   ; *** Command = ***
>fb2c	01					.byte 	1     ; *** Load Float -763.23 ***
>fb2d	51 b8 ce be				.dword 	$beceb851
>fb31	8a 80					.byte 	$8a,$80
>fb33	01					.byte 	1     ; *** Load Float 350.43 ***
>fb34	3d 0a 37 af				.dword 	$af370a3d
>fb38	89 00					.byte 	$89,$0
>fb3a	7e					.byte 	$7e   ; *** Command ~ ***
>fb3b	01					.byte 	1     ; *** Load Float -1 ***
>fb3c	00 00 00 80				.dword 	$80000000
>fb40	81 80					.byte 	$81,$80
>fb42	3d					.byte 	$3d   ; *** Command = ***
>fb43	01					.byte 	1     ; *** Load Float 2.0 ***
>fb44	00 00 00 80				.dword 	$80000000
>fb48	82 00					.byte 	$82,$0
>fb4a	01					.byte 	1     ; *** Load Float 65161.78944 ***
>fb4b	18 ca 89 fe				.dword 	$fe89ca18
>fb4f	90 00					.byte 	$90,$0
>fb51	2b					.byte 	$2b   ; *** Command + ***
>fb52	01					.byte 	1     ; *** Load Float 65163.78944 ***
>fb53	18 ca 8b fe				.dword 	$fe8bca18
>fb57	90 00					.byte 	$90,$0
>fb59	3d					.byte 	$3d   ; *** Command = ***
>fb5a	01					.byte 	1     ; *** Load Float 6.968447 ***
>fb5b	90 84 fd de				.dword 	$defd8490
>fb5f	83 00					.byte 	$83,$0
>fb61	01					.byte 	1     ; *** Load Float -424.649728 ***
>fb62	49 2a 53 d4				.dword 	$d4532a49
>fb66	89 80					.byte 	$89,$80
>fb68	2b					.byte 	$2b   ; *** Command + ***
>fb69	01					.byte 	1     ; *** Load Float -417.68128099999996 ***
>fb6a	37 34 d7 d0				.dword 	$d0d73437
>fb6e	89 80					.byte 	$89,$80
>fb70	3d					.byte 	$3d   ; *** Command = ***
>fb71	01					.byte 	1     ; *** Load Float 130433140257.71826 ***
>fb72	31 5e f3 f2				.dword 	$f2f35e31
>fb76	a5 00					.byte 	$a5,$0
>fb78	01					.byte 	1     ; *** Load Float 749.37 ***
>fb79	14 ae 57 bb				.dword 	$bb57ae14
>fb7d	8a 00					.byte 	$8a,$0
>fb7f	2d					.byte 	$2d   ; *** Command - ***
>fb80	01					.byte 	1     ; *** Load Float 130433139508.34827 ***
>fb81	19 5e f3 f2				.dword 	$f2f35e19
>fb85	a5 00					.byte 	$a5,$0
>fb87	3d					.byte 	$3d   ; *** Command = ***
>fb88	01					.byte 	1     ; *** Load Float 3.862819 ***
>fb89	2e 6d 38 f7				.dword 	$f7386d2e
>fb8d	82 00					.byte 	$82,$0
>fb8f	01					.byte 	1     ; *** Load Float -988.79 ***
>fb90	5c 8f 32 f7				.dword 	$f7328f5c
>fb94	8a 80					.byte 	$8a,$80
>fb96	2a					.byte 	$2a   ; *** Command * ***
>fb97	01					.byte 	1     ; *** Load Float -3819.51679901 ***
>fb98	cf 44 b8 ee				.dword 	$eeb844cf
>fb9c	8c 80					.byte 	$8c,$80
>fb9e	3d					.byte 	$3d   ; *** Command = ***
>fb9f	01					.byte 	1     ; *** Load Float 7.89841 ***
>fba0	54 c6 bf fc				.dword 	$fcbfc654
>fba4	83 00					.byte 	$83,$0
>fba6	01					.byte 	1     ; *** Load Float 573.17 ***
>fba7	47 e1 4a 8f				.dword 	$8f4ae147
>fbab	8a 00					.byte 	$8a,$0
>fbad	7e					.byte 	$7e   ; *** Command ~ ***
>fbae	01					.byte 	1     ; *** Load Float -1 ***
>fbaf	00 00 00 80				.dword 	$80000000
>fbb3	81 80					.byte 	$81,$80
>fbb5	3d					.byte 	$3d   ; *** Command = ***
>fbb6	01					.byte 	1     ; *** Load Float -856.42 ***
>fbb7	47 e1 1a d6				.dword 	$d61ae147
>fbbb	8a 80					.byte 	$8a,$80
>fbbd	01					.byte 	1     ; *** Load Float -286339990208123.0 ***
>fbbe	b3 5c 36 82				.dword 	$82365cb3
>fbc2	b1 80					.byte 	$b1,$80
>fbc4	2b					.byte 	$2b   ; *** Command + ***
>fbc5	01					.byte 	1     ; *** Load Float -286339990208979.44 ***
>fbc6	b3 5c 36 82				.dword 	$82365cb3
>fbca	b1 80					.byte 	$b1,$80
>fbcc	3d					.byte 	$3d   ; *** Command = ***
>fbcd	01					.byte 	1     ; *** Load Float 913.01 ***
>fbce	d7 a3 40 e4				.dword 	$e440a3d7
>fbd2	8a 00					.byte 	$8a,$0
>fbd4	01					.byte 	1     ; *** Load Float 142.22 ***
>fbd5	eb 51 38 8e				.dword 	$8e3851eb
>fbd9	88 00					.byte 	$88,$0
>fbdb	2a					.byte 	$2a   ; *** Command * ***
>fbdc	01					.byte 	1     ; *** Load Float 129848.2822 ***
>fbdd	1f 24 9c fd				.dword 	$fd9c241f
>fbe1	91 00					.byte 	$91,$0
>fbe3	3d					.byte 	$3d   ; *** Command = ***
>fbe4	01					.byte 	1     ; *** Load Float -404684050695.979 ***
>fbe5	22 19 72 bc				.dword 	$bc721922
>fbe9	a7 80					.byte 	$a7,$80
>fbeb	01					.byte 	1     ; *** Load Float 549825338207247.5 ***
>fbec	fc 17 08 fa				.dword 	$fa0817fc
>fbf0	b1 00					.byte 	$b1,$0
>fbf2	2a					.byte 	$2a   ; *** Command * ***
>fbf3	01					.byte 	1     ; *** Load Float -2.2250554504099554e+26 ***
>fbf4	c4 61 0d b8				.dword 	$b80d61c4
>fbf8	d8 80					.byte 	$d8,$80
>fbfa	3d					.byte 	$3d   ; *** Command = ***
>fbfb	01					.byte 	1     ; *** Load Float 6.06967 ***
>fbfc	94 bc 3a c2				.dword 	$c23abc94
>fc00	83 00					.byte 	$83,$0
>fc02	01					.byte 	1     ; *** Load Float 4.7080850601196286e-07 ***
>fc03	a8 6d c3 fc				.dword 	$fcc36da8
>fc07	6b 00					.byte 	$6b,$0
>fc09	7e					.byte 	$7e   ; *** Command ~ ***
>fc0a	01					.byte 	1     ; *** Load Float 1 ***
>fc0b	00 00 00 80				.dword 	$80000000
>fc0f	81 00					.byte 	$81,$0
>fc11	3d					.byte 	$3d   ; *** Command = ***
>fc12	01					.byte 	1     ; *** Load Float 3.751353 ***
>fc13	e4 2a 16 f0				.dword 	$f0162ae4
>fc17	82 00					.byte 	$82,$0
>fc19	01					.byte 	1     ; *** Load Float 1.063531494140625e-05 ***
>fc1a	71 54 6e b2				.dword 	$b26e5471
>fc1e	70 00					.byte 	$70,$0
>fc20	7e					.byte 	$7e   ; *** Command ~ ***
>fc21	01					.byte 	1     ; *** Load Float 1 ***
>fc22	00 00 00 80				.dword 	$80000000
>fc26	81 00					.byte 	$81,$0
>fc28	3d					.byte 	$3d   ; *** Command = ***
>fc29	01					.byte 	1     ; *** Load Float 5.373266 ***
>fc2a	89 cb f1 ab				.dword 	$abf1cb89
>fc2e	83 00					.byte 	$83,$0
>fc30	01					.byte 	1     ; *** Load Float 0.778235 ***
>fc31	b1 68 3a c7				.dword 	$c73a68b1
>fc35	80 00					.byte 	$80,$0
>fc37	2a					.byte 	$2a   ; *** Command * ***
>fc38	01					.byte 	1     ; *** Load Float 4.18166366551 ***
>fc39	51 30 d0 85				.dword 	$85d03051
>fc3d	83 00					.byte 	$83,$0
>fc3f	3d					.byte 	$3d   ; *** Command = ***
>fc40	01					.byte 	1     ; *** Load Float -3.641380317276344e-13 ***
>fc41	28 d2 fd cc				.dword 	$ccfdd228
>fc45	57 80					.byte 	$57,$80
>fc47	01					.byte 	1     ; *** Load Float 25577423600.877567 ***
>fc48	5e 10 91 be				.dword 	$be91105e
>fc4c	a3 00					.byte 	$a3,$0
>fc4e	2d					.byte 	$2d   ; *** Command - ***
>fc4f	01					.byte 	1     ; *** Load Float -25577423600.877567 ***
>fc50	5e 10 91 be				.dword 	$be91105e
>fc54	a3 80					.byte 	$a3,$80
>fc56	3d					.byte 	$3d   ; *** Command = ***
>fc57	01					.byte 	1     ; *** Load Float 57.04 ***
>fc58	c2 f5 28 e4				.dword 	$e428f5c2
>fc5c	86 00					.byte 	$86,$0
>fc5e	01					.byte 	1     ; *** Load Float -0.039052 ***
>fc5f	6d fd f4 9f				.dword 	$9ff4fd6d
>fc63	7c 80					.byte 	$7c,$80
>fc65	2f					.byte 	$2f   ; *** Command / ***
>fc66	01					.byte 	1     ; *** Load Float -1460.6166137457747 ***
>fc67	4c bb 93 b6				.dword 	$b693bb4c
>fc6b	8b 80					.byte 	$8b,$80
>fc6d	3d					.byte 	$3d   ; *** Command = ***
>fc6e	01					.byte 	1     ; *** Load Float 1.292822 ***
>fc6f	f8 30 7b a5				.dword 	$a57b30f8
>fc73	81 00					.byte 	$81,$0
>fc75	01					.byte 	1     ; *** Load Float 2.9226157494122165e-14 ***
>fc76	29 77 9f 83				.dword 	$839f7729
>fc7a	54 00					.byte 	$54,$0
>fc7c	2f					.byte 	$2f   ; *** Command / ***
>fc7d	01					.byte 	1     ; *** Load Float 44235100021616.13 ***
>fc7e	b1 25 ed a0				.dword 	$a0ed25b1
>fc82	ae 00					.byte 	$ae,$0
>fc84	3d					.byte 	$3d   ; *** Command = ***
>fc85	01					.byte 	1     ; *** Load Float 3.086063 ***
>fc86	62 0e 82 c5				.dword 	$c5820e62
>fc8a	82 00					.byte 	$82,$0
>fc8c	01					.byte 	1     ; *** Load Float 7.0 ***
>fc8d	00 00 00 e0				.dword 	$e0000000
>fc91	83 00					.byte 	$83,$0
>fc93	7e					.byte 	$7e   ; *** Command ~ ***
>fc94	01					.byte 	1     ; *** Load Float -1 ***
>fc95	00 00 00 80				.dword 	$80000000
>fc99	81 80					.byte 	$81,$80
>fc9b	3d					.byte 	$3d   ; *** Command = ***
>fc9c	01					.byte 	1     ; *** Load Float 4.0 ***
>fc9d	00 00 00 80				.dword 	$80000000
>fca1	83 00					.byte 	$83,$0
>fca3	01					.byte 	1     ; *** Load Float 0.000111688720703125 ***
>fca4	e3 6c 3a ea				.dword 	$ea3a6ce3
>fca8	73 00					.byte 	$73,$0
>fcaa	2d					.byte 	$2d   ; *** Command - ***
>fcab	01					.byte 	1     ; *** Load Float 3.999888311279297 ***
>fcac	8b 2b fe ff				.dword 	$fffe2b8b
>fcb0	82 00					.byte 	$82,$0
>fcb2	3d					.byte 	$3d   ; *** Command = ***
>fcb3	01					.byte 	1     ; *** Load Float 0.69968 ***
>fcb4	7d 3a 1e b3				.dword 	$b31e3a7d
>fcb8	80 00					.byte 	$80,$0
>fcba	01					.byte 	1     ; *** Load Float 9.861915 ***
>fcbb	62 67 ca 9d				.dword 	$9dca6762
>fcbf	84 00					.byte 	$84,$0
>fcc1	2f					.byte 	$2f   ; *** Command / ***
>fcc2	01					.byte 	1     ; *** Load Float 0.07094768105383184 ***
>fcc3	8e 04 4d 91				.dword 	$914d048e
>fcc7	7d 00					.byte 	$7d,$0
>fcc9	3d					.byte 	$3d   ; *** Command = ***
>fcca	01					.byte 	1     ; *** Load Float 163877.486592 ***
>fccb	24 5f 09 a0				.dword 	$a0095f24
>fccf	92 00					.byte 	$92,$0
>fcd1	01					.byte 	1     ; *** Load Float -84332014084837.88 ***
>fcd2	7c 27 66 99				.dword 	$9966277c
>fcd6	af 80					.byte 	$af,$80
>fcd8	2b					.byte 	$2b   ; *** Command + ***
>fcd9	01					.byte 	1     ; *** Load Float -84332013920960.39 ***
>fcda	77 27 66 99				.dword 	$99662777
>fcde	af 80					.byte 	$af,$80
>fce0	3d					.byte 	$3d   ; *** Command = ***
>fce1	01					.byte 	1     ; *** Load Float 8272691127.648256 ***
>fce2	db 9f 8b f6				.dword 	$f68b9fdb
>fce6	a1 00					.byte 	$a1,$0
>fce8	01					.byte 	1     ; *** Load Float -19.0 ***
>fce9	00 00 00 98				.dword 	$98000000
>fced	85 80					.byte 	$85,$80
>fcef	2f					.byte 	$2f   ; *** Command / ***
>fcf0	01					.byte 	1     ; *** Load Float -435404796.1920135 ***
>fcf1	e1 ff 9d cf				.dword 	$cf9dffe1
>fcf5	9d 80					.byte 	$9d,$80
>fcf7	3d					.byte 	$3d   ; *** Command = ***
>fcf8	01					.byte 	1     ; *** Load Float 290.12 ***
>fcf9	28 5c 0f 91				.dword 	$910f5c28
>fcfd	89 00					.byte 	$89,$0
>fcff	01					.byte 	1     ; *** Load Float -89845.53062399999 ***
>fd00	eb c3 7a af				.dword 	$af7ac3eb
>fd04	91 80					.byte 	$91,$80
>fd06	2f					.byte 	$2f   ; *** Command / ***
>fd07	01					.byte 	1     ; *** Load Float -0.003229097741257056 ***
>fd08	31 45 9f d3				.dword 	$d39f4531
>fd0c	78 80					.byte 	$78,$80
>fd0e	3d					.byte 	$3d   ; *** Command = ***
>fd0f	01					.byte 	1     ; *** Load Float 0.996896 ***
>fd10	85 93 34 ff				.dword 	$ff349385
>fd14	80 00					.byte 	$80,$0
>fd16	01					.byte 	1     ; *** Load Float -5.86590576171875e-06 ***
>fd17	2f bf d3 c4				.dword 	$c4d3bf2f
>fd1b	6f 80					.byte 	$6f,$80
>fd1d	2f					.byte 	$2f   ; *** Command / ***
>fd1e	01					.byte 	1     ; *** Load Float -169947.49668598542 ***
>fd1f	c9 df f6 a5				.dword 	$a5f6dfc9
>fd23	92 80					.byte 	$92,$80
>fd25	3d					.byte 	$3d   ; *** Command = ***
>fd26	01					.byte 	1     ; *** Load Float 9.188442 ***
>fd27	c2 db 03 93				.dword 	$9303dbc2
>fd2b	84 00					.byte 	$84,$0
>fd2d	01					.byte 	1     ; *** Load Float -7.45483636856079e-08 ***
>fd2e	77 65 17 a0				.dword 	$a0176577
>fd32	69 80					.byte 	$69,$80
>fd34	2a					.byte 	$2a   ; *** Command * ***
>fd35	01					.byte 	1     ; *** Load Float -6.849833159201145e-07 ***
>fd36	ee b1 df b7				.dword 	$b7dfb1ee
>fd3a	6c 80					.byte 	$6c,$80
>fd3c	3d					.byte 	$3d   ; *** Command = ***
>fd3d	01					.byte 	1     ; *** Load Float -24287181065.4208 ***
>fd3e	21 1f f4 b4				.dword 	$b4f41f21
>fd42	a3 80					.byte 	$a3,$80
>fd44	01					.byte 	1     ; *** Load Float -24287181065.4208 ***
>fd45	21 1f f4 b4				.dword 	$b4f41f21
>fd49	a3 80					.byte 	$a3,$80
>fd4b	2f					.byte 	$2f   ; *** Command / ***
>fd4c	01					.byte 	1     ; *** Load Float 1.0 ***
>fd4d	00 00 00 80				.dword 	$80000000
>fd51	81 00					.byte 	$81,$0
>fd53	3d					.byte 	$3d   ; *** Command = ***
>fd54	01					.byte 	1     ; *** Load Float -14.0 ***
>fd55	00 00 00 e0				.dword 	$e0000000
>fd59	84 80					.byte 	$84,$80
>fd5b	01					.byte 	1     ; *** Load Float 842.65 ***
>fd5c	99 99 a9 d2				.dword 	$d2a99999
>fd60	8a 00					.byte 	$8a,$0
>fd62	7e					.byte 	$7e   ; *** Command ~ ***
>fd63	01					.byte 	1     ; *** Load Float -1 ***
>fd64	00 00 00 80				.dword 	$80000000
>fd68	81 80					.byte 	$81,$80
>fd6a	3d					.byte 	$3d   ; *** Command = ***
>fd6b	01					.byte 	1     ; *** Load Float 9.012346 ***
>fd6c	b8 91 32 90				.dword 	$903291b8
>fd70	84 00					.byte 	$84,$0
>fd72	01					.byte 	1     ; *** Load Float 867.33 ***
>fd73	b8 1e d5 d8				.dword 	$d8d51eb8
>fd77	8a 00					.byte 	$8a,$0
>fd79	2d					.byte 	$2d   ; *** Command - ***
>fd7a	01					.byte 	1     ; *** Load Float -858.3176540000001 ***
>fd7b	71 54 94 d6				.dword 	$d6945471
>fd7f	8a 80					.byte 	$8a,$80
>fd81	3d					.byte 	$3d   ; *** Command = ***
>fd82	01					.byte 	1     ; *** Load Float 2.0454823970794678e-08 ***
>fd83	33 a2 b4 af				.dword 	$afb4a233
>fd87	67 00					.byte 	$67,$0
>fd89	01					.byte 	1     ; *** Load Float 2.0454823970794678e-08 ***
>fd8a	33 a2 b4 af				.dword 	$afb4a233
>fd8e	67 00					.byte 	$67,$0
>fd90	2d					.byte 	$2d   ; *** Command - ***
>fd91	01					.byte 	1     ; *** Load Float 0.0 ***
>fd92	00 00 00 00				.dword 	$0
>fd96	80 40					.byte 	$80,$40
>fd98	3d					.byte 	$3d   ; *** Command = ***
>fd99	01					.byte 	1     ; *** Load Float 848.44 ***
>fd9a	f5 28 1c d4				.dword 	$d41c28f5
>fd9e	8a 00					.byte 	$8a,$0
>fda0	01					.byte 	1     ; *** Load Float -18.0 ***
>fda1	00 00 00 90				.dword 	$90000000
>fda5	85 80					.byte 	$85,$80
>fda7	7e					.byte 	$7e   ; *** Command ~ ***
>fda8	01					.byte 	1     ; *** Load Float 1 ***
>fda9	00 00 00 80				.dword 	$80000000
>fdad	81 00					.byte 	$81,$0
>fdaf	3d					.byte 	$3d   ; *** Command = ***
>fdb0	01					.byte 	1     ; *** Load Float 13.0 ***
>fdb1	00 00 00 d0				.dword 	$d0000000
>fdb5	84 00					.byte 	$84,$0
>fdb7	01					.byte 	1     ; *** Load Float -19.0 ***
>fdb8	00 00 00 98				.dword 	$98000000
>fdbc	85 80					.byte 	$85,$80
>fdbe	2a					.byte 	$2a   ; *** Command * ***
>fdbf	01					.byte 	1     ; *** Load Float -247.0 ***
>fdc0	00 00 00 f7				.dword 	$f7000000
>fdc4	88 80					.byte 	$88,$80
>fdc6	3d					.byte 	$3d   ; *** Command = ***
>fdc7	01					.byte 	1	; *** Load Integer 99999 ***
>fdc8	9f 86 01 00				.dword 	$1869f
>fdcc	00 01					.byte 	0,$01

;******  Return to file: testing/fptest.asm

>fdce	00						.byte 	0

;******  Return to file: basic.asm

>fffa	0f eb						.word	NMIHandler
>fffc	fc ea						.word 	StartROM
>fffe	74 a1						.word 	TIM_BreakVector

;******  End of listing
