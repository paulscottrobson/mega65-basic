
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q --m4510 -D CPU=4510 -D INTERFACE=2 -b -L rom.lst -o rom.bin basic.asm
; Tue Aug 13 15:51:36 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=4510					CPU=4510
=2					INTERFACE=2

;******  Processing input file: basic.asm

.0000	ea		nop				nop

;******  Processing file: data.asm

>0010					A_Mantissa	.dword ?						; floating point registers
>0014					A_Exponent	.byte ?							; showab.py is dependent on these being at $10,$18
>0015					A_Sign 		.byte ?
>0016					A_Zero 		.byte ?
>0017					A_Type 		.byte ?
>0018					B_Mantissa	.dword ?
>001c					B_Exponent	.byte ?
>001d					B_Sign 		.byte ?
>001e					B_Zero 		.byte ?
>001f					B_Type 		.byte ?
=$00					Type_Integer = $00 							; type IDs, not tested directly.
=$80					Type_Float = $80
=$40					Type_String = $40
>0020					zTemp1:		.word ?							; temporary pointers
>0022					zTemp2:		.word ?
>0024					zTemp3:		.word ?
>0026					zLTemp1:	.dword ?						; long word (used in multiply)
>002a					zGenPtr:	.word ? 						; general pointer.
>0300					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>0302					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>0304					Tim_SR:		.byte ? 						; Processor Status
>0305					Tim_A:		.byte ? 						; Processor Registers
>0306					Tim_X:		.byte ?
>0307					Tim_Y:		.byte ?
>0308					Tim_Z:		.byte ?
>0309					Tim_SP:		.byte ?							; Stack Pointer

;******  Return to file: basic.asm


;******  Processing file: interface/interface_mega65.asm

=80					IF_Width 	= 80 							; characters across
=25					IF_Height 	= 25 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line
=6					IF_XPos 	= 6 							; current position, horizontal.
=8					IF_FarPtr 	= 8 							; far pointer (4 bytes)
=$1000					IF_Screen = $1000							; 2k screen RAM here
=$800					IF_CharSet = $800							; 2k character set (0-7F) here
.a000					IF_Home:
.a000	48		pha				pha 								; reset cursor position
.a001	a9 00		lda #$00			lda 	#IF_Screen & $FF
.a003	85 04		sta $04				sta 	IF_Pos
.a005	a9 10		lda #$10			lda 	#IF_Screen >> 8
.a007	85 05		sta $05				sta 	IF_Pos+1
.a009	a9 00		lda #$00			lda 	#0
.a00b	85 06		sta $06				sta 	IF_XPos
.a00d	68		pla				pla
.a00e	60		rts				rts
.a00f					IF_NewLine:
.a00f	48		pha				pha
.a010	a9 00		lda #$00			lda 	#0 							; back to start of line
.a012	85 06		sta $06				sta 	IF_XPos
.a014	18		clc				clc 								; down one line
.a015	a5 04		lda $04				lda 	IF_Pos
.a017	69 50		adc #$50			adc 	#80
.a019	85 04		sta $04				sta 	IF_Pos
.a01b	90 02		bcc $a01f			bcc 	_IF_NoCarry 				; carry through.
.a01d	e6 05		inc $05				inc 	IF_Pos+1
.a01f					_IF_NoCarry:
.a01f	68		pla				pla
.a020	60		rts				rts
.a021					IF_Read:
.a021	5a		phy				phy 								; save current Y
.a022	a4 06		ldy $06				ldy 	IF_XPos 					; read character at current position
.a024	b1 04		lda ($04),y			lda 	(IF_Pos),y
.a026	e6 06		inc $06				inc 	IF_XPos 					; step right.
.a028	7a		ply				ply									; restore Y
.a029	60		rts				rts
.a02a					IF_Write:
.a02a	5a		phy				phy 								; save current Y
.a02b	a4 06		ldy $06				ldy 	IF_XPos 					; write character at current position
.a02d	91 04		sta ($04),y			sta 	(IF_Pos),y
.a02f	e6 06		inc $06				inc 	IF_XPos 					; step right.
.a031	7a		ply				ply									; restore Y
.a032	60		rts				rts
.a033					IF_LeftOne:
.a033	c6 06		dec $06				dec 	IF_XPos
.a035	60		rts				rts
.a036					IF_CheckBreak:
.a036	db		phz				phz
.a037	20 7f a0	jsr $a07f			jsr 	IF_SetupKeyAddress 			; point to keyboard
.a03a	e6 08		inc $08				inc 	IF_FarPtr 					; point to modifiers.
.a03c	ea		nop				nop 								; read modifiers.
.a03d	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.a03f	fb		plz				plz 								; restore Z
.a040	29 05		and #$05			and 	#5							; break is LeftShift+Ctrl
.a042	c9 05		cmp #$05			cmp 	#5
.a044	f0 02		beq $a048			beq 	_IF_CBExit
.a046	a9 00		lda #$00			lda 	#0
.a048					_IF_CBExit:
.a048	c9 00		cmp #$00			cmp 	#0
.a04a	60		rts				rts
.a04b					IF_GetKey:
.a04b	db		phz				phz
.a04c	20 7f a0	jsr $a07f			jsr 	IF_SetupKeyAddress
.a04f	ea		nop				nop 								; read keyboard
.a050	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.a052	c9 14		cmp #$14			cmp 	#20
.a054	d0 02		bne $a058			bne 	_KMNo
.a056	a9 08		lda #$08			lda 	#"H"-64
.a058					_KMNo:
.a058	c9 91		cmp #$91			cmp 	#145
.a05a	d0 02		bne $a05e			bne 	_KMNo
.a05c	a9 17		lda #$17			lda 	#"W"-64
.a05e					_KMNo:
.a05e	c9 11		cmp #$11			cmp 	#17
.a060	d0 02		bne $a064			bne 	_KMNo
.a062	a9 13		lda #$13			lda 	#"S"-64
.a064					_KMNo:
.a064	c9 9d		cmp #$9d			cmp 	#157
.a066	d0 02		bne $a06a			bne 	_KMNo
.a068	a9 01		lda #$01			lda 	#"A"-64
.a06a					_KMNo:
.a06a	c9 1d		cmp #$1d			cmp 	#29
.a06c	d0 02		bne $a070			bne 	_KMNo
.a06e	a9 04		lda #$04			lda 	#"D"-64
.a070					_KMNo:
.a070	c9 00		cmp #$00			cmp 	#0
.a072	f0 07		beq $a07b			beq 	_IFGKEmpty
.a074	48		pha				pha
.a075	a9 00		lda #$00			lda 	#0
.a077	ea		nop				nop
.a078	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a07a	68		pla				pla
.a07b					_IFGKEmpty:
.a07b	fb		plz				plz
.a07c	c9 00		cmp #$00			cmp 	#0 							; set Z
.a07e	60		rts				rts
.a07f					IF_SetupKeyAddress:
.a07f	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to read keyboard.
.a081	85 0b		sta $0b				sta 	IF_FarPtr+3
.a083	a9 fd		lda #$fd			lda 	#$FD
.a085	85 0a		sta $0a				sta 	IF_FarPtr+2
.a087	a9 36		lda #$36			lda 	#$36
.a089	85 09		sta $09				sta 	IF_FarPtr+1
.a08b	a9 10		lda #$10			lda 	#$10
.a08d	85 08		sta $08				sta 	IF_FarPtr+0
.a08f	a3 00		ldz #$00			ldz 	#0
.a091	60		rts				rts
.a092					IF_Reset:
.a092	48		pha				pha 								; save registers
.a093	da		phx				phx
.a094	5a		phy				phy
.a095	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to video system.
.a097	85 0b		sta $0b				sta 	IF_FarPtr+3
.a099	a9 fd		lda #$fd			lda 	#$FD
.a09b	85 0a		sta $0a				sta 	IF_FarPtr+2
.a09d	a9 30		lda #$30			lda 	#$30
.a09f	85 09		sta $09				sta 	IF_FarPtr+1
.a0a1	a9 00		lda #$00			lda 	#$00
.a0a3	85 08		sta $08				sta 	IF_FarPtr+0
.a0a5	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.a0a7	a9 47		lda #$47			lda 	#$47
.a0a9	ea		nop				nop
.a0aa	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0ac	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.a0ae	a9 53		lda #$53			lda 	#$53
.a0b0	ea		nop				nop
.a0b1	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0b3	a3 30		ldz #$30			ldz 	#$30 						; address already set up
.a0b5	a9 40		lda #$40			lda 	#$40
.a0b7	ea		nop				nop
.a0b8	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0ba	a3 31		ldz #$31			ldz 	#$31 						; address already set up
.a0bc	a9 c0		lda #$c0			lda 	#$80+$40
.a0be	ea		nop				nop
.a0bf	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0c1	a3 20		ldz #$20			ldz 	#$20 						; address already set up
.a0c3	a9 00		lda #$00			lda 	#0
.a0c5	ea		nop				nop
.a0c6	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0c8	a3 21		ldz #$21			ldz 	#$21 						; address already set up
.a0ca	a9 00		lda #$00			lda 	#0
.a0cc	ea		nop				nop
.a0cd	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0cf	a3 54		ldz #$54			ldz 	#$54 						; address already set up
.a0d1	a9 40		lda #$40			lda 	#$40
.a0d3	ea		nop				nop
.a0d4	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0d6	a3 01		ldz #$01			ldz 	#$01 						; address already set up
.a0d8	a9 ff		lda #$ff			lda 	#$FF
.a0da	ea		nop				nop
.a0db	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0dd	a3 00		ldz #$00			ldz 	#$00 						; address already set up
.a0df	a9 ff		lda #$ff			lda 	#$FF
.a0e1	ea		nop				nop
.a0e2	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0e4	a3 16		ldz #$16			ldz 	#$16 						; address already set up
.a0e6	a9 cc		lda #$cc			lda 	#$CC
.a0e8	ea		nop				nop
.a0e9	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0eb	a3 18		ldz #$18			ldz 	#$18 						; address already set up
.a0ed	a9 42		lda #$42			lda 	#$42
.a0ef	ea		nop				nop
.a0f0	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0f2	a3 11		ldz #$11			ldz 	#$11 						; address already set up
.a0f4	a9 1b		lda #$1b			lda 	#$1B
.a0f6	ea		nop				nop
.a0f7	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0f9	a9 00		lda #$00			lda 	#$00						; colour RAM at $1F800-1FFFF (2kb)
.a0fb	85 0b		sta $0b				sta 	IF_FarPtr+3
.a0fd	a9 01		lda #$01			lda 	#$01
.a0ff	85 0a		sta $0a				sta 	IF_FarPtr+2
.a101	a9 f8		lda #$f8			lda 	#$F8
.a103	85 09		sta $09				sta 	IF_FarPtr+1
.a105	a9 00		lda #$00			lda 	#$00
.a107	85 08		sta $08				sta 	IF_FarPtr+0
.a109	a3 00		ldz #$00			ldz 	#0
.a10b					_EXTClearColorRam:
.a10b	a9 05		lda #$05			lda 	#5							; fill that with this colour.
.a10d	ea		nop				nop
.a10e	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a110	3b		dez				dez
.a111	d0 f8		bne $a10b			bne 	_EXTClearColorRam
.a113	e6 09		inc $09				inc 	IF_FarPtr+1
.a115	d0 f4		bne $a10b			bne 	_EXTClearColorRam
.a117	a2 00		ldx #$00			ldx 	#0 							; copy PET Font into memory.
.a119					_EXTCopyCBMFont:
.a119	bd 5a a1	lda $a15a,x			lda 	IF_CBMFont,x 				; +$800 uses the lower case c/set
.a11c	9d 00 08	sta $0800,x			sta 	IF_CharSet,x
.a11f	49 ff		eor #$ff			eor 	#$FF
.a121	9d 00 0c	sta $0c00,x			sta 	IF_CharSet+$400,x
.a124	bd 5a a2	lda $a25a,x			lda 	IF_CBMFont+$100,x
.a127	9d 00 09	sta $0900,x			sta 	IF_CharSet+$100,x
.a12a	49 ff		eor #$ff			eor 	#$FF
.a12c	9d 00 0d	sta $0d00,x			sta 	IF_CharSet+$500,x
.a12f	bd 5a a3	lda $a35a,x			lda 	IF_CBMFont+$200,x
.a132	9d 00 0a	sta $0a00,x			sta 	IF_CharSet+$200,x
.a135	49 ff		eor #$ff			eor 	#$FF
.a137	9d 00 0e	sta $0e00,x			sta 	IF_CharSet+$600,x
.a13a	bd 5a a4	lda $a45a,x			lda 	IF_CBMFont+$300,x
.a13d	9d 00 0b	sta $0b00,x			sta 	IF_CharSet+$300,x
.a140	49 ff		eor #$ff			eor 	#$FF
.a142	9d 00 0f	sta $0f00,x			sta 	IF_CharSet+$700,x
.a145	ca		dex				dex
.a146	d0 d1		bne $a119			bne 	_EXTCopyCBMFont
.a148	a9 3b		lda #$3b			lda 	#$3F-4  					; puts ROM back in the map (the -4)
.a14a	85 01		sta $01				sta 	$01
.a14c	a9 00		lda #$00			lda 	#$00						; do not map bytes 0000-7FFF
.a14e	a2 00		ldx #$00			ldx 	#$00
.a150	a0 00		ldy #$00			ldy 	#$00 						; 8000-FFFF offset by $2000
.a152	a3 f2		ldz #$f2			ldz 	#$F2
.a154	5c		map				map
.a155	ea		nop				eom
.a156	7a		ply				ply 								; restore and exit.
.a157	fa		plx				plx
.a158	68		pla				pla
.a159	60		rts				rts
.a15a					IF_CBMFont:
>a15a	1c 22 4a 56 4c 20 1e 00				.binary "pet-font.bin"
>a162	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>a172	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>a182	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a192	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>a1a2	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a1b2	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a1c2	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>a1d2	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>a1e2	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>a1f2	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a202	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>a212	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>a222	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>a232	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a242	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>a252	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>a262	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a272	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a282	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a292	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>a2a2	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>a2b2	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a2c2	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a2d2	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a2e2	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>a2f2	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>a302	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>a312	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a322	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>a332	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>a342	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a352	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>a362	08 1c 3e 7f 7f 1c 3e 00 10 10 10 10 10 10 10 10
>a372	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>a382	00 ff 00 00 00 00 00 00 00 00 00 00 00 ff 00 00
>a392	20 20 20 20 20 20 20 20 04 04 04 04 04 04 04 04
>a3a2	00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>a3b2	08 08 08 10 e0 00 00 00 80 80 80 80 80 80 80 ff
>a3c2	80 40 20 10 08 04 02 01 01 02 04 08 10 20 40 80
>a3d2	ff 80 80 80 80 80 80 80 ff 01 01 01 01 01 01 01
>a3e2	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 00 ff 00
>a3f2	36 7f 7f 7f 3e 1c 08 00 40 40 40 40 40 40 40 40
>a402	00 00 00 00 03 04 08 08 81 42 24 18 18 24 42 81
>a412	00 3c 42 42 42 42 3c 00 08 1c 2a 77 2a 08 08 00
>a422	02 02 02 02 02 02 02 02 08 1c 3e 7f 3e 1c 08 00
>a432	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>a442	08 08 08 08 08 08 08 08 00 00 01 3e 54 14 14 00
>a452	ff 7f 3f 1f 0f 07 03 01 00 00 00 00 00 00 00 00
>a462	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>a472	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>a482	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>a492	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>a4a2	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>a4b2	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>a4c2	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>a4d2	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>a4e2	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>a4f2	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>a502	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>a512	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>a522	00 00 00 00 00 ff ff ff 01 01 01 01 01 01 01 ff
>a532	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>a542	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>a552	f0 f0 f0 f0 0f 0f 0f 0f 1c 22 4a 56 4c 20 1e 00
>a562	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>a572	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>a582	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a592	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>a5a2	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a5b2	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a5c2	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>a5d2	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>a5e2	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>a5f2	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a602	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>a612	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>a622	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>a632	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a642	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>a652	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>a662	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a672	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a682	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a692	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>a6a2	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>a6b2	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a6c2	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a6d2	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a6e2	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>a6f2	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>a702	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>a712	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a722	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>a732	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>a742	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a752	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>a762	00 00 38 04 3c 44 3a 00 40 40 5c 62 42 62 5c 00
>a772	00 00 3c 42 40 42 3c 00 02 02 3a 46 42 46 3a 00
>a782	00 00 3c 42 7e 40 3c 00 0c 12 10 7c 10 10 10 00
>a792	00 00 3a 46 46 3a 02 3c 40 40 5c 62 42 42 42 00
>a7a2	08 00 18 08 08 08 1c 00 04 00 0c 04 04 04 44 38
>a7b2	40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>a7c2	00 00 76 49 49 49 49 00 00 00 5c 62 42 42 42 00
>a7d2	00 00 3c 42 42 42 3c 00 00 00 5c 62 62 5c 40 40
>a7e2	00 00 3a 46 46 3a 02 02 00 00 5c 62 40 40 40 00
>a7f2	00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 12 0c 00
>a802	00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>a812	00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>a822	00 00 42 42 46 3a 02 3c 00 00 7e 04 18 20 7e 00
>a832	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>a842	08 08 08 08 08 08 08 08 cc cc 33 33 cc cc 33 33
>a852	cc 66 33 99 cc 66 33 99 00 00 00 00 00 00 00 00
>a862	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>a872	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>a882	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>a892	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>a8a2	99 33 66 cc 99 33 66 cc 03 03 03 03 03 03 03 03
>a8b2	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>a8c2	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>a8d2	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>a8e2	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>a8f2	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>a902	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>a912	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>a922	00 00 00 00 00 ff ff ff 01 02 44 48 50 60 40 00
>a932	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>a942	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>a952	f0 f0 f0 f0 0f 0f 0f 0f

;******  Return to file: basic.asm


;******  Processing file: interface/interface_tools.asm

=$200					IFT_XCursor = $200								; current logical position on screen
=$201					IFT_YCursor = $201
=$202					IFT_Buffer = $202 								; scroll copy buffer.
=$280					IFT_LineBuffer = $280 							; line input buffer.
.a95a					IFT_ClearScreen:
.a95a	48		pha				pha
.a95b	da		phx				phx
.a95c	5a		phy				phy
.a95d	20 00 a0	jsr $a000			jsr 	IF_Home 					; home cursor
.a960	a2 19		ldx #$19			ldx 	#IF_Height 					; this many lines.
.a962					_IFT_CS0:
.a962	a0 50		ldy #$50			ldy 	#IF_Width 					; this many chars/line
.a964					_IFT_CS1:
.a964	a9 20		lda #$20			lda 	#' '						; clear line.
.a966	20 2a a0	jsr $a02a			jsr 	IF_Write
.a969	88		dey				dey
.a96a	d0 f8		bne $a964			bne 	_IFT_CS1
.a96c	20 0f a0	jsr $a00f			jsr 	IF_NewLine 					; next line down
.a96f	ca		dex				dex
.a970	d0 f0		bne $a962			bne 	_IFT_CS0
.a972	7a		ply				ply
.a973	fa		plx				plx
.a974	68		pla				pla
.a975					IFT_HomeCursor:
.a975	48		pha				pha
.a976	20 00 a0	jsr $a000			jsr 	IF_Home
.a979	a9 00		lda #$00			lda 	#0
.a97b	8d 00 02	sta $0200			sta 	IFT_XCursor
.a97e	8d 01 02	sta $0201			sta 	IFT_YCursor
.a981	68		pla				pla
.a982	60		rts				rts
.a983					IFT_UpLine:
.a983	48		pha				pha
.a984	ad 01 02	lda $0201			lda  	IFT_YCursor 				; get Y
.a987	3a		dec a				dec 	a 							; line above
.a988	30 03		bmi $a98d			bmi 	_IFTULExit 					; too far, abort
.a98a	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos					; set to that line.
.a98d					_IFTULExit:
.a98d	68		pla				pla
.a98e	60		rts				rts
.a98f					IFT_PrintCharacter:
.a98f	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.a991	f0 18		beq $a9ab			beq 	IFT_NewLine
.a993	48		pha				pha
.a994	20 c3 a9	jsr $a9c3			jsr 	IFT_UpperCase 				; make upper case
.a997	29 3f		and #$3f			and 	#63 						; make 6 bit PETSCII
.a999	20 2a a0	jsr $a02a			jsr 	IF_Write 					; write out.
.a99c	ee 00 02	inc $0200			inc 	IFT_XCursor 				; bump x cursor
.a99f	ad 00 02	lda $0200			lda 	IFT_XCursor 				; reached RHS ?
.a9a2	c9 50		cmp #$50			cmp 	#IF_Width
.a9a4	d0 03		bne $a9a9			bne 	_IFT_PCNotEOL
.a9a6	20 ab a9	jsr $a9ab			jsr 	IFT_NewLine 				; if so do new line.
.a9a9					_IFT_PCNotEOL:
.a9a9	68		pla				pla
.a9aa	60		rts				rts
.a9ab					IFT_NewLine:
.a9ab	48		pha				pha
.a9ac	20 0f a0	jsr $a00f			jsr 	IF_NewLine 					; new line on actual screen.
.a9af	a9 00		lda #$00			lda 	#0 							; reset x position
.a9b1	8d 00 02	sta $0200			sta 	IFT_XCursor
.a9b4	ee 01 02	inc $0201			inc 	IFT_YCursor 				; move down.
.a9b7	ad 01 02	lda $0201			lda 	IFT_YCursor
.a9ba	c9 19		cmp #$19			cmp 	#IF_Height 					; reached bottom.
.a9bc	d0 03		bne $a9c1			bne 	_IFT_NL_NotEOS
.a9be	20 ce a9	jsr $a9ce			jsr 	IFT_Scroll 					; scroll screen up.
.a9c1					_IFT_NL_NotEOS:
.a9c1	68		pla				pla
.a9c2	60		rts				rts
.a9c3					IFT_UpperCase:
.a9c3	c9 61		cmp #$61			cmp 	#"a"
.a9c5	90 06		bcc $a9cd			bcc 	_IFT_UCExit
.a9c7	c9 7b		cmp #$7b			cmp 	#"z"+1
.a9c9	b0 02		bcs $a9cd			bcs 	_IFT_UCExit
.a9cb	49 20		eor #$20			eor 	#$20
.a9cd					_IFT_UCExit:
.a9cd	60		rts				rts
.a9ce					IFT_Scroll:
.a9ce	48		pha				pha 								; save AXY
.a9cf	da		phx				phx
.a9d0	5a		phy				phy
.a9d1	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.a9d3					_IFT_SLoop:
.a9d3	20 f3 a9	jsr $a9f3			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.a9d6	e8		inx				inx
.a9d7	e0 18		cpx #$18			cpx 	#IF_Height-1				; do whole screen
.a9d9	d0 f8		bne $a9d3			bne 	_IFT_SLoop
.a9db	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.a9dd	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.a9e0	a2 50		ldx #$50			ldx 	#IF_Width 					; blank line
.a9e2					_IFT_SBlank:
.a9e2	a9 20		lda #$20			lda 	#32
.a9e4	20 2a a0	jsr $a02a			jsr 	IF_Write
.a9e7	ca		dex				dex
.a9e8	d0 f8		bne $a9e2			bne 	_IFT_SBlank
.a9ea	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.a9ec	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.a9ef	7a		ply				ply
.a9f0	fa		plx				plx
.a9f1	68		pla				pla
.a9f2	60		rts				rts
.a9f3					_IFT_ScrollLine:
.a9f3	da		phx				phx
.a9f4	da		phx				phx
.a9f5	8a		txa				txa 								; copy line into buffer.
.a9f6	1a		inc a				inc 	a 							; next line down.
.a9f7	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.a9fa	a2 00		ldx #$00			ldx 	#0
.a9fc					_IFTScrollCopy1:
.a9fc	20 21 a0	jsr $a021			jsr 	IF_Read
.a9ff	9d 02 02	sta $0202,x			sta 	IFT_Buffer,x
.aa02	e8		inx				inx
.aa03	e0 50		cpx #$50			cpx 	#IF_Width
.aa05	d0 f5		bne $a9fc			bne 	_IFTScrollCopy1
.aa07	68		pla				pla
.aa08	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.aa0b	a2 00		ldx #$00			ldx 	#0
.aa0d					_IFTScrollCopy2:
.aa0d	bd 02 02	lda $0202,x			lda 	IFT_Buffer,x
.aa10	20 2a a0	jsr $a02a			jsr 	IF_Write
.aa13	e8		inx				inx
.aa14	e0 50		cpx #$50			cpx 	#IF_Width
.aa16	d0 f5		bne $aa0d			bne 	_IFTScrollCopy2
.aa18	fa		plx				plx
.aa19	60		rts				rts
.aa1a					IFT_SetYPos:
.aa1a	48		pha				pha
.aa1b	da		phx				phx
.aa1c	aa		tax				tax
.aa1d	20 75 a9	jsr $a975			jsr 	IFT_HomeCursor
.aa20	e0 00		cpx #$00			cpx 	#0
.aa22	f0 09		beq $aa2d			beq 	_IFT_MOAExit
.aa24					_IFT_MOALoop:
.aa24	20 0f a0	jsr $a00f			jsr 	IF_NewLine
.aa27	ee 01 02	inc $0201			inc 	IFT_YCursor
.aa2a	ca		dex				dex
.aa2b	d0 f7		bne $aa24			bne		_IFT_MOALoop
.aa2d					_IFT_MOAExit:
.aa2d	fa		plx				plx
.aa2e	68		pla				pla
.aa2f	60		rts				rts
.aa30					IFT_GetKeyCursor:
.aa30	20 38 aa	jsr $aa38			jsr 	_IFT_FlipCursor 			; reverse current
.aa33					_IFT_GKCWait:
.aa33	20 4b a0	jsr $a04b			jsr 	IF_GetKey 					; get key
.aa36	f0 fb		beq $aa33			beq 	_IFT_GKCWait
.aa38					_IFT_FlipCursor:
.aa38	48		pha				pha 								; save
.aa39	20 21 a0	jsr $a021			jsr 	IF_Read 					; read
.aa3c	20 33 a0	jsr $a033			jsr 	IF_LeftOne
.aa3f	49 80		eor #$80			eor 	#$80 						; reverse
.aa41	20 2a a0	jsr $a02a			jsr 	IF_Write 					; write
.aa44	20 33 a0	jsr $a033			jsr 	IF_LeftOne
.aa47	68		pla				pla
.aa48	60		rts				rts
.aa49					IFT_ReadLine:
.aa49	48		pha				pha
.aa4a					_IFT_RLLoop:
.aa4a	20 30 aa	jsr $aa30			jsr 	IFT_GetKeyCursor 			; get keystroke
.aa4d	c9 0d		cmp #$0d			cmp 	#13							; return
.aa4f	f0 7d		beq $aace			beq 	_IFT_RLExit
.aa51	c9 20		cmp #$20			cmp 	#32 						; control character
.aa53	90 05		bcc $aa5a			bcc 	_IFT_Control
.aa55	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.aa58	80 f0		bra $aa4a			bra 	_IFT_RLLoop
.aa5a					_IFT_Control:
.aa5a	c9 01		cmp #$01			cmp 	#"A"-64
.aa5c	f0 26		beq $aa84			beq 	_IFT_Left
.aa5e	c9 04		cmp #$04			cmp 	#"D"-64
.aa60	f0 2e		beq $aa90			beq 	_IFT_Right
.aa62	c9 17		cmp #$17			cmp 	#"W"-64
.aa64	f0 36		beq $aa9c			beq 	_IFT_Up
.aa66	c9 13		cmp #$13			cmp 	#"S"-64
.aa68	f0 3e		beq $aaa8			beq 	_IFT_Down
.aa6a	c9 08		cmp #$08			cmp 	#"H"-64
.aa6c	f0 09		beq $aa77			beq 	_IFT_Backspace
.aa6e	c9 1a		cmp #$1a			cmp 	#"Z"-64
.aa70	d0 d8		bne $aa4a			bne 	_IFT_RLLoop
.aa72	20 5a a9	jsr $a95a			jsr 	IFT_ClearScreen				; clear CTL-Z
.aa75	80 d3		bra $aa4a			bra 	_IFT_RLLoop
.aa77					_IFT_Backspace:
.aa77	ad 00 02	lda $0200			lda 	IFT_XCursor 				; check not start of line.
.aa7a	f0 ce		beq $aa4a			beq 	_IFT_RLLoop
.aa7c	20 33 a0	jsr $a033			jsr 	IF_LeftOne
.aa7f	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.aa81	20 2a a0	jsr $a02a			jsr 	IF_Write
.aa84					_IFT_Left:
.aa84	ce 00 02	dec $0200			dec 	IFT_XCursor 				; left CTL-W
.aa87	10 29		bpl $aab2			bpl 	_IFT_Reposition
.aa89	a9 4f		lda #$4f			lda 	#IF_Width-1
.aa8b					_IFT_SetX:
.aa8b	8d 00 02	sta $0200			sta 	IFT_XCursor
.aa8e	80 22		bra $aab2			bra 	_IFT_Reposition
.aa90					_IFT_Right:
.aa90	ee 00 02	inc $0200			inc 	IFT_XCursor
.aa93	ad 00 02	lda $0200			lda 	IFT_XCursor
.aa96	49 50		eor #$50			eor 	#IF_Width
.aa98	f0 f1		beq $aa8b			beq 	_IFT_SetX
.aa9a	80 16		bra $aab2			bra 	_IFT_Reposition
.aa9c					_IFT_Up:
.aa9c	ce 01 02	dec $0201			dec 	IFT_YCursor
.aa9f	10 11		bpl $aab2			bpl 	_IFT_Reposition
.aaa1	a9 18		lda #$18			lda 	#IF_Height-1
.aaa3					_IFT_SetY:
.aaa3	8d 01 02	sta $0201			sta 	IFT_YCursor
.aaa6	80 0a		bra $aab2			bra 	_IFT_Reposition
.aaa8					_IFT_Down:
.aaa8	ee 01 02	inc $0201			inc 	IFT_YCursor
.aaab	ad 01 02	lda $0201			lda 	IFT_YCursor
.aaae	49 19		eor #$19			eor 	#IF_Height
.aab0	f0 f1		beq $aaa3			beq 	_IFT_SetY
.aab2					_IFT_Reposition:
.aab2	ad 00 02	lda $0200			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.aab5	48		pha				pha
.aab6	ad 01 02	lda $0201			lda 	IFT_YCursor
.aab9	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.aabc	68		pla				pla
.aabd	aa		tax				tax
.aabe	e0 00		cpx #$00			cpx 	#0
.aac0	f0 88		beq $aa4a			beq 	_IFT_RLLoop
.aac2					_IFT_MoveRight:
.aac2	20 21 a0	jsr $a021			jsr 	IF_Read
.aac5	ee 00 02	inc $0200			inc 	IFT_XCursor
.aac8	ca		dex				dex
.aac9	d0 f7		bne $aac2			bne 	_IFT_MoveRight
.aacb	4c 4a aa	jmp $aa4a			jmp 	_IFT_RLLoop
.aace					_IFT_RLExit:
.aace	ad 01 02	lda $0201			lda 	IFT_YCursor 				; go to start of line.
.aad1	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.aad4	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.aad6					_IFT_RLRead:
.aad6	20 21 a0	jsr $a021			jsr 	IF_Read
.aad9	18		clc				clc 								; convert back to ASCII.
.aada	49 20		eor #$20			eor 	#$20
.aadc	69 20		adc #$20			adc 	#$20
.aade	9d 80 02	sta $0280,x			sta 	IFT_LineBuffer,x
.aae1	e8		inx				inx
.aae2	e0 50		cpx #$50			cpx 	#IF_Width
.aae4	d0 f0		bne $aad6			bne 	_IFT_RLRead
.aae6					_IFT_RL_Trim:
.aae6	ca		dex				dex 	 							; previous char
.aae7	30 07		bmi $aaf0			bmi 	_IFT_Found 					; gone too far
.aae9	bd 80 02	lda $0280,x			lda 	IFT_LineBuffer,x			; go back if space
.aaec	c9 20		cmp #$20			cmp 	#" "
.aaee	f0 f6		beq $aae6			beq 	_IFT_RL_Trim
.aaf0					_IFT_Found:
.aaf0	e8		inx				inx 								; forward to non-space
.aaf1	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.aaf3	9d 80 02	sta $0280,x			sta 	IFT_LineBuffer,x
.aaf6	68		pla				pla
.aaf7	a2 80		ldx #$80			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.aaf9	a0 02		ldy #$02			ldy 	#IFT_LineBuffer >> 8
.aafb	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: utility/tim.asm

.aafc					TIM_Error:
.aafc	20 83 a9	jsr $a983			jsr 	IFT_UpLine 					; go up one line.
.aaff	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.ab01	80 02		bra $ab05			bra 	TIM_ShowPrompt
.ab03					TIM_NewCommand:
.ab03	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.ab05					TIM_ShowPrompt:
.ab05	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.ab08	20 49 aa	jsr $aa49			jsr 	IFT_ReadLine	 			; get character, go to next line
.ab0b	20 ab a9	jsr $a9ab			jsr 	IFT_NewLine					; go to next line.
.ab0e	86 20		stx $20				stx 	zTemp1 						; save line read address
.ab10	84 21		sty $21				sty 	zTemp1+1
.ab12	a0 01		ldy #$01			ldy 	#1 							; get first character after the prompt.
.ab14	b1 20		lda ($20),y			lda 	(zTemp1),y
.ab16	c9 52		cmp #$52			cmp 	#"R"						; show registers
.ab18	f0 6e		beq $ab88			beq 	TIM_ShowRegisters
.ab1a	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.ab1c	f0 12		beq $ab30			beq 	TIM_ShowMemory
.ab1e	c9 47		cmp #$47			cmp 	#"G"						; execute
.ab20	f0 49		beq $ab6b			beq 	TIM_Execute
.ab22	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.ab24	f0 07		beq $ab2d			beq 	TIM_GoLoadMemory
.ab26	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.ab28	d0 d2		bne $aafc			bne 	TIM_Error
.ab2a	4c ac ac	jmp $acac			jmp 	TIM_UpdateRegisters
.ab2d					TIM_GoLoadMemory:
.ab2d	4c d7 ac	jmp $acd7			jmp 	TIM_LoadMemory
.ab30					TIM_ShowMemory:
.ab30	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.ab33	b0 c7		bcs $aafc			bcs 	TIM_Error
.ab35	a5 24		lda $24				lda 	zTemp3 						; copy zTemp3 => zTemp2
.ab37	85 22		sta $22				sta 	zTemp2
.ab39	a5 25		lda $25				lda 	zTemp3+1
.ab3b	85 23		sta $23				sta 	zTemp2+1
.ab3d	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.ab40	90 08		bcc $ab4a			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.ab42	a5 22		lda $22				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.ab44	85 24		sta $24				sta 	zTemp3
.ab46	a5 23		lda $23				lda 	zTemp2+1
.ab48	85 25		sta $25				sta 	zTemp3+1
.ab4a					_TIMSM_Start:
.ab4a	20 fd ab	jsr $abfd			jsr 	TIM_WriteLine 				; write one line of hex out
.ab4d	a5 22		lda $22				lda 	zTemp2 						; bump ZTemp2 by 16
.ab4f	18		clc				clc
.ab50	69 10		adc #$10			adc 	#16
.ab52	85 22		sta $22				sta 	zTemp2
.ab54	90 02		bcc $ab58			bcc 	_TIMSM_NoCarry
.ab56	e6 23		inc $23				inc 	zTemp2+1
.ab58					_TIMSM_NoCarry:
.ab58	20 36 a0	jsr $a036			jsr 	IF_CheckBreak 				; check CTL+C
.ab5b	d0 0b		bne $ab68			bne 	_TIMSM_Ends 				; if pressed break out.
.ab5d	38		sec				sec 								; check past the end address in zTemp3
.ab5e	a5 24		lda $24				lda 	zTemp3
.ab60	e5 22		sbc $22				sbc 	zTemp2
.ab62	a5 25		lda $25				lda 	zTemp3+1
.ab64	e5 23		sbc $23				sbc 	zTemp2+1
.ab66	10 e2		bpl $ab4a			bpl 	_TIMSM_Start
.ab68					_TIMSM_Ends:
.ab68	4c 03 ab	jmp $ab03			jmp 	TIM_NewCommand
.ab6b					TIM_Execute:
.ab6b	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; get the execute address
.ab6e	b0 8c		bcs $aafc			bcs 	TIM_Error 					; not legitimate
.ab70	ae 09 03	ldx $0309			ldx 	TIM_SP 						; set up SP
.ab73	9a		txs				txs
.ab74	ad 04 03	lda $0304			lda 	TIM_SR 						; Status for PLP
.ab77	48		pha				pha
.ab78	ad 05 03	lda $0305			lda 	TIM_A 						; restore AXYZ
.ab7b	ae 06 03	ldx $0306			ldx 	TIM_X
.ab7e	ac 07 03	ldy $0307			ldy 	TIM_Y
.ab81	ab 08 03	ldz $0308			ldz 	TIM_Z
.ab84	28		plp				plp 								; and PS Byte.
.ab85	6c 24 00	jmp ($0024)			jmp 	(zTemp3)					; go execute
.ab88					TIM_Start:
.ab88					TIM_ShowRegisters:
.ab88	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.ab8b	8d 03 03	sta $0303			sta 	TIM_IRQ+1
.ab8e	ad ff ff	lda $ffff			lda 	$FFFF
.ab91	8d 02 03	sta $0302			sta 	TIM_IRQ
.ab94	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.ab96					_TIMSR_Text:
.ab96	bd c1 ab	lda $abc1,x			lda 	_TIMSR_Label,x
.ab99	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.ab9c	e8		inx				inx
.ab9d	e0 23		cpx #$23			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.ab9f	d0 f5		bne $ab96			bne 	_TIMSR_Text
.aba1	a2 00		ldx #$00			ldx 	#0 							; output Register Line.
.aba3					_TIMSR_LoopSpace:
.aba3	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.aba5	b0 04		bcs $abab			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.aba7	8a		txa				txa
.aba8	4a		lsr a				lsr 	a
.aba9	b0 05		bcs $abb0			bcs 	_TIMSR_NoSpace
.abab					_TIMSR_Space:
.abab	a9 20		lda #$20			lda 	#" "
.abad	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.abb0					_TIMSR_NoSpace:
.abb0	bd 00 03	lda $0300,x			lda 	TIM_PC,x 					; output hex value.
.abb3	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.abb6	e8		inx				inx
.abb7	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.abb9	d0 e8		bne $aba3			bne 	_TimSR_LoopSpace
.abbb	20 ab a9	jsr $a9ab			jsr 	IFT_NewLine 				; new line
.abbe	4c 03 ab	jmp $ab03			jmp	 	TIM_NewCommand 				; new command.
.abc1					_TIMSR_Label:
>abc1	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR ZR SP",13,".; "
>abc9	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>abd9	52 20 5a 52 20 53 50 0d 2e 3b 20
.abe4					_TIMSR_LabelEnd:
.abe4					TIM_WriteHex:
.abe4	48		pha				pha 								; save A
.abe5	4a		lsr a				lsr 	a 							; shift MSB->LSB
.abe6	4a		lsr a				lsr 	a
.abe7	4a		lsr a				lsr 	a
.abe8	4a		lsr a				lsr 	a
.abe9	20 ed ab	jsr $abed			jsr 	_TIMWH_Nibble 				; print MSB
.abec	68		pla				pla 								; restore and print LSB
.abed					_TIMWH_Nibble:
.abed	48		pha				pha
.abee	29 0f		and #$0f			and 	#15 						; mask out
.abf0	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.abf2	90 02		bcc $abf6			bcc 	_TIMWHNoLetter
.abf4	69 06		adc #$06			adc 	#6
.abf6					_TIMWHNoLetter:
.abf6	69 30		adc #$30			adc 	#48
.abf8	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter 			; print it out.
.abfb	68		pla				pla
.abfc	60		rts				rts
.abfd					TIM_WriteLine:
.abfd	a9 2e		lda #$2e			lda 	#"." 						; prompt
.abff	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.ac02	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.ac04	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.ac07	a5 23		lda $23				lda 	zTemp2+1 					; write address
.ac09	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.ac0c	a5 22		lda $22				lda 	zTemp2
.ac0e	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.ac11	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.ac13					_TIMWL_Loop:
.ac13	a9 20		lda #$20			lda 	#" "
.ac15	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.ac18	b1 22		lda ($22),y			lda 	(zTemp2),y
.ac1a	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.ac1d	c8		iny				iny
.ac1e	c0 10		cpy #$10			cpy 	#16
.ac20	d0 f1		bne $ac13			bne 	_TIMWL_Loop
.ac22	4c ab a9	jmp $a9ab			jmp 	IFT_NewLine 				; new line and exit
.ac25					TIM_GetHex:
.ac25	c8		iny				iny
.ac26	b1 20		lda ($20),y			lda 	(zTemp1),y 					; skip over spaces.
.ac28	c9 20		cmp #$20			cmp 	#32
.ac2a	f0 f9		beq $ac25			beq 	TIM_GetHex
.ac2c	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.ac2e	f0 f5		beq $ac25			beq 	TIM_GetHex
.ac30	20 59 ac	jsr $ac59			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.ac33	b0 23		bcs $ac58			bcs 	_TIMGH_Exit					; if first bad then exit now.
.ac35	a9 00		lda #$00			lda 	#0 							; zero result
.ac37	85 24		sta $24				sta 	zTemp3
.ac39	85 25		sta $25				sta 	zTemp3+1
.ac3b					_TIM_GHLoop:
.ac3b	20 59 ac	jsr $ac59			jsr 	TIM_GetHexCharacter 		; get next character
.ac3e	b0 17		bcs $ac57			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.ac40	c8		iny				iny 								; skip over it.
.ac41	06 24		asl $24				asl 	zTemp3 						; x zTemp3 by 16
.ac43	26 25		rol $25				rol 	zTemp3+1
.ac45	06 24		asl $24				asl 	zTemp3 						; now x 2
.ac47	26 25		rol $25				rol 	zTemp3+1
.ac49	06 24		asl $24				asl 	zTemp3						; now x 4
.ac4b	26 25		rol $25				rol 	zTemp3+1
.ac4d	06 24		asl $24				asl 	zTemp3 						; now x 8
.ac4f	26 25		rol $25				rol 	zTemp3+1
.ac51	05 24		ora $24				ora 	zTemp3 						; OR result in
.ac53	85 24		sta $24				sta 	zTemp3
.ac55	80 e4		bra $ac3b			bra 	_TIM_GHLoop 				; loop round again.
.ac57					_TIMGH_Okay:
.ac57	18		clc				clc
.ac58					_TIMGH_Exit:
.ac58	60		rts				rts
.ac59					TIM_GetHexCharacter:
.ac59	b1 20		lda ($20),y			lda 	(zTemp1),y
.ac5b	38		sec				sec
.ac5c	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.ac5e	90 0e		bcc $ac6e			bcc 	_TIM_GHCFail
.ac60	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.ac62	90 0b		bcc $ac6f			bcc 	_TIM_GHCExit
.ac64	c9 11		cmp #$11			cmp 	#65-48						; < A
.ac66	90 06		bcc $ac6e			bcc		_TIM_GHCFail
.ac68	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.ac6a	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.ac6c	90 01		bcc $ac6f			bcc		_TIM_GHCExit
.ac6e					_TIM_GHCFail:
.ac6e	38		sec				sec
.ac6f					_TIM_GHCExit:
.ac6f	60		rts				rts
.ac70					TIM_BreakVector:
.ac70	da		phx				phx									; save X/A on stack
.ac71	48		pha				pha
.ac72	ba		tsx				tsx 								; X points to S
.ac73	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.ac76	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.ac78	d0 03		bne $ac7d			bne 	_TIMBreak					; if set, it's BRK
.ac7a	68		pla				pla 								; abandon routine.
.ac7b	fa		plx				plx
.ac7c	40		rti				rti
.ac7d					_TIMBreak:
.ac7d	68		pla				pla 								; save A X Y and maybe Z
.ac7e	8d 05 03	sta $0305			sta 	TIM_A
.ac81	fa		plx				plx
.ac82	8e 06 03	stx $0306			stx 	TIM_X
.ac85	8c 07 03	sty $0307			sty 	TIM_Y
.ac88	9c 08 03	stz $0308			stz 	TIM_Z
.ac8b	68		pla				pla 								; get Status Register
.ac8c	8d 04 03	sta $0304			sta 	TIM_SR
.ac8f	68		pla				pla
.ac90	8d 01 03	sta $0301			sta 	TIM_PC+1 					; save calling address
.ac93	68		pla				pla
.ac94	8d 00 03	sta $0300			sta 	TIM_PC 						; high byte
.ac97	ad 01 03	lda $0301			lda 	TIM_PC+1 					; dec PC to point right.
.ac9a	d0 03		bne $ac9f			bne 	_TIMDecrement 				; brk bumps it.
.ac9c	ce 00 03	dec $0300			dec 	TIM_PC
.ac9f					_TIMDecrement:
.ac9f	ce 01 03	dec $0301			dec 	TIM_PC+1
.aca2	ba		tsx				tsx 								; and copy SP
.aca3	8e 09 03	stx $0309			stx 	TIM_SP
.aca6	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.aca8	9a		txs				txs
.aca9	4c 88 ab	jmp $ab88			jmp 	TIM_Start 					; and start up TIM monitor.
.acac					TIM_UpdateRegisters:
.acac	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; PC
.acaf	b0 23		bcs $acd4			bcs 	_TIMURFail
.acb1	a5 24		lda $24				lda 	zTemp3
.acb3	8d 01 03	sta $0301			sta 	Tim_PC+1
.acb6	a5 25		lda $25				lda 	zTemp3+1
.acb8	8d 00 03	sta $0300			sta 	Tim_PC
.acbb	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; ignore IRQ
.acbe	b0 14		bcs $acd4			bcs 	_TIMURFail
.acc0	a2 00		ldx #$00			ldx 	#0
.acc2					_TIM_URLoop:
.acc2	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; registers
.acc5	b0 0d		bcs $acd4			bcs 	_TIMURFail
.acc7	a5 24		lda $24				lda 	zTemp3
.acc9	9d 04 03	sta $0304,x			sta 	Tim_SR,x
.accc	e8		inx				inx
.accd	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.accf	d0 f1		bne $acc2			bne 	_TIM_URLoop
.acd1	4c 03 ab	jmp $ab03			jmp 	TIM_NewCommand
.acd4					_TIMURFail:
.acd4	4c fc aa	jmp $aafc			jmp 	TIM_Error
.acd7					TIM_LoadMemory:
.acd7	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; target address => zTemp2
.acda	a5 24		lda $24				lda 	zTemp3
.acdc	85 22		sta $22				sta 	zTemp2
.acde	a5 25		lda $25				lda 	zTemp3+1
.ace0	85 23		sta $23				sta 	zTemp2+1
.ace2					_TIM_LMLoop:
.ace2	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; next byte ?
.ace5	b0 0e		bcs $acf5			bcs 	_TIMLMDone 					; no more
.ace7	a2 00		ldx #$00			ldx 	#0							; write out.
.ace9	a5 24		lda $24				lda 	zTemp3
.aceb	81 22		sta ($22,x)			sta 	(zTemp2,x)
.aced	e6 22		inc $22				inc 	zTemp2 						; bump address
.acef	d0 f1		bne $ace2			bne 	_TIM_LMLoop
.acf1	e6 23		inc $23				inc 	zTemp2+1
.acf3	80 ed		bra $ace2			bra 	_TIM_LMLoop
.acf5					_TIMLMDone:
.acf5	4c 03 ab	jmp $ab03			jmp 	TIM_NewCommand

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpmacros.asm


;******  Return to file: basic.asm


;******  Processing file: arithmetic/fputils.asm

.acf8					FPUSetBFromXY:
.acf8	48		pha				pha
.acf9	86 18		stx $18				stx 	B_Mantissa 					; set the lower 2 bytes
.acfb	84 19		sty $19				sty 	B_Mantissa+1
.acfd	98		tya				tya
.acfe	0a		asl a				asl 	a 							; CS if MSB set.
.acff	a9 00		lda #$00			lda 	#0 							; 0 if CC,$FF if CS
.ad01	90 01		bcc $ad04			bcc 	_FPUSB1
.ad03	3a		dec a				dec 	a
.ad04	85 1a		sta $1a		_FPUSB1:sta 	B_Mantissa+2 				; these are the two ms bytes
.ad06	85 1b		sta $1b				sta 	B_Mantissa+3
.ad08	a9 00		lda #$00			lda 	#Type_Integer 				; type is integer.
.ad0a	85 1f		sta $1f				sta 	B_Type
.ad0c	68		pla				pla
.ad0d	60		rts				rts
.ad0e					FPUCopyAToB:
.ad0e	48		pha				pha 								; copy the 8 byte format across.
.ad0f	da		phx				phx
.ad10	a2 07		ldx #$07			ldx 	#7
.ad12					_FPUCopy2:
.ad12	b5 10		lda $10,x			lda 	A_Mantissa,x
.ad14	95 18		sta $18,x			sta 	B_Mantissa,x
.ad16	ca		dex				dex
.ad17	10 f9		bpl $ad12			bpl 	_FPUCopy2
.ad19	fa		plx				plx
.ad1a	68		pla				pla
.ad1b	60		rts				rts
.ad1c					FPUCopyBToA:
.ad1c	48		pha				pha 								; copy the 8 byte format across.
.ad1d	da		phx				phx
.ad1e	a2 07		ldx #$07			ldx 	#7
.ad20					_FPUCopy1:
.ad20	b5 18		lda $18,x			lda 	B_Mantissa,x
.ad22	95 10		sta $10,x			sta 	A_Mantissa,x
.ad24	ca		dex				dex
.ad25	10 f9		bpl $ad20			bpl 	_FPUCopy1
.ad27	fa		plx				plx
.ad28	68		pla				pla
.ad29	60		rts				rts
.ad2a					FPUToFloatX:
.ad2a	48		pha				pha
.ad2b	b5 17		lda $17,x			lda 	A_Type,x					; exit if already float.
.ad2d	30 26		bmi $ad55			bmi 	_FPUBExit
.ad2f	a9 80		lda #$80			lda 	#Type_Float 				; set float type
.ad31	95 17		sta $17,x			sta 	A_Type,x
.ad33	a9 20		lda #$20			lda 	#32 						; and the exponent to 32, makes it * 2^32
.ad35	95 14		sta $14,x			sta 	A_Exponent,x
.ad37	a9 00		lda #$00			lda 	#0 							; clear sign/zero bytes
.ad39	95 15		sta $15,x			sta 	A_Sign,x
.ad3b	95 16		sta $16,x			sta		A_Zero,x
.ad3d	b5 13		lda $13,x			lda 	A_Mantissa+3,x 				; signed integer ?
.ad3f	10 05		bpl $ad46			bpl		_FPUBPositive
.ad41	20 1e ae	jsr $ae1e			jsr 	FPUIntegerNegateX 			; do B = -B in integer, so +ve mantissa
.ad44	d6 15		dec $15,x			dec 	A_Sign,x 					; set the sign byte to $FF
.ad46					_FPUBPositive:
.ad46	a5 18		lda $18				lda 	B_Mantissa 							; check if \1 zero
.ad48	05 19		ora $19				ora 	B_Mantissa+1
.ad4a	05 1a		ora $1a				ora 	B_Mantissa+2
.ad4c	05 1b		ora $1b				ora 	B_Mantissa+3
.ad4e	d0 02		bne $ad52			bne 	_FPUBNonZero
.ad50	d6 16		dec $16,x			dec 	A_Zero,x 					; set the zero byte to $FF
.ad52					_FPUBNonZero:
.ad52	20 01 ae	jsr $ae01			jsr 	FPUNormaliseX
.ad55					_FPUBExit:
.ad55	68		pla				pla
.ad56	60		rts				rts
.ad57					FPUAToInteger:
.ad57	48		pha				pha
.ad58	a5 17		lda $17				lda 	A_Type 						; if already integer, exit
.ad5a	f0 39		beq $ad95			beq 	_FPUATOI_Exit
.ad5c	a9 00		lda #$00			lda 	#Type_Integer 				; make type zero (integer)
.ad5e	85 17		sta $17				sta 	A_Type
.ad60	a5 16		lda $16				lda 	A_Zero						; if zero, return zero.
.ad62	d0 27		bne $ad8b			bne 	_FPUATOI_Zero
.ad64	a5 14		lda $14				lda 	A_Exponent 					; check -ve exponent or < 32
.ad66	30 04		bmi $ad6c			bmi 	_FPUAToIOk
.ad68	c9 20		cmp #$20			cmp 	#32 						; sign exponent >= 32, overflow.
.ad6a	b0 2b		bcs $ad97			bcs 	FP_Overflow
.ad6c					_FPUAToIOk:
.ad6c					_FPUAToIToInteger:
.ad6c	a5 14		lda $14				lda 	A_Exponent 					; reached ^32
.ad6e	c9 20		cmp #$20			cmp 	#32
.ad70	f0 0c		beq $ad7e			beq 	_FPUAtoICheckSign 			; check sign needs fixing up.
.ad72	e6 14		inc $14				inc 	A_Exponent 					; increment Exponent
.ad74	46 13		lsr $13				lsr 	3+A_Mantissa
.ad76	66 12		ror $12				ror 	2+A_Mantissa
.ad78	66 11		ror $11				ror 	1+A_Mantissa
.ad7a	66 10		ror $10				ror 	0+A_Mantissa
.ad7c	80 ee		bra $ad6c			bra 	_FPUAToIToInteger 			; keep going.
.ad7e					_FPUAtoICheckSign:
.ad7e	a5 15		lda $15				lda 	A_Sign 						; check sign
.ad80	f0 13		beq $ad95			beq 	_FPUAToI_Exit 				; exit if unsigned.
.ad82	da		phx				phx
.ad83	a2 00		ldx #$00			ldx 	#0
.ad85	20 1e ae	jsr $ae1e			jsr 	FPUIntegerNegateX 			; otherwise negate the shifted mantissa
.ad88	fa		plx				plx
.ad89	80 0a		bra $ad95			bra 	_FPUATOI_Exit
.ad8b					_FPUATOI_Zero:
.ad8b	a9 00		lda #$00			lda 	#0 							; return zero integer.
.ad8d	85 10		sta $10				sta 	A_Mantissa+0
.ad8f	85 11		sta $11				sta 	A_Mantissa+1
.ad91	85 12		sta $12				sta 	A_Mantissa+2
.ad93	85 13		sta $13				sta 	A_Mantissa+3
.ad95					_FPUATOI_Exit:
.ad95	68		pla				pla
.ad96	60		rts				rts
.ad97					FP_Overflow:
.ad97	20 ea e2	jsr $e2ea			jsr 	ERR_Handler
>ad9a	46 6c 6f 61 74 69 6e 67				.text 	"Floating Point overflow",0
>ada2	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.adb2					FPUTimes10X:
.adb2	b5 10		lda $10,x			lda 	A_Mantissa+0,x 				; copy mantissa to ZLTemp1
.adb4	85 26		sta $26				sta 	ZLTemp1+0
.adb6	b5 11		lda $11,x			lda 	A_Mantissa+1,x
.adb8	85 27		sta $27				sta 	ZLTemp1+1
.adba	b5 12		lda $12,x			lda 	A_Mantissa+2,x
.adbc	85 28		sta $28				sta 	ZLTemp1+2
.adbe	b5 13		lda $13,x			lda 	A_Mantissa+3,x
.adc0	85 29		sta $29				sta 	ZLTemp1+3
.adc2	46 29		lsr $29				lsr 	3+ZLTemp1
.adc4	66 28		ror $28				ror 	2+ZLTemp1
.adc6	66 27		ror $27				ror 	1+ZLTemp1
.adc8	66 26		ror $26				ror 	0+ZLTemp1
.adca	46 29		lsr $29				lsr 	3+ZLTemp1
.adcc	66 28		ror $28				ror 	2+ZLTemp1
.adce	66 27		ror $27				ror 	1+ZLTemp1
.add0	66 26		ror $26				ror 	0+ZLTemp1
.add2	18		clc				clc
.add3	b5 10		lda $10,x			lda 	A_Mantissa+0,x
.add5	65 26		adc $26				adc 	ZLTemp1+0
.add7	95 10		sta $10,x			sta 	A_Mantissa+0,x
.add9	b5 11		lda $11,x			lda 	A_Mantissa+1,x
.addb	65 27		adc $27				adc 	ZLTemp1+1
.addd	95 11		sta $11,x			sta 	A_Mantissa+1,x
.addf	b5 12		lda $12,x			lda 	A_Mantissa+2,x
.ade1	65 28		adc $28				adc 	ZLTemp1+2
.ade3	95 12		sta $12,x			sta 	A_Mantissa+2,x
.ade5	b5 13		lda $13,x			lda 	A_Mantissa+3,x
.ade7	65 29		adc $29				adc 	ZLTemp1+3
.ade9	95 13		sta $13,x			sta 	A_Mantissa+3,x
.adeb	90 0a		bcc $adf7			bcc 	_FPUTimes10
.aded	76 13		ror $13,x			ror 	3+A_Mantissa,x
.adef	76 12		ror $12,x			ror 	2+A_Mantissa,x
.adf1	76 11		ror $11,x			ror 	1+A_Mantissa,x
.adf3	76 10		ror $10,x			ror 	0+A_Mantissa,x
.adf5	f6 14		inc $14,x			inc 	A_Exponent,x				; fix exponent
.adf7					_FPUTimes10:
.adf7	b5 14		lda $14,x			lda 	A_Exponent,x 				; fix up x 2^3
.adf9	18		clc				clc
.adfa	69 03		adc #$03			adc 	#3
.adfc	95 14		sta $14,x			sta 	A_Exponent,x
.adfe	70 97		bvs $ad97			bvs 	FP_Overflow 				; error
.ae00	60		rts				rts
.ae01					FPUNormaliseX:
.ae01	48		pha				pha
.ae02	b5 16		lda $16,x			lda 	A_Zero,x 					; if float-zero, don't need to normalise it.
.ae04	d0 16		bne $ae1c			bne 	_FPUNExit
.ae06					_FPULoop:
.ae06	b5 13		lda $13,x			lda 	A_Mantissa+3,x 				; bit 31 of mantissa set.
.ae08	30 12		bmi $ae1c			bmi 	_FPUNExit 					; if so, we are normalised.
.ae0a	16 10		asl $10,x			asl 	0+A_Mantissa+0,x
.ae0c	36 11		rol $11,x			rol 	1+A_Mantissa+0,x
.ae0e	36 12		rol $12,x			rol 	2+A_Mantissa+0,x
.ae10	36 13		rol $13,x			rol 	3+A_Mantissa+0,x
.ae12	d6 14		dec $14,x			dec 	A_Exponent,x 				; decrement exponent
.ae14	b5 14		lda $14,x			lda 	A_Exponent,x 				; if exponent not $7F (e.g. gone < -$80)
.ae16	c9 7f		cmp #$7f			cmp 	#$7F
.ae18	d0 ec		bne $ae06			bne 	_FPULoop
.ae1a	d6 16		dec $16,x			dec 	A_Zero,x 					; the result is now zero.
.ae1c					_FPUNExit:
.ae1c	68		pla				pla
.ae1d	60		rts				rts
.ae1e					FPUIntegerNegateX:
.ae1e	48		pha				pha
.ae1f	38		sec				sec
.ae20	a9 00		lda #$00			lda 	#0
.ae22	f5 10		sbc $10,x			sbc 	A_Mantissa+0,x
.ae24	95 10		sta $10,x			sta 	A_Mantissa+0,x
.ae26	a9 00		lda #$00			lda 	#0
.ae28	f5 11		sbc $11,x			sbc 	A_Mantissa+1,x
.ae2a	95 11		sta $11,x			sta 	A_Mantissa+1,x
.ae2c	a9 00		lda #$00			lda 	#0
.ae2e	f5 12		sbc $12,x			sbc 	A_Mantissa+2,x
.ae30	95 12		sta $12,x			sta 	A_Mantissa+2,x
.ae32	a9 00		lda #$00			lda 	#0
.ae34	f5 13		sbc $13,x			sbc 	A_Mantissa+3,x
.ae36	95 13		sta $13,x			sta 	A_Mantissa+3,X
.ae38	68		pla				pla
.ae39	60		rts				rts
.ae3a					FPCompare:
.ae3a	a5 14		lda $14				lda 	A_Exponent 					; save the exponents on the stack
.ae3c	48		pha				pha
.ae3d	a5 1c		lda $1c				lda 	B_Exponent
.ae3f	48		pha				pha
.ae40	20 7e ae	jsr $ae7e			jsr 	FPSubtract 					; calculate A-B
.ae43	a5 16		lda $16				lda 	A_Zero 						; is the result zero ?
.ae45	d0 32		bne $ae79			bne 	_FPCPullZero 				; if so, then return zero throwing saved exp
.ae47	68		pla				pla
.ae48	85 18		sta $18				sta 	B_Mantissa 					; BM+0 is BX
.ae4a	68		pla				pla
.ae4b	85 19		sta $19				sta 	B_Mantissa+1 				; BM+1 is AX
.ae4d	38		sec				sec
.ae4e	e5 18		sbc $18				sbc 	B_Mantissa 					; AX-BX
.ae50	70 1f		bvs $ae71			bvs 	_FPCNotEqual				; overflow, can't be equal.
.ae52	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.ae53	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.ae55	b0 1a		bcs $ae71			bcs 	_FPCNotEqual
.ae57	18		clc				clc
.ae58	a5 18		lda $18				lda 	B_Mantissa 					; mean of exponents
.ae5a	65 19		adc $19				adc 	B_Mantissa+1
.ae5c	6a		ror a				ror 	a 							; shift carry out back in.
.ae5d	38		sec				sec
.ae5e	e9 0c		sbc #$0c			sbc 	#12 						; allow for 2^12 error, relatively, about 4 DP ish.
.ae60	50 02		bvc $ae64			bvc 	_FPCNotRange 				; keep in range.
.ae62	a9 80		lda #$80			lda 	#$80
.ae64					_FPCNotRange:
.ae64	38		sec				sec
.ae65	e5 14		sbc $14				sbc 	A_Exponent  				; if exponent of difference more than this.
.ae67	50 02		bvc $ae6b			bvc 	_FPCNotOverflow 			; signed comparison
.ae69	49 80		eor #$80			eor 	#$80
.ae6b					_FPCNotOverflow:
.ae6b	30 04		bmi $ae71			bmi 	_FPCNotEqual 				; then error is too large, so return -1 or 1
.ae6d	a9 00		lda #$00			lda 	#0 							; "approximately equal" allowing for rounding
.ae6f	80 0c		bra $ae7d			bra 	_FPCExit 					; errors.
.ae71					_FPCNotEqual:
.ae71	a5 15		lda $15				lda 	A_Sign 						; if sign is -ve , will be $FF, so return $FF
.ae73	d0 08		bne $ae7d			bne 	_FPCExit
.ae75	a9 01		lda #$01			lda 	#1 							; otherwise return $01 as not zero.
.ae77	80 04		bra $ae7d			bra 	_FPCExit
.ae79					_FPCPullZero:
.ae79	68		pla				pla 								; throw saved exponents
.ae7a	68		pla				pla
.ae7b	a9 00		lda #$00			lda 	#0 							; and return zero
.ae7d					_FPCExit:
.ae7d	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpadd.asm

.ae7e					FPSubtract:
.ae7e	48		pha				pha
.ae7f	a5 1d		lda $1d				lda 	B_Sign 						; flip the sign of B and add
.ae81	49 ff		eor #$ff			eor 	#$FF
.ae83	85 1d		sta $1d				sta 	B_Sign
.ae85	68		pla				pla
.ae86					FPAdd:
.ae86	48		pha				pha
.ae87	da		phx				phx
.ae88	a5 15		lda $15				lda 	A_Sign 						; if A is -ve, specialised code
.ae8a	d0 06		bne $ae92			bne 	_FPA_NegativeLHS
.ae8c	20 aa ae	jsr $aeaa			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.ae8f	fa		plx				plx
.ae90	68		pla				pla
.ae91	60		rts				rts
.ae92					_FPA_NegativeLHS:
.ae92	a5 15		lda $15				lda 	A_Sign 						; flip A and B signs
.ae94	49 ff		eor #$ff			eor 	#$FF
.ae96	85 15		sta $15				sta 	A_Sign
.ae98	a5 1d		lda $1d				lda 	B_Sign
.ae9a	49 ff		eor #$ff			eor 	#$FF
.ae9c	85 1d		sta $1d				sta 	B_Sign 						; so now it's A +- B
.ae9e	20 aa ae	jsr $aeaa			jsr 	FPAdd_Worker
.aea1	a5 15		lda $15				lda 	A_Sign 						; and flip the result sign
.aea3	49 ff		eor #$ff			eor 	#$FF
.aea5	85 15		sta $15				sta 	A_Sign
.aea7	fa		plx				plx
.aea8	68		pla				pla
.aea9	60		rts				rts
.aeaa					FPAdd_Worker:
.aeaa	a5 1e		lda $1e				lda 	B_Zero 						; if B is zero (e.g. adding zero)
.aeac	d0 78		bne $af26			bne 	_FPAWExit 					; no change.
.aeae	a5 16		lda $16				lda 	A_Zero 						; if A is zero (e.g. 0 + B)
.aeb0	d0 71		bne $af23			bne 	_FPAWReturnB 				; then return B.
.aeb2					_FPAWMakeSame:
.aeb2	a2 00		ldx #$00			ldx 	#0 							; shift offset, this is to shift A.
.aeb4	a5 14		lda $14				lda 	A_Exponent 					; check if exponents are the same.
.aeb6	38		sec				sec
.aeb7	e5 1c		sbc $1c				sbc	 	B_Exponent
.aeb9	f0 14		beq $aecf			beq 	_FPAW_DoArithmetic 			; if they are,
.aebb	50 02		bvc $aebf			bvc 	_FPAWNoOverflow 			; make it a signed comparison.
.aebd	49 80		eor #$80			eor 	#$80
.aebf					_FPAWNoOverflow:
.aebf	30 02		bmi $aec3			bmi 	_FPAWShiftA 				; if eA < eB then shift A
.aec1	a2 08		ldx #$08			ldx 	#B_Mantissa-A_Mantissa 		; if eA > eB then shift B
.aec3					_FPAWShiftA:
.aec3	f6 14		inc $14,x			inc 	A_Exponent,x 				; so shift exponent up.
.aec5	56 13		lsr $13,x			lsr 	3+A_Mantissa,x
.aec7	76 12		ror $12,x			ror 	2+A_Mantissa,x
.aec9	76 11		ror $11,x			ror 	1+A_Mantissa,x
.aecb	76 10		ror $10,x			ror 	0+A_Mantissa,x
.aecd	80 e3		bra $aeb2			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.aecf					_FPAW_DoArithmetic:
.aecf	a5 1d		lda $1d				lda 	B_Sign 						; is it adding a negative to a positive
.aed1	d0 28		bne $aefb			bne 	_FPAW_BNegative
.aed3	18		clc				clc
.aed4	a5 10		lda $10				lda 	A_Mantissa+0
.aed6	65 18		adc $18				adc 	B_Mantissa+0
.aed8	85 10		sta $10				sta 	A_Mantissa+0
.aeda	a5 11		lda $11				lda 	A_Mantissa+1
.aedc	65 19		adc $19				adc 	B_Mantissa+1
.aede	85 11		sta $11				sta 	A_Mantissa+1
.aee0	a5 12		lda $12				lda 	A_Mantissa+2
.aee2	65 1a		adc $1a				adc 	B_Mantissa+2
.aee4	85 12		sta $12				sta 	A_Mantissa+2
.aee6	a5 13		lda $13				lda 	A_Mantissa+3
.aee8	65 1b		adc $1b				adc 	B_Mantissa+3
.aeea	85 13		sta $13				sta 	A_Mantissa+3
.aeec	90 38		bcc $af26			bcc 	_FPAWExit 					; no carry.
.aeee	e6 14		inc $14				inc 	A_Exponent 					; so shift exponent up.
.aef0	38		sec				sec
.aef1	66 13		ror $13				ror 	3+A_Mantissa
.aef3	66 12		ror $12				ror 	2+A_Mantissa
.aef5	66 11		ror $11				ror 	1+A_Mantissa
.aef7	66 10		ror $10				ror 	0+A_Mantissa
.aef9	80 2b		bra $af26			bra 	_FPAWExit
.aefb					_FPAW_BNegative:
.aefb	38		sec				sec
.aefc	a5 10		lda $10				lda 	A_Mantissa+0
.aefe	e5 18		sbc $18				sbc 	B_Mantissa+0
.af00	85 10		sta $10				sta 	A_Mantissa+0
.af02	a5 11		lda $11				lda 	A_Mantissa+1
.af04	e5 19		sbc $19				sbc 	B_Mantissa+1
.af06	85 11		sta $11				sta 	A_Mantissa+1
.af08	a5 12		lda $12				lda 	A_Mantissa+2
.af0a	e5 1a		sbc $1a				sbc 	B_Mantissa+2
.af0c	85 12		sta $12				sta 	A_Mantissa+2
.af0e	a5 13		lda $13				lda 	A_Mantissa+3
.af10	e5 1b		sbc $1b				sbc 	B_Mantissa+3
.af12	85 13		sta $13				sta 	A_Mantissa+3
.af14	b0 10		bcs $af26			bcs		_FPAWExit 					; no borrow.
.af16	a2 00		ldx #$00			ldx 	#0  						; negate the mantissa
.af18	20 1e ae	jsr $ae1e			jsr 	FPUIntegerNegateX
.af1b	a5 15		lda $15				lda 	A_Sign 						; flip result sign
.af1d	49 ff		eor #$ff			eor 	#$FF
.af1f	85 15		sta $15				sta 	A_Sign
.af21	80 03		bra $af26			bra 	_FPAWExit
.af23					_FPAWReturnB:
.af23	20 1c ad	jsr $ad1c			jsr 	FPUCopyBToA 				; copy B into A
.af26					_FPAWExit:
.af26	a2 00		ldx #$00			ldx 	#0 							; normalise A
.af28	20 01 ae	jsr $ae01			jsr 	FPUNormaliseX
.af2b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpmultiply.asm

.af2c					FPMultiply:
.af2c	48		pha				pha
.af2d	da		phx				phx
.af2e	a5 1e		lda $1e				lda		B_Zero 						; if B = 0, return B unchanged
.af30	d0 6e		bne $afa0			bne 	_FPM_ReturnB
.af32	a5 16		lda $16				lda 	A_Zero 						; if A = 0, return A
.af34	d0 6d		bne $afa3			bne 	_FPM_Exit
.af36	a5 14		lda $14				lda 	A_Exponent					; add their exponents
.af38	18		clc				clc
.af39	65 1c		adc $1c				adc 	B_Exponent
.af3b	85 14		sta $14				sta 	A_Exponent 					; exponent of result.
.af3d	10 05		bpl $af44			bpl 	_FPM_NoOverflow 			; error if -ve result and overflow.
.af3f	50 03		bvc $af44			bvc 	_FPM_NoOverflow
.af41	4c 97 ad	jmp $ad97			jmp 	FP_Overflow
.af44					_FPM_NoOverflow:
.af44	a9 00		lda #$00			lda 	#0
.af46	85 26		sta $26				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.af48	85 27		sta $27				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.af4a	85 28		sta $28				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.af4c	85 29		sta $29				sta 	zLTemp1+3
.af4e	a2 20		ldx #$20			ldx 	#32							; X is loop counter
.af50					_FPM_Loop:
.af50	a5 10		lda $10				lda 	A_Mantissa					; check LSB of long product
.af52	29 01		and #$01			and 	#1
.af54	18		clc				clc 								; clear carry for the long rotate.
.af55	f0 19		beq $af70			beq 	_FPM_NoAddition
.af57	18		clc				clc
.af58	a5 26		lda $26				lda 	zLTemp1+0
.af5a	65 18		adc $18				adc 	B_Mantissa+0
.af5c	85 26		sta $26				sta 	zLTemp1+0
.af5e	a5 27		lda $27				lda 	zLTemp1+1
.af60	65 19		adc $19				adc 	B_Mantissa+1
.af62	85 27		sta $27				sta 	zLTemp1+1
.af64	a5 28		lda $28				lda 	zLTemp1+2
.af66	65 1a		adc $1a				adc 	B_Mantissa+2
.af68	85 28		sta $28				sta 	zLTemp1+2
.af6a	a5 29		lda $29				lda 	zLTemp1+3
.af6c	65 1b		adc $1b				adc 	B_Mantissa+3
.af6e	85 29		sta $29				sta 	zLTemp1+3
.af70					_FPM_NoAddition:
.af70	66 29		ror $29				ror 	3+zLTemp1
.af72	66 28		ror $28				ror 	2+zLTemp1
.af74	66 27		ror $27				ror 	1+zLTemp1
.af76	66 26		ror $26				ror 	0+zLTemp1
.af78	66 13		ror $13				ror 	3+A_Mantissa
.af7a	66 12		ror $12				ror 	2+A_Mantissa
.af7c	66 11		ror $11				ror 	1+A_Mantissa
.af7e	66 10		ror $10				ror 	0+A_Mantissa
.af80	ca		dex				dex
.af81	d0 cd		bne $af50			bne 	_FPM_Loop 					; do this 32 times.
.af83	a5 26		lda $26				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.af85	85 10		sta $10				sta 	A_Mantissa+0
.af87	a5 27		lda $27				lda 	zLTemp1+1
.af89	85 11		sta $11				sta 	A_Mantissa+1
.af8b	a5 28		lda $28				lda 	zLTemp1+2
.af8d	85 12		sta $12				sta 	A_Mantissa+2
.af8f	a5 29		lda $29				lda 	zLTemp1+3
.af91	85 13		sta $13				sta 	A_Mantissa+3
.af93	a5 15		lda $15				lda 	A_Sign 						; sign is xor of signs
.af95	45 1d		eor $1d				eor 	B_Sign
.af97	85 15		sta $15				sta 	A_Sign
.af99	a2 00		ldx #$00			ldx 	#0 							; normalise the result
.af9b	20 01 ae	jsr $ae01			jsr 	FPUNormaliseX
.af9e	80 03		bra $afa3			bra		_FPM_Exit
.afa0					_FPM_ReturnB:
.afa0	20 1c ad	jsr $ad1c			jsr 	FPUCopyBToA
.afa3					_FPM_Exit:
.afa3	fa		plx				plx
.afa4	68		pla				pla
.afa5	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpdivide.asm

.afa6					FPD_IsDivZero:
.afa6	20 ea e2	jsr $e2ea			jsr 		ERR_Handler
>afa9	44 69 76 69 73 69 6f 6e				.text 		"Division by zero",0
>afb1	20 62 79 20 7a 65 72 6f 00
.afba					FPDivide:
.afba	48		pha				pha
.afbb	da		phx				phx
.afbc	a5 1e		lda $1e				lda 	B_Zero 						; check if division by zero
.afbe	d0 e6		bne $afa6			bne 	FPD_IsDivZero
.afc0	a5 16		lda $16				lda 	A_Zero 						; if 0/X (X is not zero) return 0
.afc2	d0 7d		bne $b041			bne 	_FPD_Exit
.afc4	a5 14		lda $14				lda 	A_Exponent 					; calculate new exponent
.afc6	38		sec				sec
.afc7	e5 1c		sbc $1c				sbc 	B_Exponent
.afc9	10 05		bpl $afd0			bpl 	_FPD_NoOverflow 			; check for overflow.
.afcb	50 03		bvc $afd0			bvc 	_FPD_NoOverflow
.afcd					_FPD_Overflow:
.afcd	4c 97 ad	jmp $ad97			jmp 	FP_Overflow
.afd0					_FPD_NoOverflow:
.afd0	18		clc				clc 	 							; x 2, overflow if -ve
.afd1	69 01		adc #$01			adc 	#1
.afd3	70 f8		bvs $afcd			bvs 	_FPD_Overflow
.afd5	85 14		sta $14				sta 	A_Exponent
.afd7	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.afd9	85 26		sta $26				sta 	zLTemp1+0
.afdb	85 27		sta $27				sta 	zLTemp1+1
.afdd	85 28		sta $28				sta 	zLTemp1+2
.afdf	85 29		sta $29				sta 	zLTemp1+3
.afe1	a2 20		ldx #$20			ldx 	#32 						; times round.
.afe3					_FPD_Loop:
.afe3	38		sec				sec 								; calculate A-B stacking result.
.afe4	a5 10		lda $10				lda 	A_Mantissa+0
.afe6	e5 18		sbc $18				sbc 	B_Mantissa+0
.afe8	48		pha				pha
.afe9	a5 11		lda $11				lda 	A_Mantissa+1
.afeb	e5 19		sbc $19				sbc 	B_Mantissa+1
.afed	48		pha				pha
.afee	a5 12		lda $12				lda 	A_Mantissa+2
.aff0	e5 1a		sbc $1a				sbc 	B_Mantissa+2
.aff2	48		pha				pha
.aff3	a5 13		lda $13				lda 	A_Mantissa+3
.aff5	e5 1b		sbc $1b				sbc 	B_Mantissa+3
.aff7	90 13		bcc $b00c			bcc		_FPD_NoSubtract 			; if CC couldn't subtract
.aff9	85 13		sta $13				sta 	A_Mantissa+3 				; save results out to A
.affb	68		pla				pla
.affc	85 12		sta $12				sta 	A_Mantissa+2
.affe	68		pla				pla
.afff	85 11		sta $11				sta 	A_Mantissa+1
.b001	68		pla				pla
.b002	85 10		sta $10				sta 	A_Mantissa+0
.b004	a5 29		lda $29				lda 	zLTemp1+3 					; set high bit of result
.b006	09 80		ora #$80			ora 	#$80
.b008	85 29		sta $29				sta 	zLTemp1+3
.b00a	80 03		bra $b00f			bra 	_FPD_Rotates
.b00c					_FPD_NoSubtract:
.b00c	68		pla				pla 								; throw away unwanted results
.b00d	68		pla				pla
.b00e	68		pla				pla
.b00f					_FPD_Rotates:
.b00f	46 1b		lsr $1b				lsr 	3+B_Mantissa
.b011	66 1a		ror $1a				ror 	2+B_Mantissa
.b013	66 19		ror $19				ror 	1+B_Mantissa
.b015	66 18		ror $18				ror 	0+B_Mantissa
.b017	06 26		asl $26				asl 	0+zLTemp1
.b019	26 27		rol $27				rol 	1+zLTemp1
.b01b	26 28		rol $28				rol 	2+zLTemp1
.b01d	26 29		rol $29				rol 	3+zLTemp1
.b01f	90 02		bcc $b023			bcc 	_FPD_NoCarry
.b021	e6 26		inc $26				inc 	zLTemp1 					; if rotated out, set LSB.
.b023					_FPD_NoCarry:
.b023	ca		dex				dex 								; do 32 times
.b024	d0 bd		bne $afe3			bne 	_FPD_Loop
.b026	a5 26		lda $26				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.b028	85 10		sta $10				sta 	A_Mantissa+0
.b02a	a5 27		lda $27				lda 	zLTemp1+1
.b02c	85 11		sta $11				sta 	A_Mantissa+1
.b02e	a5 28		lda $28				lda 	zLTemp1+2
.b030	85 12		sta $12				sta 	A_Mantissa+2
.b032	a5 29		lda $29				lda 	zLTemp1+3
.b034	85 13		sta $13				sta 	A_Mantissa+3
.b036	a5 15		lda $15				lda 	A_Sign 						; sign is xor of signs
.b038	45 1d		eor $1d				eor 	B_Sign
.b03a	85 15		sta $15				sta 	A_Sign
.b03c	a2 00		ldx #$00			ldx 	#0 							; normalise the result
.b03e	20 01 ae	jsr $ae01			jsr 	FPUNormaliseX
.b041					_FPD_Exit:
.b041	fa		plx				plx
.b042	68		pla				pla
.b043	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpparts.asm

.b044					FPFractionalPart:
.b044	a5 14		lda $14				lda 	A_Exponent 					; if exponent -ve then then unchanged
.b046	38		sec				sec 								; this flag tells us to keep the fractional part
.b047	10 0d		bpl $b056			bpl 	FPGetPart
.b049	60		rts				rts
.b04a					FPIntegerPart:
.b04a	a5 14		lda $14				lda 	A_Exponent 					; if exponent -ve then the result is zero.
.b04c	18		clc				clc 								; this flag says keep the integer part.
.b04d	10 07		bpl $b056			bpl 	FPGetPart
.b04f	48		pha				pha
.b050	a9 ff		lda #$ff			lda 	#$FF 						; set the Zero Flag
.b052	85 16		sta $16				sta 	A_Zero
.b054	68		pla				pla
.b055	60		rts				rts
.b056					FPGetPart:
.b056	48		pha				pha
.b057	da		phx				phx 								; save X
.b058	a5 16		lda $16				lda 	A_Zero 						; if zero, return zero
.b05a	d0 4d		bne $b0a9			bne 	_FPGP_Exit 					; then do nothing.
.b05c	08		php				php 								; save the action flag on the stack.
.b05d	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.b05f	85 26		sta $26				sta 	zLTemp1+0
.b061	85 27		sta $27				sta 	zLTemp1+1
.b063	85 28		sta $28				sta 	zLTemp1+2
.b065	85 29		sta $29				sta 	zLTemp1+3
.b067	a6 14		ldx $14				ldx 	A_Exponent 					; the number of shifts.
.b069	f0 11		beq $b07c			beq 	_FPGP_NoShift 				; ... if any
.b06b	e0 20		cpx #$20			cpx 	#32
.b06d	90 02		bcc $b071			bcc 	_FPGP_NotMax
.b06f	a2 20		ldx #$20			ldx 	#32 						; max of 32.
.b071					_FPGP_NotMax:
.b071	46 29		lsr $29				lsr 	3+zLTemp1
.b073	66 28		ror $28				ror 	2+zLTemp1
.b075	66 27		ror $27				ror 	1+zLTemp1
.b077	66 26		ror $26				ror 	0+zLTemp1
.b079	ca		dex				dex
.b07a	d0 f5		bne $b071			bne 	_FPGP_NotMax
.b07c					_FPGP_NoShift:
.b07c	a2 03		ldx #$03			ldx 	#3 							; now mask each part in turn.
.b07e					_FPGP_MaskLoop:
.b07e	b5 26		lda $26,x			lda 	zlTemp1,x 					; get mask.
.b080	28		plp				plp 								; if CC we keep the top part, so we
.b081	08		php				php		 							; flip the mask.
.b082	b0 02		bcs $b086			bcs		_FPGP_NoFlip
.b084	49 ff		eor #$ff			eor 	#$FF
.b086					_FPGP_NoFlip:
.b086	35 10		and $10,x			and 	A_Mantissa,x
.b088	95 10		sta $10,x			sta 	A_Mantissa,x
.b08a	ca		dex				dex
.b08b	10 f1		bpl $b07e			bpl 	_FPGP_MaskLoop
.b08d	28		plp				plp 								; get action flag on the stack
.b08e	90 04		bcc $b094			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.b090	a9 00		lda #$00			lda 	#0
.b092	85 15		sta $15				sta 	A_Sign
.b094					_FPGP_NotFractional:
.b094	a5 10		lda $10				lda 	A_Mantissa 							; check if \1 zero
.b096	05 11		ora $11				ora 	A_Mantissa+1
.b098	05 12		ora $12				ora 	A_Mantissa+2
.b09a	05 13		ora $13				ora 	A_Mantissa+3
.b09c	f0 07		beq $b0a5			beq 	_FPGP_Zero 					; if zero, return zero
.b09e	a2 00		ldx #$00			ldx 	#0							; otherwise normalise
.b0a0	20 01 ae	jsr $ae01			jsr 	FPUNormaliseX
.b0a3	80 04		bra $b0a9			bra 	_FPGP_Exit 					; and exit
.b0a5					_FPGP_Zero:
.b0a5	a9 ff		lda #$ff			lda 	#$FF 						; set zero flag
.b0a7	85 16		sta $16				sta 	A_Zero
.b0a9					_FPGP_Exit:
.b0a9	fa		plx				plx
.b0aa	68		pla				pla
.b0ab	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpfromstr.asm

.b0ac					FPAsciiToNumber:
.b0ac	da		phx				phx
.b0ad	5a		phy				phy
.b0ae	a2 00		ldx #$00			ldx 	#0 							; set the initial value to integer to zero.
.b0b0	a0 00		ldy #$00			ldy 	#0
.b0b2	20 f8 ac	jsr $acf8			jsr 	FPUSetBFromXY
.b0b5	a0 00		ldy #$00			ldy 	#0  						; get first character.
.b0b7	b1 2a		lda ($2a),y			lda 	(zGenPtr),y
.b0b9	49 2d		eor #$2d			eor 	#"-"
.b0bb	d0 01		bne $b0be			bne 	_FPANotMinus
.b0bd	c8		iny				iny									; skip over the minus
.b0be					_FPANotMinus:
.b0be	48		pha				pha 								; A is zero for minus, non-zero for plus.
.b0bf	a2 ff		ldx #$ff			ldx 	#$FF 						; X counts the decimal places.
.b0c1					_FPAGetNextBody:
.b0c1	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; get next character
.b0c3	c9 2e		cmp #$2e			cmp 	#"."						; decimal place
.b0c5	d0 09		bne $b0d0			bne 	_FPANotDecimal
.b0c7	c8		iny				iny 								; skip decimal place.
.b0c8	e0 00		cpx #$00			cpx 	#0 							; already in decimals ?
.b0ca	10 3a		bpl $b106			bpl 	_FPAError
.b0cc	a2 00		ldx #$00			ldx 	#0 							; start counting decimals.
.b0ce	80 f1		bra $b0c1			bra 	_FPAGetNextBody
.b0d0					_FPANotDecimal:
.b0d0	c9 30		cmp #$30			cmp 	#"0"						; if out of range 0-9 exit this bit.
.b0d2	90 36		bcc $b10a			bcc 	_FPAEndConstantPart
.b0d4	c9 3a		cmp #$3a			cmp 	#"9"+1
.b0d6	b0 32		bcs $b10a			bcs 	_FPAEndConstantPart
.b0d8	a5 1b		lda $1b				lda 	B_Mantissa+3 				; check for overflow.
.b0da	c9 0c		cmp #$0c			cmp 	#$0C 						; roughly $7F/10
.b0dc	b0 22		bcs $b100			bcs 	_FPASkipDigit 				; can't do any more
.b0de	e0 00		cpx #$00			cpx 	#00 						; if X +ve, then bump decimals.
.b0e0	30 01		bmi $b0e3			bmi 	_FPANotIndecimal
.b0e2	e8		inx				inx
.b0e3					_FPANotInDecimal:
.b0e3	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; get the digit.
.b0e5	48		pha				pha 								; save digit.
.b0e6	c8		iny				iny 								; skip over it
.b0e7	20 75 b1	jsr $b175			jsr 	FPABTimes10Int 				; multiply B_Mantissa by 10.
.b0ea	68		pla				pla
.b0eb	29 0f		and #$0f			and 	#15 						; make 0-9
.b0ed	18		clc				clc
.b0ee	65 18		adc $18				adc 	B_Mantissa
.b0f0	85 18		sta $18				sta 	B_Mantissa
.b0f2	90 cd		bcc $b0c1			bcc 	_FPAGetNextBody
.b0f4	e6 19		inc $19				inc 	B_Mantissa+1
.b0f6	d0 c9		bne $b0c1			bne 	_FPAGetNextBody
.b0f8	e6 1a		inc $1a				inc 	B_Mantissa+2
.b0fa	d0 c5		bne $b0c1			bne 	_FPAGetNextBody
.b0fc	e6 1b		inc $1b				inc 	B_Mantissa+3
.b0fe	80 c1		bra $b0c1			bra 	_FPAGetNextBody
.b100					_FPASkipDigit:
.b100	c8		iny				iny
.b101	e0 00		cpx #$00			cpx 	#$00						; in decimals, can skip
.b103	10 bc		bpl $b0c1			bpl 	_FPAGetNextBody
.b105	68		pla				pla 								; throw minus
.b106					_FPAError:
.b106	7a		ply				ply
.b107	fa		plx				plx
.b108	38		sec				sec
.b109	60		rts				rts
.b10a					_FPAEndConstantPart:
.b10a	68		pla				pla 								; minus flag.
.b10b	d0 07		bne $b114			bne 	_FPANotNegative				; skip if +ve
.b10d	da		phx				phx
.b10e	a2 08		ldx #$08			ldx 	#B_Mantissa-A_Mantissa
.b110	20 1e ae	jsr $ae1e			jsr 	FPUIntegerNegateX
.b113	fa		plx				plx
.b114					_FPANotNegative:
.b114	8a		txa				txa 								; negate X as we want to divide by 10^x
.b115	49 ff		eor #$ff			eor 	#$FF
.b117	f0 01		beq $b11a			beq 	_FPANotDecimal2				; if value is $FF decimals never used, used 0.
.b119	1a		inc a				inc 	a
.b11a					_FPANotDecimal2:
.b11a	aa		tax				tax
.b11b	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; check for exponents
.b11d	c9 45		cmp #$45			cmp 	#"E"
.b11f	f0 05		beq $b126			beq 	_FPAExponent
.b121	c9 65		cmp #$65			cmp 	#"e"
.b123	d0 11		bne $b136			bne 	_FPANoExponent
.b125	c8		iny				iny
.b126					_FPAExponent:
.b126	da		phx				phx
.b127	20 41 b1	jsr $b141			jsr 	FPAGetExponent 				; get exponent.
.b12a	8a		txa				txa
.b12b	fa		plx				plx
.b12c	8e 00 03	stx $0300			stx 	TIM_PC 						; use this as a temporary as not running TIM.
.b12f	18		clc				clc
.b130	6d 00 03	adc $0300			adc 	TIM_PC 						; add to the exponent.
.b133	70 d1		bvs $b106			bvs 	_FPAError 					; overflow ?
.b135	aa		tax				tax
.b136					_FPANoExponent:
.b136	8a		txa				txa 								; if adjustment is zero, do nothing
.b137	f0 03		beq $b13c			beq 	_FPANoScaling
.b139	20 a9 b1	jsr $b1a9			jsr 	FPScaleBByATimes10
.b13c					_FPANoScaling:
.b13c	98		tya				tya 								; Y is the offset.
.b13d	7a		ply				ply
.b13e	fa		plx				plx
.b13f	18		clc				clc
.b140	60		rts				rts
.b141					FPAGetExponent:
.b141	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; get maybe +- sign.
.b143	c9 2b		cmp #$2b			cmp 	#"+"
.b145	f0 0d		beq $b154			beq 	_FPAGetExponentPreIY 		; if + skip and get
.b147	c9 2d		cmp #$2d			cmp 	#"-"
.b149	d0 0a		bne $b155			bne 	_FPAGetExponent 			; if not -, get as is
.b14b	20 54 b1	jsr $b154			jsr 	_FPAGetExponentPreIY 		; get value
.b14e	8a		txa				txa
.b14f	49 ff		eor #$ff			eor 	#$FF 						; negate it
.b151	1a		inc a				inc 	a
.b152	aa		tax				tax
.b153	60		rts				rts
.b154					_FPAGetExponentPreIY:
.b154	c8		iny				iny
.b155					_FPAGetExponent:
.b155	a2 00		ldx #$00			ldx 	#0 							; start at 0.
.b157					_FPAGELoop:
.b157	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; check char in range.
.b159	c9 30		cmp #$30			cmp 	#"0"
.b15b	90 17		bcc $b174			bcc 	_FPAGEExit
.b15d	c9 3a		cmp #$3a			cmp 	#"9"+1
.b15f	b0 13		bcs $b174			bcs 	_FPAGEExit
.b161	8e 00 03	stx $0300			stx 	TIM_PC
.b164	8a		txa				txa
.b165	0a		asl a				asl 	a 							; x2
.b166	0a		asl a				asl 	a 							; x4
.b167	6d 00 03	adc $0300			adc 	TIM_PC 						; x5
.b16a	0a		asl a				asl 	a 							; x10
.b16b	71 2a		adc ($2a),y			adc 	(zGenPtr),y 				; add digit and fix up.
.b16d	38		sec				sec
.b16e	e9 30		sbc #$30			sbc 	#"0"
.b170	aa		tax				tax 								; back in X.
.b171	c8		iny				iny 								; next character
.b172	d0 e3		bne $b157			bne 	_FPAGELoop
.b174					_FPAGEExit:
.b174	60		rts				rts
.b175					FPABTimes10Int:
.b175	20 a0 b1	jsr $b1a0			jsr 	_FPABTimes2 				; x 2
.b178	a5 1b		lda $1b				lda 	B_Mantissa+3 				; save on stack.
.b17a	48		pha				pha
.b17b	a5 1a		lda $1a				lda 	B_Mantissa+2
.b17d	48		pha				pha
.b17e	a5 19		lda $19				lda 	B_Mantissa+1
.b180	48		pha				pha
.b181	a5 18		lda $18				lda 	B_Mantissa+0
.b183	48		pha				pha
.b184	20 a0 b1	jsr $b1a0			jsr 	_FPABTimes2 				; x 4
.b187	20 a0 b1	jsr $b1a0			jsr 	_FPABTimes2 				; x 8
.b18a	18		clc				clc
.b18b	68		pla				pla 								; add x 2 on => x 10
.b18c	65 18		adc $18				adc 	B_Mantissa+0
.b18e	85 18		sta $18				sta 	B_Mantissa+0
.b190	68		pla				pla
.b191	65 19		adc $19				adc 	B_Mantissa+1
.b193	85 19		sta $19				sta 	B_Mantissa+1
.b195	68		pla				pla
.b196	65 1a		adc $1a				adc 	B_Mantissa+2
.b198	85 1a		sta $1a				sta 	B_Mantissa+2
.b19a	68		pla				pla
.b19b	65 1b		adc $1b				adc 	B_Mantissa+3
.b19d	85 1b		sta $1b				sta 	B_Mantissa+3
.b19f	60		rts				rts
.b1a0					_FPABTimes2:
.b1a0	06 18		asl $18				asl 	0+B_Mantissa
.b1a2	26 19		rol $19				rol 	1+B_Mantissa
.b1a4	26 1a		rol $1a				rol 	2+B_Mantissa
.b1a6	26 1b		rol $1b				rol 	3+B_Mantissa
.b1a8	60		rts				rts
.b1a9					FPScaleBByATimes10:
.b1a9	da		phx				phx
.b1aa	5a		phy				phy
.b1ab	a8		tay				tay
.b1ac	a2 07		ldx #$07			ldx 	#7
.b1ae					_FPSPush:
.b1ae	b5 10		lda $10,x			lda 	A_Mantissa,x
.b1b0	48		pha				pha
.b1b1	ca		dex				dex
.b1b2	10 fa		bpl $b1ae			bpl 	_FPSPush
.b1b4	98		tya				tya
.b1b5	48		pha				pha 								; save scalar.
.b1b6	20 1c ad	jsr $ad1c			jsr 	FPUCopyBtoA					; put B in A
.b1b9	a2 01		ldx #$01			ldx		#1
.b1bb	a0 00		ldy #$00			ldy 	#0
.b1bd	20 f8 ac	jsr $acf8			jsr 	FPUSetBFromXY 				; set B to 1
.b1c0	a2 08		ldx #$08			ldx 	#B_Mantissa-A_Mantissa
.b1c2	20 2a ad	jsr $ad2a			jsr 	FPUToFloatX 				; set B to 1.0
.b1c5	a2 00		ldx #$00			ldx 	#0
.b1c7	20 2a ad	jsr $ad2a			jsr 	FPUToFloatX 				; set A to float.
.b1ca	68		pla				pla 								; count in A
.b1cb	48		pha				pha
.b1cc	10 03		bpl $b1d1			bpl 	_FPCountPos 				; |count| in Y
.b1ce	49 ff		eor #$ff			eor 	#$FF
.b1d0	1a		inc a				inc 	a
.b1d1					_FPCountPos:
.b1d1	a8		tay				tay
.b1d2					_FPCreateScalar:
.b1d2	a2 08		ldx #$08			ldx 	#B_Mantissa-A_Mantissa 		; multiply B by 10.
.b1d4	20 b2 ad	jsr $adb2			jsr 	FPUTimes10X
.b1d7	20 01 ae	jsr $ae01			jsr 	FPUNormaliseX
.b1da	88		dey				dey
.b1db	d0 f5		bne $b1d2			bne 	_FPCreateScalar
.b1dd	68		pla				pla 								; get direction back
.b1de	30 05		bmi $b1e5			bmi 	_FPSDivide
.b1e0	20 2c af	jsr $af2c			jsr 	FPMultiply
.b1e3	80 03		bra $b1e8			bra 	_FPSExit
.b1e5					_FPSDivide:
.b1e5	20 ba af	jsr $afba			jsr 	FPDivide
.b1e8					_FPSExit:
.b1e8	20 0e ad	jsr $ad0e			jsr 	FPUCopyAToB 				; result back in B
.b1eb	a2 00		ldx #$00			ldx 	#0
.b1ed					_FPSPull:
.b1ed	68		pla				pla
.b1ee	95 10		sta $10,x			sta 	A_Mantissa,x
.b1f0	e8		inx				inx
.b1f1	e0 08		cpx #$08			cpx 	#8
.b1f3	d0 f8		bne $b1ed			bne 	_FPSPull
.b1f5	7a		ply				ply
.b1f6	fa		plx				plx
.b1f7	60		rts				rts

;******  Return to file: basic.asm

.b1f8					StartROM:
.b1f8	a2 ff		ldx #$ff			ldx 		#$FF 					; empty stack
.b1fa	9a		txs				txs
.b1fb	20 92 a0	jsr $a092			jsr 		IF_Reset 				; reset external interface
.b1fe	20 5a a9	jsr $a95a			jsr 		IFT_ClearScreen

;******  Processing file: testing/fptest.asm

.b201					FPTTest:
.b201	a9 bd		lda #$bd			lda 	#FPTTestData & $FF 			; set zGenPtr to data.
.b203	85 2a		sta $2a				sta 	zGenPtr
.b205	a9 b2		lda #$b2			lda 	#FPTTestData >> 8
.b207	85 2b		sta $2b				sta 	zGenPtr+1
.b209	a9 00		lda #$00			lda 	#0
.b20b	8d 02 03	sta $0302			sta	 	TIM_Irq
.b20e	8d 03 03	sta $0303			sta 	TIM_Irq+1
.b211					FPTNextLine:
.b211	ad 03 03	lda $0303			lda 	TIM_Irq+1
.b214	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.b217	ad 02 03	lda $0302			lda 	TIM_Irq
.b21a	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.b21d	20 ab a9	jsr $a9ab			jsr 	IFT_NewLine
.b220	ee 02 03	inc $0302			inc 	TIM_Irq
.b223	d0 03		bne $b228			bne 	FPTLoop
.b225	ee 03 03	inc $0303			inc 	TIM_Irq+1
.b228					FPTLoop:
.b228	20 ae b2	jsr $b2ae			jsr 	FPTGet 						; get next
.b22b	c9 4c		cmp #$4c			cmp 	#"L"						; Load [xxxx]
.b22d	f0 68		beq $b297			beq 	FPT_Load
.b22f	c9 51		cmp #$51			cmp 	#"Q" 						; Quit
.b231	f0 5d		beq $b290			beq 	FPT_Exit
.b233	c9 00		cmp #$00			cmp 	#0 							; Null Quit too.
.b235	f0 59		beq $b290			beq 	FPT_Exit
.b237	c9 43		cmp #$43			cmp 	#"C"						; Copy
.b239	f0 57		beq $b292			beq 	FPT_Copy
.b23b	c9 25		cmp #$25			cmp 	#"%"						; Ignore new line (%)
.b23d	f0 d2		beq $b211			beq 	FPTNextLine
.b23f	c9 21		cmp #$21			cmp 	#" "+1 						; Ignore control
.b241	90 e5		bcc $b228			bcc 	FPTLoop
.b243	c9 3d		cmp #$3d			cmp 	#"="						; = Checks A = B as floats (e.g. almost ....)
.b245	f0 40		beq $b287			beq		FPT_Equals
.b247	c9 2b		cmp #$2b			cmp 	#"+"						; Maths operations
.b249	f0 12		beq $b25d			beq 	FPT_Add
.b24b	c9 2d		cmp #$2d			cmp 	#"-"
.b24d	f0 13		beq $b262			beq 	FPT_Subtract
.b24f	c9 2a		cmp #$2a			cmp 	#"*"
.b251	f0 14		beq $b267			beq 	FPT_Multiply
.b253	c9 2f		cmp #$2f			cmp 	#"/"
.b255	f0 15		beq $b26c			beq 	FPT_Divide
.b257	c9 7e		cmp #$7e			cmp 	#"~"
.b259	f0 16		beq $b271			beq 	FPT_Compare
.b25b					FPT_Error:
.b25b	80 fe		bra $b25b			bra 	FPT_Error
.b25d					FPT_Add:
.b25d	20 86 ae	jsr $ae86			jsr 	FPAdd
.b260	80 c6		bra $b228			bra 	FPTLoop
.b262					FPT_Subtract:
.b262	20 7e ae	jsr $ae7e			jsr 	FPSubtract
.b265	80 c1		bra $b228			bra 	FPTLoop
.b267					FPT_Multiply:
.b267	20 2c af	jsr $af2c			jsr 	FPMultiply
.b26a	80 bc		bra $b228			bra 	FPTLoop
.b26c					FPT_Divide:
.b26c	20 ba af	jsr $afba			jsr 	FPDivide
.b26f	80 b7		bra $b228			bra 	FPTLoop
.b271					FPT_Compare:
.b271	20 3a ae	jsr $ae3a			jsr 	FPCompare
.b274	a0 00		ldy #$00			ldy 	#0
.b276	aa		tax				tax
.b277	10 01		bpl $b27a			bpl 	_FPTNotNeg
.b279	88		dey				dey
.b27a					_FPTNotNeg:
.b27a	20 f8 ac	jsr $acf8			jsr 	FPUSetBFromXY
.b27d	a2 08		ldx #$08			ldx 	#B_Mantissa-A_Mantissa
.b27f	20 2a ad	jsr $ad2a			jsr 	FPUToFloatX
.b282	20 1c ad	jsr $ad1c			jsr 	FPUCopyBToA
.b285	80 a1		bra $b228			bra 	FPTLoop
.b287					FPT_Equals:
.b287	20 3a ae	jsr $ae3a			jsr 	FPCompare
.b28a	c9 00		cmp #$00			cmp 	#0
.b28c	d0 cd		bne $b25b			bne 	FPT_Error
.b28e	80 98		bra $b228			bra 	FPTLoop
.b290					FPT_Exit:
.b290	80 fe		bra $b290	h1:		bra 	h1
.b292					FPT_Copy:
.b292	20 1c ad	jsr $ad1c			jsr 	FPUCopyBToA
.b295	80 91		bra $b228			bra 	FPTLoop
.b297					FPT_Load:
.b297	20 ae b2	jsr $b2ae			jsr 	FPTGet 						; get the [ character
.b29a	20 ac b0	jsr $b0ac			jsr 	FPAsciiToNumber
.b29d	b0 bc		bcs $b25b			bcs 	FPT_Error
.b29f	a2 08		ldx #$08			ldx 	#B_Mantissa-A_Mantissa		; make it float
.b2a1	20 2a ad	jsr $ad2a			jsr 	FPUToFloatX
.b2a4					_FPTLoad1:
.b2a4	20 ae b2	jsr $b2ae			jsr 	FPTGet 						; find the ] character
.b2a7	c9 5d		cmp #$5d			cmp 	#"]"
.b2a9	d0 f9		bne $b2a4			bne 	_FPTLoad1
.b2ab	4c 28 b2	jmp $b228			jmp 	FPTLoop
.b2ae	5a		phy		FPTGet:	phy
.b2af	a0 00		ldy #$00			ldy 	#0
.b2b1	b1 2a		lda ($2a),y			lda 	(zGenPtr),y
.b2b3	48		pha				pha
.b2b4	e6 2a		inc $2a				inc 	zGenPtr
.b2b6	d0 02		bne $b2ba			bne 	_FPTGet1
.b2b8	e6 2b		inc $2b				inc 	zGenPtr+1
.b2ba					_FPTGet1:
.b2ba	68		pla				pla
.b2bb	7a		ply				ply
.b2bc	60		rts				rts
.b2bd					FPTTestData:
>b2bd	4c 5b 31 2e 30 5d 20 43				.binary	"maths.test"
>b2c5	20 4c 5b 2d 31 36 36 2e 32 34 5d 20 2b 20 4c 5b
>b2d5	2d 31 36 35 2e 32 34 5d 20 3d 20 25 0a 4c 5b 2d
>b2e5	31 38 35 2e 38 32 38 5d 20 43 20 4c 5b 31 30 2e
>b2f5	35 37 39 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25
>b305	0a 4c 5b 38 34 2e 36 32 39 5d 20 43 20 4c 5b 32
>b315	2e 30 39 65 2d 31 30 5d 20 2f 20 4c 5b 34 2e 30
>b325	34 39 32 33 34 65 2b 31 31 5d 20 3d 20 25 0a 4c
>b335	5b 31 2e 30 5d 20 43 20 4c 5b 2d 31 35 38 2e 35
>b345	35 5d 20 2b 20 4c 5b 2d 31 35 37 2e 35 35 5d 20
>b355	3d 20 25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b 2d
>b365	35 33 33 30 2e 30 5d 20 7e 20 4c 5b 31 5d 20 3d
>b375	20 25 0a 4c 5b 2d 32 2e 30 5d 20 43 20 4c 5b 2d
>b385	31 30 38 2e 35 34 37 5d 20 2a 20 4c 5b 32 31 37
>b395	2e 30 39 34 5d 20 3d 20 25 0a 4c 5b 32 2e 30 5d
>b3a5	20 43 20 4c 5b 31 2e 30 5d 20 7e 20 4c 5b 31 5d
>b3b5	20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b
>b3c5	2d 32 2e 30 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25
>b3d5	0a 4c 5b 2d 32 2e 39 37 65 2d 31 32 5d 20 43 20
>b3e5	4c 5b 31 2e 30 5d 20 2d 20 4c 5b 2d 31 2e 30 30
>b3f5	30 30 30 30 30 30 30 30 30 32 39 37 5d 20 3d 20
>b405	25 0a 4c 5b 30 2e 30 5d 20 43 20 4c 5b 31 31 2e
>b415	30 5d 20 2f 20 4c 5b 30 2e 30 5d 20 3d 20 25 0a
>b425	4c 5b 31 33 37 2e 39 37 34 5d 20 43 20 4c 5b 2d
>b435	33 2e 30 5d 20 2d 20 4c 5b 31 34 30 2e 39 37 34
>b445	5d 20 3d 20 25 0a 4c 5b 2d 31 32 33 2e 39 39 5d
>b455	20 43 20 4c 5b 2d 32 2e 38 31 5d 20 2f 20 4c 5b
>b465	34 34 2e 31 32 34 35 35 35 31 36 30 31 34 32 33
>b475	34 5d 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 43 20
>b485	4c 5b 39 38 2e 31 31 39 5d 20 2d 20 4c 5b 2d 39
>b495	38 2e 31 31 39 5d 20 3d 20 25 0a 4c 5b 2d 30 2e
>b4a5	36 33 5d 20 43 20 4c 5b 2d 31 2e 30 5d 20 2f 20
>b4b5	4c 5b 30 2e 36 33 5d 20 3d 20 25 0a 4c 5b 2d 35
>b4c5	2e 35 30 30 30 30 30 65 2b 30 39 5d 20 43 20 4c
>b4d5	5b 2d 38 31 2e 38 37 38 5d 20 2b 20 4c 5b 2d 35
>b4e5	2e 35 30 30 30 30 30 65 2b 30 39 5d 20 3d 20 25
>b4f5	0a 4c 5b 36 2e 32 36 65 2d 31 31 5d 20 43 20 4c
>b505	5b 32 2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20
>b515	25 0a 4c 5b 31 30 2e 34 36 5d 20 43 20 4c 5b 2d
>b525	32 37 2e 30 32 5d 20 7e 20 4c 5b 31 5d 20 3d 20
>b535	25 0a 4c 5b 36 36 2e 39 5d 20 43 20 4c 5b 37 2e
>b545	36 38 30 30 30 30 65 2b 30 39 5d 20 2b 20 4c 5b
>b555	37 2e 36 38 30 30 30 30 65 2b 30 39 5d 20 3d 20
>b565	25 0a 4c 5b 2d 31 30 35 2e 36 38 38 5d 20 43 20
>b575	4c 5b 2d 32 2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20
>b585	3d 20 25 0a 4c 5b 2d 38 2e 39 30 30 30 30 30 65
>b595	2b 30 38 5d 20 43 20 4c 5b 2d 38 2e 39 30 30 30
>b5a5	30 30 65 2b 30 38 5d 20 2f 20 4c 5b 31 2e 30 5d
>b5b5	20 3d 20 25 0a 4c 5b 2d 36 35 33 30 2e 30 5d 20
>b5c5	43 20 4c 5b 30 2e 35 37 31 5d 20 2f 20 4c 5b 2d
>b5d5	31 31 34 33 36 2e 30 37 37 30 35 37 37 39 33 33
>b5e5	34 35 5d 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 43
>b5f5	20 4c 5b 2d 34 2e 35 37 65 2d 31 30 5d 20 2b 20
>b605	4c 5b 31 2e 39 39 39 39 39 39 39 39 39 35 34 33
>b615	5d 20 3d 20 25 0a 4c 5b 2d 35 37 2e 33 34 5d 20
>b625	43 20 4c 5b 31 37 32 2e 37 33 35 5d 20 2d 20 4c
>b635	5b 2d 32 33 30 2e 30 37 35 30 30 30 30 30 30 30
>b645	30 30 30 32 5d 20 3d 20 25 0a 4c 5b 2d 31 2e 30
>b655	5d 20 43 20 4c 5b 30 2e 30 34 36 5d 20 2a 20 4c
>b665	5b 2d 30 2e 30 34 36 5d 20 3d 20 25 0a 4c 5b 32
>b675	2e 38 32 30 30 30 30 65 2b 30 36 5d 20 43 20 4c
>b685	5b 2d 39 33 2e 34 33 31 5d 20 2d 20 4c 5b 32 2e
>b695	38 32 30 30 39 33 65 2b 30 36 5d 20 3d 20 25 0a
>b6a5	4c 5b 31 35 33 30 2e 30 5d 20 43 20 4c 5b 2d 32
>b6b5	2e 30 5d 20 2a 20 4c 5b 2d 33 30 36 30 2e 30 5d
>b6c5	20 3d 20 25 0a 4c 5b 2d 32 2e 30 5d 20 43 20 4c
>b6d5	5b 31 34 36 2e 37 38 5d 20 2b 20 4c 5b 31 34 34
>b6e5	2e 37 38 5d 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20
>b6f5	43 20 4c 5b 2d 31 2e 30 5d 20 2b 20 4c 5b 32 2e
>b705	30 5d 20 3d 20 25 0a 4c 5b 2d 36 2e 38 32 65 2d
>b715	30 36 5d 20 43 20 4c 5b 31 30 38 2e 32 33 36 5d
>b725	20 2b 20 4c 5b 31 30 38 2e 32 33 35 39 39 33 31
>b735	38 30 30 30 30 30 31 5d 20 3d 20 25 0a 4c 5b 30
>b745	2e 30 5d 20 43 20 4c 5b 2d 31 39 33 2e 32 31 34
>b755	5d 20 2d 20 4c 5b 31 39 33 2e 32 31 34 5d 20 3d
>b765	20 25 0a 4c 5b 31 35 35 2e 34 32 34 5d 20 43 20
>b775	4c 5b 38 2e 34 36 65 2d 30 39 5d 20 2d 20 4c 5b
>b785	31 35 35 2e 34 32 33 39 39 39 39 39 31 35 34 5d
>b795	20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 43 20 4c 5b
>b7a5	39 2e 35 37 65 2d 30 36 5d 20 2f 20 4c 5b 33 31
>b7b5	33 34 37 39 2e 36 32 33 38 32 34 34 35 31 34 5d
>b7c5	20 3d 20 25 0a 4c 5b 2d 31 31 30 2e 38 35 33 5d
>b7d5	20 43 20 4c 5b 2d 31 30 37 2e 37 38 36 5d 20 2b
>b7e5	20 4c 5b 2d 32 31 38 2e 36 33 39 5d 20 3d 20 25
>b7f5	0a 4c 5b 2d 36 31 2e 33 32 5d 20 43 20 4c 5b 2d
>b805	39 2e 35 33 65 2d 30 38 5d 20 2d 20 4c 5b 2d 36
>b815	31 2e 33 31 39 39 39 39 39 30 34 37 5d 20 3d 20
>b825	25 0a 4c 5b 37 33 2e 32 37 5d 20 43 20 4c 5b 35
>b835	38 2e 32 31 38 5d 20 2b 20 4c 5b 31 33 31 2e 34
>b845	38 38 5d 20 3d 20 25 0a 4c 5b 32 2e 35 34 65 2d
>b855	30 37 5d 20 43 20 4c 5b 32 2e 30 5d 20 7e 20 4c
>b865	5b 2d 31 5d 20 3d 20 25 0a 4c 5b 31 33 36 2e 36
>b875	37 32 5d 20 43 20 4c 5b 35 38 2e 33 33 34 5d 20
>b885	2b 20 4c 5b 31 39 35 2e 30 30 36 5d 20 3d 20 25
>b895	0a 4c 5b 36 35 2e 34 35 36 5d 20 43 20 4c 5b 38
>b8a5	31 2e 31 32 36 5d 20 7e 20 4c 5b 2d 31 5d 20 3d
>b8b5	20 25 0a 4c 5b 31 2e 30 5d 20 43 20 4c 5b 2d 38
>b8c5	2e 38 32 65 2d 30 38 5d 20 2f 20 4c 5b 2d 31 2e
>b8d5	31 33 33 37 38 37 65 2b 30 37 5d 20 3d 20 25 0a
>b8e5	4c 5b 2d 31 38 31 2e 33 35 32 5d 20 43 20 4c 5b
>b8f5	2d 31 33 38 2e 30 31 33 5d 20 2d 20 4c 5b 2d 34
>b905	33 2e 33 33 39 5d 20 3d 20 25 0a 4c 5b 2d 32 2e
>b915	39 34 30 30 30 30 65 2b 31 30 5d 20 43 20 4c 5b
>b925	31 31 36 2e 31 35 34 5d 20 2b 20 4c 5b 2d 32 2e
>b935	39 34 30 30 30 30 65 2b 31 30 5d 20 3d 20 25 0a
>b945	4c 5b 2d 31 31 35 2e 30 35 33 5d 20 43 20 4c 5b
>b955	2d 30 2e 30 30 30 37 39 36 5d 20 7e 20 4c 5b 2d
>b965	31 5d 20 3d 20 25 0a 4c 5b 2d 35 35 2e 37 31 5d
>b975	20 43 20 4c 5b 2d 31 32 35 2e 30 5d 20 2b 20 4c
>b985	5b 2d 31 38 30 2e 37 31 5d 20 3d 20 25 0a 4c 5b
>b995	2d 33 37 2e 30 5d 20 43 20 4c 5b 32 2e 30 5d 20
>b9a5	2a 20 4c 5b 2d 37 34 2e 30 5d 20 3d 20 25 0a 4c
>b9b5	5b 2d 33 2e 30 5d 20 43 20 4c 5b 32 2e 32 33 30
>b9c5	30 30 30 65 2b 31 35 5d 20 2f 20 4c 5b 2d 31 2e
>b9d5	33 34 35 32 39 31 34 37 39 38 32 30 36 32 37 38
>b9e5	65 2d 31 35 5d 20 3d 20 25 0a 4c 5b 2d 31 31 39
>b9f5	2e 38 31 5d 20 43 20 4c 5b 2d 39 2e 34 33 65 2d
>ba05	30 36 5d 20 2f 20 4c 5b 31 2e 32 37 30 35 32 30
>ba15	65 2b 30 37 5d 20 3d 20 25 0a 4c 5b 34 2e 36 31
>ba25	5d 20 43 20 4c 5b 36 38 36 2e 30 5d 20 2b 20 4c
>ba35	5b 36 39 30 2e 36 31 5d 20 3d 20 25 0a 4c 5b 2d
>ba45	39 2e 32 35 5d 20 43 20 4c 5b 2d 32 2e 37 30 30
>ba55	30 30 30 65 2b 31 34 5d 20 7e 20 4c 5b 31 5d 20
>ba65	3d 20 25 0a 4c 5b 31 35 30 2e 31 39 34 5d 20 43
>ba75	20 4c 5b 2d 39 2e 34 36 5d 20 2f 20 4c 5b 2d 31
>ba85	35 2e 38 37 36 37 34 34 31 38 36 30 34 36 35 30
>ba95	38 5d 20 3d 20 25 0a 4c 5b 2d 38 37 2e 38 32 37
>baa5	5d 20 43 20 4c 5b 2d 37 2e 33 33 30 30 30 30 65
>bab5	2b 30 39 5d 20 2f 20 4c 5b 31 2e 31 39 38 31 38
>bac5	35 35 33 38 38 38 31 33 30 39 36 65 2d 30 38 5d
>bad5	20 3d 20 25 0a 4c 5b 31 39 35 2e 35 34 36 5d 20
>bae5	43 20 4c 5b 2d 31 30 2e 38 5d 20 2d 20 4c 5b 32
>baf5	30 36 2e 33 34 36 5d 20 3d 20 25 0a 4c 5b 31 30
>bb05	32 2e 37 37 37 5d 20 43 20 4c 5b 31 2e 30 5d 20
>bb15	7e 20 4c 5b 31 5d 20 3d 20 25 0a 4c 5b 2d 35 2e
>bb25	30 31 30 30 30 30 65 2b 31 33 5d 20 43 20 4c 5b
>bb35	2d 32 2e 37 33 30 30 30 30 65 2b 30 36 5d 20 2d
>bb45	20 4c 5b 2d 35 2e 30 31 30 30 30 30 65 2b 31 33
>bb55	5d 20 3d 20 25 0a 4c 5b 2d 33 34 2e 39 34 35 5d
>bb65	20 43 20 4c 5b 34 37 2e 38 38 5d 20 2f 20 4c 5b
>bb75	2d 30 2e 37 32 39 38 34 35 34 34 36 39 35 30 37
>bb85	31 30 31 5d 20 3d 20 25 0a 4c 5b 2d 32 2e 31 35
>bb95	30 30 30 30 65 2b 31 30 5d 20 43 20 4c 5b 2d 32
>bba5	2e 31 35 30 30 30 30 65 2b 31 30 5d 20 2d 20 4c
>bbb5	5b 30 2e 30 5d 20 3d 20 25 0a 4c 5b 39 2e 33 36
>bbc5	30 30 30 30 65 2b 30 37 5d 20 43 20 4c 5b 2d 31
>bbd5	37 32 2e 34 34 31 5d 20 2f 20 4c 5b 2d 35 34 32
>bbe5	37 39 34 2e 33 34 37 30 35 32 30 33 35 32 5d 20
>bbf5	3d 20 25 0a 4c 5b 2d 37 35 2e 30 39 34 5d 20 43
>bc05	20 4c 5b 2d 31 2e 30 5d 20 2a 20 4c 5b 37 35 2e
>bc15	30 39 34 5d 20 3d 20 25 0a 4c 5b 2d 31 2e 30 5d
>bc25	20 43 20 4c 5b 2d 33 2e 30 5d 20 2f 20 4c 5b 30
>bc35	2e 33 33 33 33 33 33 33 33 33 33 33 33 33 33 33
>bc45	33 5d 20 3d 20 25 0a 4c 5b 31 30 36 2e 31 30 32
>bc55	5d 20 43 20 4c 5b 2d 37 35 2e 34 34 32 5d 20 2b
>bc65	20 4c 5b 33 30 2e 36 36 30 30 30 30 30 30 30 30
>bc75	30 30 30 31 5d 20 3d 20 25 0a 4c 5b 39 2e 32 32
>bc85	65 2d 30 35 5d 20 43 20 4c 5b 36 2e 37 37 30 30
>bc95	30 30 65 2b 30 39 5d 20 7e 20 4c 5b 2d 31 5d 20
>bca5	3d 20 25 0a 4c 5b 33 2e 30 5d 20 43 20 4c 5b 2d
>bcb5	31 2e 30 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25 0a
>bcc5	4c 5b 39 36 2e 30 33 5d 20 43 20 4c 5b 36 2e 36
>bcd5	33 30 30 30 30 65 2b 31 35 5d 20 2b 20 4c 5b 36
>bce5	2e 36 33 30 30 30 30 65 2b 31 35 5d 20 3d 20 25
>bcf5	0a 4c 5b 35 2e 33 36 5d 20 43 20 4c 5b 30 2e 30
>bd05	30 38 34 33 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25
>bd15	0a 4c 5b 36 35 2e 34 37 5d 20 43 20 4c 5b 33 2e
>bd25	34 32 65 2d 31 34 5d 20 2b 20 4c 5b 36 35 2e 34
>bd35	37 30 30 30 30 30 30 30 30 30 30 30 33 5d 20 3d
>bd45	20 25 0a 4c 5b 33 38 2e 38 33 5d 20 43 20 4c 5b
>bd55	32 2e 30 5d 20 2f 20 4c 5b 31 39 2e 34 31 35 5d
>bd65	20 3d 20 25 0a 4c 5b 2d 31 34 37 2e 33 33 32 5d
>bd75	20 43 20 4c 5b 31 36 38 2e 37 36 34 5d 20 2d 20
>bd85	4c 5b 2d 33 31 36 2e 30 39 36 5d 20 3d 20 25 0a
>bd95	4c 5b 2d 35 2e 31 30 30 30 30 30 65 2b 31 30 5d
>bda5	20 43 20 4c 5b 2d 31 2e 30 5d 20 2b 20 4c 5b 2d
>bdb5	35 2e 31 30 30 30 30 30 65 2b 31 30 5d 20 3d 20
>bdc5	25 0a 4c 5b 2d 30 2e 30 30 30 34 38 33 5d 20 43
>bdd5	20 4c 5b 2d 39 32 2e 39 32 5d 20 2d 20 4c 5b 39
>bde5	32 2e 39 31 39 35 31 37 5d 20 3d 20 25 0a 4c 5b
>bdf5	31 36 32 2e 30 37 5d 20 43 20 4c 5b 2d 37 31 2e
>be05	31 32 5d 20 2b 20 4c 5b 39 30 2e 39 34 39 39 39
>be15	39 39 39 39 39 39 39 39 39 5d 20 3d 20 25 0a 4c
>be25	5b 30 2e 30 5d 20 43 20 4c 5b 2d 31 38 38 2e 34
>be35	38 32 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25 0a 4c
>be45	5b 33 2e 39 31 65 2d 31 32 5d 20 43 20 4c 5b 2d
>be55	31 32 38 2e 34 35 5d 20 2f 20 4c 5b 2d 33 2e 30
>be65	34 33 39 38 35 39 38 36 37 36 35 32 37 39 65 2d
>be75	31 34 5d 20 3d 20 25 0a 4c 5b 2d 31 32 30 2e 32
>be85	37 34 5d 20 43 20 4c 5b 2d 39 35 2e 32 31 5d 20
>be95	2b 20 4c 5b 2d 32 31 35 2e 34 38 33 39 39 39 39
>bea5	39 39 39 39 39 39 38 5d 20 3d 20 25 0a 4c 5b 2d
>beb5	36 2e 30 39 30 30 30 30 65 2b 31 33 5d 20 43 20
>bec5	4c 5b 34 37 2e 39 30 37 5d 20 2b 20 4c 5b 2d 36
>bed5	2e 30 39 30 30 30 30 65 2b 31 33 5d 20 3d 20 25
>bee5	0a 4c 5b 31 2e 30 5d 20 43 20 4c 5b 2d 32 39 2e
>bef5	36 35 37 5d 20 2a 20 4c 5b 2d 32 39 2e 36 35 37
>bf05	5d 20 3d 20 25 0a 4c 5b 31 35 31 2e 30 37 38 5d
>bf15	20 43 20 4c 5b 35 30 2e 36 32 37 5d 20 2f 20 4c
>bf25	5b 32 2e 39 38 34 31 33 38 38 39 38 32 31 36 33
>bf35	36 37 5d 20 3d 20 25 0a 4c 5b 38 34 2e 32 31 5d
>bf45	20 43 20 4c 5b 2d 31 33 34 2e 35 32 32 5d 20 2d
>bf55	20 4c 5b 32 31 38 2e 37 33 31 39 39 39 39 39 39
>bf65	39 39 39 39 37 5d 20 3d 20 25 0a 4c 5b 32 2e 30
>bf75	5d 20 43 20 4c 5b 2d 39 2e 37 38 30 30 30 30 65
>bf85	2b 31 34 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25 0a
>bf95	4c 5b 31 37 31 2e 32 37 5d 20 43 20 4c 5b 31 2e
>bfa5	30 5d 20 2d 20 4c 5b 31 37 30 2e 32 37 5d 20 3d
>bfb5	20 25 0a 4c 5b 2d 35 35 2e 30 32 5d 20 43 20 4c
>bfc5	5b 2d 32 2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20 3d
>bfd5	20 25 0a 4c 5b 2d 31 2e 30 5d 20 43 20 4c 5b 31
>bfe5	37 32 2e 39 37 36 5d 20 2b 20 4c 5b 31 37 31 2e
>bff5	39 37 36 5d 20 3d 20 25 0a 4c 5b 2d 31 30 39 2e
>c005	37 35 5d 20 43 20 4c 5b 33 2e 30 5d 20 2f 20 4c
>c015	5b 2d 33 36 2e 35 38 33 33 33 33 33 33 33 33 33
>c025	33 33 33 36 5d 20 3d 20 25 0a 4c 5b 30 2e 30 30
>c035	32 39 36 5d 20 43 20 4c 5b 2d 33 2e 30 37 30 30
>c045	30 30 65 2b 30 38 5d 20 2d 20 4c 5b 33 2e 30 37
>c055	30 30 30 30 65 2b 30 38 5d 20 3d 20 25 0a 4c 5b
>c065	2d 30 2e 30 35 30 38 5d 20 43 20 4c 5b 31 2e 30
>c075	5d 20 2d 20 4c 5b 2d 31 2e 30 35 30 38 5d 20 3d
>c085	20 25 0a 4c 5b 36 36 2e 35 33 39 5d 20 43 20 4c
>c095	5b 39 34 2e 32 32 5d 20 2d 20 4c 5b 2d 32 37 2e
>c0a5	36 38 30 39 39 39 39 39 39 39 39 39 39 39 37 5d
>c0b5	20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b
>c0c5	2d 31 38 30 2e 38 32 34 5d 20 7e 20 4c 5b 31 5d
>c0d5	20 3d 20 25 0a 4c 5b 31 2e 30 5d 20 43 20 4c 5b
>c0e5	2d 31 32 31 2e 37 32 5d 20 2b 20 4c 5b 2d 31 32
>c0f5	30 2e 37 32 5d 20 3d 20 25 0a 4c 5b 2d 37 34 2e
>c105	35 35 32 5d 20 43 20 4c 5b 2d 37 35 2e 31 36 5d
>c115	20 2b 20 4c 5b 2d 31 34 39 2e 37 31 32 5d 20 3d
>c125	20 25 0a 4c 5b 2d 36 38 2e 30 33 5d 20 43 20 4c
>c135	5b 31 33 39 2e 38 32 5d 20 2d 20 4c 5b 2d 32 30
>c145	37 2e 38 35 5d 20 3d 20 25 0a 4c 5b 2d 37 31 2e
>c155	37 38 39 5d 20 43 20 4c 5b 2d 37 31 2e 37 38 39
>c165	5d 20 2b 20 4c 5b 2d 31 34 33 2e 35 37 38 5d 20
>c175	3d 20 25 0a 4c 5b 2d 31 37 38 2e 34 5d 20 43 20
>c185	4c 5b 2d 31 37 38 2e 34 5d 20 7e 20 4c 5b 30 5d
>c195	20 3d 20 25 0a 4c 5b 33 2e 30 36 65 2d 30 35 5d
>c1a5	20 43 20 4c 5b 31 2e 30 5d 20 7e 20 4c 5b 2d 31
>c1b5	5d 20 3d 20 25 0a 4c 5b 30 2e 32 38 5d 20 43 20
>c1c5	4c 5b 30 2e 32 38 5d 20 2b 20 4c 5b 30 2e 35 36
>c1d5	5d 20 3d 20 25 0a 4c 5b 2d 33 2e 36 65 2d 30 36
>c1e5	5d 20 43 20 4c 5b 2d 34 34 2e 34 30 34 5d 20 2f
>c1f5	20 4c 5b 38 2e 31 30 37 33 37 37 37 31 33 37 31
>c205	39 34 38 34 65 2d 30 38 5d 20 3d 20 25 0a 4c 5b
>c215	36 39 2e 37 37 5d 20 43 20 4c 5b 34 2e 37 39 30
>c225	30 30 30 65 2b 31 31 5d 20 2b 20 4c 5b 34 2e 37
>c235	39 30 30 30 30 65 2b 31 31 5d 20 3d 20 25 0a 4c
>c245	5b 34 35 2e 39 38 33 5d 20 43 20 4c 5b 30 2e 30
>c255	5d 20 2a 20 4c 5b 30 2e 30 5d 20 3d 20 25 0a 4c
>c265	5b 31 39 37 2e 31 39 5d 20 43 20 4c 5b 37 30 35
>c275	2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25 0a
>c285	4c 5b 2d 31 2e 30 5d 20 43 20 4c 5b 33 2e 30 39
>c295	65 2d 31 31 5d 20 2b 20 4c 5b 2d 30 2e 39 39 39
>c2a5	39 39 39 39 39 39 39 36 39 31 5d 20 3d 20 25 0a
>c2b5	4c 5b 2d 36 2e 35 37 30 30 30 30 65 2b 30 36 5d
>c2c5	20 43 20 4c 5b 31 36 35 2e 38 5d 20 2f 20 4c 5b
>c2d5	2d 33 39 36 32 36 2e 30 35 35 34 38 38 35 34 30
>c2e5	34 30 35 5d 20 3d 20 25 0a 4c 5b 2d 31 33 36 2e
>c2f5	35 33 32 5d 20 43 20 4c 5b 31 33 39 2e 35 31 5d
>c305	20 2b 20 4c 5b 32 2e 39 37 37 39 39 39 39 39 39
>c315	39 39 39 39 38 5d 20 3d 20 25 0a 4c 5b 31 34 33
>c325	2e 38 36 5d 20 43 20 4c 5b 2d 31 2e 36 37 30 30
>c335	30 30 65 2b 31 33 5d 20 2f 20 4c 5b 2d 38 2e 36
>c345	31 34 33 37 31 32 35 37 34 38 35 30 33 31 65 2d
>c355	31 32 5d 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 43
>c365	20 4c 5b 2d 30 2e 33 39 35 5d 20 2f 20 4c 5b 2d
>c375	37 2e 35 39 34 39 33 36 37 30 38 38 36 30 37 35
>c385	39 5d 20 3d 20 25 0a 4c 5b 35 37 2e 36 30 36 5d
>c395	20 43 20 4c 5b 2d 32 2e 30 5d 20 7e 20 4c 5b 31
>c3a5	5d 20 3d 20 25 0a 4c 5b 37 2e 32 33 65 2d 31 34
>c3b5	5d 20 43 20 4c 5b 2d 33 2e 30 5d 20 2b 20 4c 5b
>c3c5	2d 32 2e 39 39 39 39 39 39 39 39 39 39 39 39 39
>c3d5	32 37 36 5d 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20
>c3e5	43 20 4c 5b 34 31 2e 35 31 5d 20 2f 20 4c 5b 30
>c3f5	2e 30 5d 20 3d 20 25 0a 4c 5b 32 2e 36 65 2d 31
>c405	35 5d 20 43 20 4c 5b 2d 33 2e 34 32 30 30 30 30
>c415	65 2b 31 30 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25
>c425	0a 4c 5b 39 2e 30 35 65 2d 31 32 5d 20 43 20 4c
>c435	5b 2d 31 2e 35 38 65 2d 30 39 5d 20 2f 20 4c 5b
>c445	2d 30 2e 30 30 35 37 32 37 38 34 38 31 30 31 32
>c455	36 35 38 32 34 5d 20 3d 20 25 0a 4c 5b 2d 31 2e
>c465	30 5d 20 43 20 4c 5b 2d 31 37 2e 34 39 5d 20 2a
>c475	20 4c 5b 31 37 2e 34 39 5d 20 3d 20 25 0a 4c 5b
>c485	2d 35 2e 34 30 39 5d 20 43 20 4c 5b 2d 31 34 33
>c495	2e 30 32 5d 20 2f 20 4c 5b 30 2e 30 33 37 38 31
>c4a5	39 38 38 35 33 33 30 37 32 32 39 37 34 5d 20 3d
>c4b5	20 25 0a 4c 5b 31 36 33 2e 32 36 39 5d 20 43 20
>c4c5	4c 5b 32 2e 37 34 65 2d 31 30 5d 20 7e 20 4c 5b
>c4d5	31 5d 20 3d 20 25 0a 4c 5b 2d 36 36 2e 35 5d 20
>c4e5	43 20 4c 5b 2d 32 2e 30 5d 20 7e 20 4c 5b 2d 31
>c4f5	5d 20 3d 20 25 0a 4c 5b 2d 33 2e 30 5d 20 43 20
>c505	4c 5b 36 2e 30 30 30 30 30 30 65 2b 31 33 5d 20
>c515	7e 20 4c 5b 2d 31 5d 20 3d 20 25 0a 4c 5b 2d 30
>c525	2e 39 32 34 5d 20 43 20 4c 5b 32 2e 34 65 2d 31
>c535	35 5d 20 2d 20 4c 5b 2d 30 2e 39 32 34 30 30 30
>c545	30 30 30 30 30 30 30 30 32 35 5d 20 3d 20 25 0a
>c555	4c 5b 36 34 2e 31 5d 20 43 20 4c 5b 31 32 34 2e
>c565	36 32 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25 0a
>c575	4c 5b 2d 39 30 2e 34 37 5d 20 43 20 4c 5b 31 39
>c585	33 2e 39 33 38 5d 20 2f 20 4c 5b 2d 30 2e 34 36
>c595	36 34 38 39 32 39 30 33 39 31 37 37 34 37 5d 20
>c5a5	3d 20 25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b 33
>c5b5	2e 30 5d 20 2a 20 4c 5b 36 2e 30 5d 20 3d 20 25
>c5c5	0a 4c 5b 2d 31 39 38 2e 36 33 5d 20 43 20 4c 5b
>c5d5	33 2e 30 5d 20 2f 20 4c 5b 2d 36 36 2e 32 31 5d
>c5e5	20 3d 20 25 0a 4c 5b 2d 31 36 31 2e 34 35 5d 20
>c5f5	43 20 4c 5b 38 2e 36 65 2d 31 36 5d 20 2b 20 4c
>c605	5b 2d 31 36 31 2e 34 35 5d 20 3d 20 25 0a 4c 5b
>c615	37 2e 30 31 30 30 30 30 65 2b 30 36 5d 20 43 20
>c625	4c 5b 31 39 2e 39 36 5d 20 2d 20 4c 5b 37 2e 30
>c635	30 39 39 38 30 65 2b 30 36 5d 20 3d 20 25 0a 4c
>c645	5b 2d 31 33 33 2e 35 36 5d 20 43 20 4c 5b 2d 31
>c655	2e 30 5d 20 2d 20 4c 5b 2d 31 33 32 2e 35 36 5d
>c665	20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 43 20 4c 5b
>c675	2d 33 2e 30 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25
>c685	0a 4c 5b 30 2e 30 30 34 33 5d 20 43 20 4c 5b 30
>c695	2e 30 5d 20 2d 20 4c 5b 30 2e 30 30 34 33 5d 20
>c6a5	3d 20 25 0a 4c 5b 31 36 36 2e 36 35 36 5d 20 43
>c6b5	20 4c 5b 2d 31 30 34 2e 39 39 5d 20 2f 20 4c 5b
>c6c5	2d 31 2e 35 38 37 33 35 31 31 37 36 33 30 32 35
>c6d5	30 35 32 5d 20 3d 20 25 0a 4c 5b 2d 31 2e 30 5d
>c6e5	20 43 20 4c 5b 34 2e 37 39 65 2d 31 33 5d 20 7e
>c6f5	20 4c 5b 2d 31 5d 20 3d 20 25 0a 4c 5b 33 2e 30
>c705	5d 20 43 20 4c 5b 2d 31 34 2e 37 34 5d 20 2a 20
>c715	4c 5b 2d 34 34 2e 32 32 5d 20 3d 20 25 0a 4c 5b
>c725	30 2e 30 5d 20 43 20 4c 5b 31 37 31 2e 39 36 5d
>c735	20 2d 20 4c 5b 2d 31 37 31 2e 39 36 5d 20 3d 20
>c745	25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b 33 34 33
>c755	30 30 30 2e 30 5d 20 2d 20 4c 5b 2d 33 34 32 39
>c765	39 38 2e 30 5d 20 3d 20 25 0a 4c 5b 2d 31 34 31
>c775	2e 33 5d 20 43 20 4c 5b 2d 31 34 31 2e 33 5d 20
>c785	2b 20 4c 5b 2d 32 38 32 2e 36 5d 20 3d 20 25 0a
>c795	4c 5b 2d 34 38 2e 34 33 33 5d 20 43 20 4c 5b 2d
>c7a5	31 2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25
>c7b5	0a 4c 5b 31 32 32 2e 38 5d 20 43 20 4c 5b 30 2e
>c7c5	30 5d 20 2b 20 4c 5b 31 32 32 2e 38 5d 20 3d 20
>c7d5	25 0a 4c 5b 2d 31 32 34 2e 31 38 5d 20 43 20 4c
>c7e5	5b 2d 36 2e 31 35 65 2d 31 32 5d 20 7e 20 4c 5b
>c7f5	2d 31 5d 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 43
>c805	20 4c 5b 2d 31 39 33 2e 32 34 5d 20 2f 20 4c 5b
>c815	2d 30 2e 30 31 30 33 34 39 38 32 34 30 35 32 39
>c825	39 31 30 39 38 5d 20 3d 20 25 0a 4c 5b 2d 32 2e
>c835	30 5d 20 43 20 4c 5b 31 38 32 2e 32 37 5d 20 2a
>c845	20 4c 5b 2d 33 36 34 2e 35 34 5d 20 3d 20 25 0a
>c855	4c 5b 2d 31 2e 30 5d 20 43 20 4c 5b 2d 32 2e 30
>c865	5d 20 2b 20 4c 5b 2d 33 2e 30 5d 20 3d 20 25 0a
>c875	4c 5b 2d 32 2e 30 5d 20 43 20 4c 5b 31 2e 30 5d
>c885	20 2a 20 4c 5b 2d 32 2e 30 5d 20 3d 20 25 0a 4c
>c895	5b 2d 38 36 2e 36 31 5d 20 43 20 4c 5b 31 34 32
>c8a5	2e 34 38 5d 20 2f 20 4c 5b 2d 30 2e 36 30 37 38
>c8b5	37 34 37 38 39 34 34 34 31 33 32 35 5d 20 3d 20
>c8c5	25 0a 4c 5b 31 2e 30 5d 20 43 20 4c 5b 35 31 2e
>c8d5	32 37 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25 0a
>c8e5	4c 5b 2d 33 2e 37 32 65 2d 31 31 5d 20 43 20 4c
>c8f5	5b 2d 35 39 2e 38 36 5d 20 7e 20 4c 5b 31 5d 20
>c905	3d 20 25 0a 4c 5b 2d 37 2e 39 32 30 30 30 30 65
>c915	2b 31 33 5d 20 43 20 4c 5b 31 2e 30 5d 20 7e 20
>c925	4c 5b 2d 31 5d 20 3d 20 25 0a 4c 5b 33 2e 30 5d
>c935	20 43 20 4c 5b 31 36 36 2e 34 31 38 5d 20 2a 20
>c945	4c 5b 34 39 39 2e 32 35 34 5d 20 3d 20 25 0a 4c
>c955	5b 2d 31 30 33 2e 36 36 32 5d 20 43 20 4c 5b 2d
>c965	30 2e 30 30 31 30 37 5d 20 2f 20 4c 5b 39 36 38
>c975	38 30 2e 33 37 33 38 33 31 37 37 35 37 31 5d 20
>c985	3d 20 25 0a 4c 5b 32 2e 33 37 65 2d 31 34 5d 20
>c995	43 20 4c 5b 2d 31 36 2e 33 5d 20 2f 20 4c 5b 2d
>c9a5	31 2e 34 35 33 39 38 37 37 33 30 30 36 31 33 34
>c9b5	39 35 65 2d 31 35 5d 20 3d 20 25 0a 4c 5b 36 30
>c9c5	2e 30 36 37 5d 20 43 20 4c 5b 30 2e 37 35 36 5d
>c9d5	20 2d 20 4c 5b 35 39 2e 33 31 31 5d 20 3d 20 25
>c9e5	0a 4c 5b 2d 31 33 30 2e 33 33 5d 20 43 20 4c 5b
>c9f5	31 32 34 2e 32 33 33 5d 20 7e 20 4c 5b 2d 31 5d
>ca05	20 3d 20 25 0a 4c 5b 31 35 38 2e 37 33 36 5d 20
>ca15	43 20 4c 5b 2d 37 38 2e 31 39 5d 20 2d 20 4c 5b
>ca25	32 33 36 2e 39 32 36 5d 20 3d 20 25 0a 4c 5b 38
>ca35	2e 38 33 65 2d 31 31 5d 20 43 20 4c 5b 30 2e 35
>ca45	33 5d 20 2d 20 4c 5b 2d 30 2e 35 32 39 39 39 39
>ca55	39 39 39 39 31 31 37 5d 20 3d 20 25 0a 4c 5b 30
>ca65	2e 30 5d 20 43 20 4c 5b 2d 35 2e 30 39 65 2d 30
>ca75	36 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25 0a 4c 5b
>ca85	2d 31 30 39 2e 34 31 5d 20 43 20 4c 5b 2d 37 2e
>ca95	37 34 65 2d 31 33 5d 20 2d 20 4c 5b 2d 31 30 39
>caa5	2e 34 30 39 39 39 39 39 39 39 39 39 39 32 33 5d
>cab5	20 3d 20 25 0a 4c 5b 2d 31 38 30 2e 36 31 5d 20
>cac5	43 20 4c 5b 2d 35 2e 33 35 32 5d 20 7e 20 4c 5b
>cad5	2d 31 5d 20 3d 20 25 0a 4c 5b 32 35 2e 38 31 5d
>cae5	20 43 20 4c 5b 37 38 2e 31 34 33 5d 20 7e 20 4c
>caf5	5b 2d 31 5d 20 3d 20 25 0a 4c 5b 30 2e 32 34 37
>cb05	5d 20 43 20 4c 5b 30 2e 32 34 37 5d 20 7e 20 4c
>cb15	5b 30 5d 20 3d 20 25 0a 4c 5b 2d 35 2e 39 34 65
>cb25	2d 30 38 5d 20 43 20 4c 5b 2d 31 34 35 2e 37 39
>cb35	5d 20 2b 20 4c 5b 2d 31 34 35 2e 37 39 30 30 30
>cb45	30 30 35 39 34 5d 20 3d 20 25 0a 4c 5b 2d 31 2e
>cb55	30 5d 20 43 20 4c 5b 2d 31 33 36 2e 37 38 5d 20
>cb65	2d 20 4c 5b 31 33 35 2e 37 38 5d 20 3d 20 25 0a
>cb75	4c 5b 2d 32 2e 30 5d 20 43 20 4c 5b 2d 31 34 37
>cb85	2e 31 32 36 5d 20 2f 20 4c 5b 30 2e 30 31 33 35
>cb95	39 33 37 39 30 33 35 36 35 36 35 31 32 31 5d 20
>cba5	3d 20 25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b 2d
>cbb5	37 34 2e 36 37 5d 20 2d 20 4c 5b 37 36 2e 36 37
>cbc5	5d 20 3d 20 25 0a 4c 5b 2d 31 2e 32 39 65 2d 30
>cbd5	38 5d 20 43 20 4c 5b 30 2e 30 5d 20 2d 20 4c 5b
>cbe5	2d 31 2e 32 39 65 2d 30 38 5d 20 3d 20 25 0a 4c
>cbf5	5b 30 2e 30 5d 20 43 20 4c 5b 2d 33 2e 30 5d 20
>cc05	2d 20 4c 5b 33 2e 30 5d 20 3d 20 25 0a 4c 5b 2d
>cc15	32 33 2e 31 31 34 5d 20 43 20 4c 5b 31 38 37 2e
>cc25	38 31 31 5d 20 2f 20 4c 5b 2d 30 2e 31 32 33 30
>cc35	37 30 35 33 33 36 37 34 38 31 31 33 38 5d 20 3d
>cc45	20 25 0a 4c 5b 36 33 2e 38 5d 20 43 20 4c 5b 31
>cc55	2e 30 5d 20 2f 20 4c 5b 36 33 2e 38 5d 20 3d 20
>cc65	25 0a 4c 5b 2d 36 2e 31 34 30 30 30 30 65 2b 30
>cc75	37 5d 20 43 20 4c 5b 31 37 31 2e 36 35 36 5d 20
>cc85	2f 20 4c 5b 2d 33 35 37 36 39 32 2e 31 32 38 34
>cc95	34 32 39 33 32 34 5d 20 3d 20 25 0a 4c 5b 32 2e
>cca5	30 5d 20 43 20 4c 5b 31 38 2e 39 37 5d 20 2b 20
>ccb5	4c 5b 32 30 2e 39 37 5d 20 3d 20 25 0a 4c 5b 31
>ccc5	34 33 2e 31 34 37 5d 20 43 20 4c 5b 30 2e 30 30
>ccd5	35 38 37 5d 20 2d 20 4c 5b 31 34 33 2e 31 34 31
>cce5	31 33 5d 20 3d 20 25 0a 4c 5b 2d 31 30 37 2e 39
>ccf5	34 31 5d 20 43 20 4c 5b 30 2e 35 35 36 5d 20 2d
>cd05	20 4c 5b 2d 31 30 38 2e 34 39 37 5d 20 3d 20 25
>cd15	0a 4c 5b 2d 31 2e 32 38 30 30 30 30 65 2b 31 31
>cd25	5d 20 43 20 4c 5b 33 37 2e 39 31 5d 20 2d 20 4c
>cd35	5b 2d 31 2e 32 38 30 30 30 30 65 2b 31 31 5d 20
>cd45	3d 20 25 0a 4c 5b 37 36 2e 32 38 34 5d 20 43 20
>cd55	4c 5b 2d 38 30 2e 39 31 5d 20 2f 20 4c 5b 2d 30
>cd65	2e 39 34 32 38 32 35 33 36 31 35 31 32 37 39 32
>cd75	31 5d 20 3d 20 25 0a 4c 5b 2d 33 2e 38 36 65 2d
>cd85	31 30 5d 20 43 20 4c 5b 31 2e 30 5d 20 2f 20 4c
>cd95	5b 2d 33 2e 38 36 65 2d 31 30 5d 20 3d 20 25 0a
>cda5	4c 5b 2d 31 2e 30 5d 20 43 20 4c 5b 31 32 33 2e
>cdb5	39 33 5d 20 2f 20 4c 5b 2d 30 2e 30 30 38 30 36
>cdc5	39 30 37 31 32 34 39 38 39 39 31 33 37 5d 20 3d
>cdd5	20 25 0a 4c 5b 31 38 38 2e 38 5d 20 43 20 4c 5b
>cde5	2d 34 2e 30 39 30 30 30 30 65 2b 30 37 5d 20 2b
>cdf5	20 4c 5b 2d 34 2e 30 38 39 39 38 31 65 2b 30 37
>ce05	5d 20 3d 20 25 0a 4c 5b 2d 33 2e 39 38 30 30 30
>ce15	30 65 2b 30 36 5d 20 43 20 4c 5b 39 35 2e 30 34
>ce25	36 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25 0a 4c
>ce35	5b 39 2e 30 34 30 30 30 30 65 2b 31 32 5d 20 43
>ce45	20 4c 5b 2d 31 33 31 2e 38 36 5d 20 2b 20 4c 5b
>ce55	39 2e 30 34 30 30 30 30 65 2b 31 32 5d 20 3d 20
>ce65	25 0a 4c 5b 30 2e 30 5d 20 43 20 4c 5b 33 2e 30
>ce75	5d 20 2a 20 4c 5b 30 2e 30 5d 20 3d 20 25 0a 4c
>ce85	5b 2d 32 2e 30 5d 20 43 20 4c 5b 2d 37 38 2e 34
>ce95	38 5d 20 2a 20 4c 5b 31 35 36 2e 39 36 5d 20 3d
>cea5	20 25 0a 4c 5b 2d 31 33 38 2e 33 39 32 5d 20 43
>ceb5	20 4c 5b 2d 31 2e 30 5d 20 2b 20 4c 5b 2d 31 33
>cec5	39 2e 33 39 32 5d 20 3d 20 25 0a 4c 5b 33 36 2e
>ced5	38 31 5d 20 43 20 4c 5b 2d 32 2e 30 5d 20 2a 20
>cee5	4c 5b 2d 37 33 2e 36 32 5d 20 3d 20 25 0a 4c 5b
>cef5	2d 30 2e 30 37 30 32 5d 20 43 20 4c 5b 2d 31 39
>cf05	39 2e 39 5d 20 2b 20 4c 5b 2d 31 39 39 2e 39 37
>cf15	30 32 5d 20 3d 20 25 0a 4c 5b 2d 34 2e 35 33 30
>cf25	30 30 30 65 2b 30 36 5d 20 43 20 4c 5b 31 39 37
>cf35	2e 34 31 32 5d 20 2d 20 4c 5b 2d 34 2e 35 33 30
>cf45	31 39 37 65 2b 30 36 5d 20 3d 20 25 0a 4c 5b 2d
>cf55	38 38 2e 37 31 5d 20 43 20 4c 5b 2d 31 30 36 2e
>cf65	31 30 37 5d 20 2b 20 4c 5b 2d 31 39 34 2e 38 31
>cf75	37 5d 20 3d 20 25 0a 4c 5b 30 2e 30 30 35 36 5d
>cf85	20 43 20 4c 5b 38 32 2e 37 32 5d 20 7e 20 4c 5b
>cf95	2d 31 5d 20 3d 20 25 0a 4c 5b 31 2e 30 5d 20 43
>cfa5	20 4c 5b 31 2e 30 5d 20 7e 20 4c 5b 30 5d 20 3d
>cfb5	20 25 0a 4c 5b 39 39 2e 33 37 36 5d 20 43 20 4c
>cfc5	5b 2d 31 33 30 2e 37 32 5d 20 2d 20 4c 5b 32 33
>cfd5	30 2e 30 39 36 5d 20 3d 20 25 0a 4c 5b 2d 32 2e
>cfe5	30 5d 20 43 20 4c 5b 2d 31 2e 30 5d 20 2d 20 4c
>cff5	5b 2d 31 2e 30 5d 20 3d 20 25 0a 4c 5b 2d 39 30
>d005	2e 36 33 37 5d 20 43 20 4c 5b 37 2e 38 35 65 2d
>d015	31 34 5d 20 2b 20 4c 5b 2d 39 30 2e 36 33 36 39
>d025	39 39 39 39 39 39 39 39 39 32 5d 20 3d 20 25 0a
>d035	4c 5b 35 2e 30 35 30 30 30 30 65 2b 31 34 5d 20
>d045	43 20 4c 5b 2d 32 2e 30 5d 20 2d 20 4c 5b 35 2e
>d055	30 35 30 30 30 30 65 2b 31 34 5d 20 3d 20 25 0a
>d065	4c 5b 31 31 37 2e 30 37 34 5d 20 43 20 4c 5b 2d
>d075	36 37 2e 39 37 5d 20 7e 20 4c 5b 31 5d 20 3d 20
>d085	25 0a 4c 5b 2d 31 2e 30 5d 20 43 20 4c 5b 39 34
>d095	2e 33 37 5d 20 2a 20 4c 5b 2d 39 34 2e 33 37 5d
>d0a5	20 3d 20 25 0a 4c 5b 2d 31 30 38 2e 30 39 5d 20
>d0b5	43 20 4c 5b 2d 31 37 37 2e 32 35 5d 20 2d 20 4c
>d0c5	5b 36 39 2e 31 36 5d 20 3d 20 25 0a 4c 5b 2d 38
>d0d5	2e 34 33 5d 20 43 20 4c 5b 2d 35 36 2e 36 38 5d
>d0e5	20 2b 20 4c 5b 2d 36 35 2e 31 31 5d 20 3d 20 25
>d0f5	0a 4c 5b 31 32 2e 31 33 32 5d 20 43 20 4c 5b 31
>d105	30 36 2e 36 5d 20 2b 20 4c 5b 31 31 38 2e 37 33
>d115	32 5d 20 3d 20 25 0a 4c 5b 2d 32 2e 30 5d 20 43
>d125	20 4c 5b 39 38 2e 34 5d 20 7e 20 4c 5b 2d 31 5d
>d135	20 3d 20 25 0a 4c 5b 2d 32 33 38 30 30 2e 30 5d
>d145	20 43 20 4c 5b 2d 31 2e 33 36 65 2d 31 31 5d 20
>d155	2b 20 4c 5b 2d 32 33 38 30 30 2e 30 30 30 30 30
>d165	30 30 30 30 30 31 35 5d 20 3d 20 25 0a 4c 5b 30
>d175	2e 30 5d 20 43 20 4c 5b 36 2e 32 39 5d 20 2b 20
>d185	4c 5b 36 2e 32 39 5d 20 3d 20 25 0a 4c 5b 35 2e
>d195	34 36 65 2d 31 32 5d 20 43 20 4c 5b 35 35 2e 30
>d1a5	32 34 5d 20 2f 20 4c 5b 39 2e 39 32 32 39 34 32
>d1b5	37 31 35 39 30 35 37 38 35 65 2d 31 34 5d 20 3d
>d1c5	20 25 0a 4c 5b 31 39 32 2e 38 32 5d 20 43 20 4c
>d1d5	5b 2d 31 35 35 2e 38 38 37 5d 20 7e 20 4c 5b 31
>d1e5	5d 20 3d 20 25 0a 4c 5b 2d 31 2e 38 30 30 30 30
>d1f5	30 65 2b 30 39 5d 20 43 20 4c 5b 31 2e 36 31 30
>d205	30 30 30 65 2b 30 38 5d 20 2b 20 4c 5b 2d 31 2e
>d215	36 33 39 30 30 30 65 2b 30 39 5d 20 3d 20 25 0a
>d225	4c 5b 37 32 2e 37 5d 20 43 20 4c 5b 2d 32 2e 30
>d235	5d 20 2b 20 4c 5b 37 30 2e 37 5d 20 3d 20 25 0a
>d245	4c 5b 2d 32 2e 30 5d 20 43 20 4c 5b 33 37 2e 33
>d255	31 33 5d 20 2f 20 4c 5b 2d 30 2e 30 35 33 36 30
>d265	30 36 32 31 37 36 37 32 31 32 34 39 36 5d 20 3d
>d275	20 25 0a 4c 5b 2d 32 2e 30 5d 20 43 20 4c 5b 2d
>d285	37 2e 36 34 30 30 30 30 65 2b 31 32 5d 20 7e 20
>d295	4c 5b 31 5d 20 3d 20 25 0a 4c 5b 31 34 30 2e 36
>d2a5	34 35 5d 20 43 20 4c 5b 2d 37 32 2e 37 38 37 5d
>d2b5	20 2f 20 4c 5b 2d 31 2e 39 33 32 32 38 31 38 36
>d2c5	33 35 31 39 35 38 34 34 5d 20 3d 20 25 0a 4c 5b
>d2d5	2d 31 38 2e 38 31 38 5d 20 43 20 4c 5b 32 2e 30
>d2e5	5d 20 2f 20 4c 5b 2d 39 2e 34 30 39 5d 20 3d 20
>d2f5	25 0a 4c 5b 31 2e 30 5d 20 43 20 4c 5b 37 30 2e
>d305	34 34 5d 20 2a 20 4c 5b 37 30 2e 34 34 5d 20 3d
>d315	20 25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b 2d 31
>d325	2e 30 5d 20 2d 20 4c 5b 33 2e 30 5d 20 3d 20 25
>d335	0a 4c 5b 35 34 2e 34 38 33 5d 20 43 20 4c 5b 32
>d345	2e 30 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25 0a 4c
>d355	5b 2d 37 2e 34 33 30 30 30 30 65 2b 30 39 5d 20
>d365	43 20 4c 5b 2d 31 34 31 2e 32 34 5d 20 2b 20 4c
>d375	5b 2d 37 2e 34 33 30 30 30 30 65 2b 30 39 5d 20
>d385	3d 20 25 0a 4c 5b 33 31 2e 39 31 5d 20 43 20 4c
>d395	5b 2d 34 30 30 30 30 30 2e 30 5d 20 2d 20 4c 5b
>d3a5	34 30 30 30 33 31 2e 39 31 5d 20 3d 20 25 0a 4c
>d3b5	5b 30 2e 30 5d 20 43 20 4c 5b 2d 31 30 38 30 2e
>d3c5	30 5d 20 2b 20 4c 5b 2d 31 30 38 30 2e 30 5d 20
>d3d5	3d 20 25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b 39
>d3e5	2e 36 31 30 30 30 30 65 2b 30 37 5d 20 2d 20 4c
>d3f5	5b 2d 39 2e 36 31 30 30 30 30 65 2b 30 37 5d 20
>d405	3d 20 25 0a 4c 5b 2d 34 30 2e 31 37 36 5d 20 43
>d415	20 4c 5b 2d 31 37 35 2e 38 38 5d 20 2d 20 4c 5b
>d425	31 33 35 2e 37 30 34 5d 20 3d 20 25 0a 4c 5b 2d
>d435	38 38 2e 38 31 38 5d 20 43 20 4c 5b 31 2e 30 5d
>d445	20 2a 20 4c 5b 2d 38 38 2e 38 31 38 5d 20 3d 20
>d455	25 0a 4c 5b 31 38 34 2e 32 35 5d 20 43 20 4c 5b
>d465	31 35 31 2e 39 31 5d 20 2d 20 4c 5b 33 32 2e 33
>d475	34 5d 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 43 20
>d485	4c 5b 32 2e 30 5d 20 2f 20 4c 5b 31 2e 30 5d 20
>d495	3d 20 25 0a 4c 5b 37 2e 31 33 5d 20 43 20 4c 5b
>d4a5	35 34 2e 37 39 5d 20 2b 20 4c 5b 36 31 2e 39 32
>d4b5	5d 20 3d 20 25 0a 4c 5b 31 35 31 2e 38 32 5d 20
>d4c5	43 20 4c 5b 36 31 2e 39 32 5d 20 2d 20 4c 5b 38
>d4d5	39 2e 38 39 39 39 39 39 39 39 39 39 39 39 39 39
>d4e5	5d 20 3d 20 25 0a 4c 5b 2d 34 2e 39 37 65 2d 31
>d4f5	34 5d 20 43 20 4c 5b 2d 31 35 37 2e 35 39 5d 20
>d505	2b 20 4c 5b 2d 31 35 37 2e 35 39 30 30 30 30 30
>d515	30 30 30 30 30 30 36 5d 20 3d 20 25 0a 4c 5b 2d
>d525	31 32 34 2e 31 33 31 5d 20 43 20 4c 5b 2d 32 2e
>d535	30 5d 20 2d 20 4c 5b 2d 31 32 32 2e 31 33 31 5d
>d545	20 3d 20 25 0a 4c 5b 31 35 32 2e 34 36 35 5d 20
>d555	43 20 4c 5b 2d 39 38 2e 31 31 32 5d 20 2f 20 4c
>d565	5b 2d 31 2e 35 35 33 39 38 39 33 31 38 33 33 30
>d575	30 37 32 5d 20 3d 20 25 0a 4c 5b 2d 33 32 2e 36
>d585	38 34 5d 20 43 20 4c 5b 2d 32 2e 30 5d 20 2b 20
>d595	4c 5b 2d 33 34 2e 36 38 34 5d 20 3d 20 25 0a 4c
>d5a5	5b 33 31 2e 33 31 34 5d 20 43 20 4c 5b 2d 30 2e
>d5b5	30 36 31 35 5d 20 2b 20 4c 5b 33 31 2e 32 35 32
>d5c5	35 5d 20 3d 20 25 0a 4c 5b 2d 31 38 31 2e 31 35
>d5d5	35 5d 20 43 20 4c 5b 2d 34 33 2e 39 33 5d 20 2d
>d5e5	20 4c 5b 2d 31 33 37 2e 32 32 35 5d 20 3d 20 25
>d5f5	0a 4c 5b 2d 30 2e 35 32 32 5d 20 43 20 4c 5b 34
>d605	37 2e 35 31 5d 20 2b 20 4c 5b 34 36 2e 39 38 38
>d615	5d 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 43 20 4c
>d625	5b 2d 39 2e 31 38 30 30 30 30 65 2b 30 38 5d 20
>d635	2f 20 4c 5b 2d 33 2e 32 36 37 39 37 33 38 35 36
>d645	32 30 39 31 35 30 34 65 2d 30 39 5d 20 3d 20 25
>d655	0a 4c 5b 2d 34 36 2e 30 37 5d 20 43 20 4c 5b 32
>d665	2e 30 5d 20 2f 20 4c 5b 2d 32 33 2e 30 33 35 5d
>d675	20 3d 20 25 0a 4c 5b 31 2e 30 5d 20 43 20 4c 5b
>d685	31 39 38 2e 39 37 5d 20 2a 20 4c 5b 31 39 38 2e
>d695	39 37 5d 20 3d 20 25 0a 4c 5b 33 35 2e 31 38 35
>d6a5	5d 20 43 20 4c 5b 2d 31 30 2e 30 34 33 5d 20 2f
>d6b5	20 4c 5b 2d 33 2e 35 30 33 34 33 35 32 32 38 35
>d6c5	31 37 33 37 35 38 5d 20 3d 20 25 0a 4c 5b 38 2e
>d6d5	38 39 30 30 30 30 65 2b 31 31 5d 20 43 20 4c 5b
>d6e5	2d 33 2e 30 5d 20 2f 20 4c 5b 2d 32 2e 39 36 33
>d6f5	33 33 33 65 2b 31 31 5d 20 3d 20 25 0a 4c 5b 31
>d705	35 33 2e 32 36 31 5d 20 43 20 4c 5b 2d 32 2e 30
>d715	5d 20 2a 20 4c 5b 2d 33 30 36 2e 35 32 32 5d 20
>d725	3d 20 25 0a 4c 5b 2d 31 32 31 2e 39 37 5d 20 43
>d735	20 4c 5b 37 36 2e 32 32 5d 20 2f 20 4c 5b 2d 31
>d745	2e 36 30 30 32 33 36 31 35 38 34 38 38 35 38 35
>d755	36 5d 20 3d 20 25 0a 4c 5b 35 30 2e 30 38 33 5d
>d765	20 43 20 4c 5b 35 32 2e 36 38 34 5d 20 2b 20 4c
>d775	5b 31 30 32 2e 37 36 37 5d 20 3d 20 25 0a 4c 5b
>d785	31 36 37 2e 36 30 33 5d 20 43 20 4c 5b 2d 32 30
>d795	2e 38 38 33 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25
>d7a5	0a 4c 5b 2d 36 32 2e 39 30 31 5d 20 43 20 4c 5b
>d7b5	2d 31 37 36 2e 38 33 5d 20 7e 20 4c 5b 31 5d 20
>d7c5	3d 20 25 0a 4c 5b 30 2e 30 5d 20 43 20 4c 5b 2d
>d7d5	36 65 2d 30 39 5d 20 2b 20 4c 5b 2d 36 65 2d 30
>d7e5	39 5d 20 3d 20 25 0a 4c 5b 31 32 39 2e 33 36 31
>d7f5	5d 20 43 20 4c 5b 2d 32 2e 30 5d 20 2b 20 4c 5b
>d805	31 32 37 2e 33 36 30 39 39 39 39 39 39 39 39 39
>d815	39 39 5d 20 3d 20 25 0a 4c 5b 2d 33 2e 30 5d 20
>d825	43 20 4c 5b 2d 31 36 32 2e 33 31 5d 20 7e 20 4c
>d835	5b 31 5d 20 3d 20 25 0a 4c 5b 37 38 2e 33 38 33
>d845	5d 20 43 20 4c 5b 32 2e 30 5d 20 2a 20 4c 5b 31
>d855	35 36 2e 37 36 36 5d 20 3d 20 25 0a 4c 5b 2d 30
>d865	2e 30 30 38 33 36 5d 20 43 20 4c 5b 2d 31 30 35
>d875	2e 37 33 38 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25
>d885	0a 4c 5b 31 31 35 2e 31 31 5d 20 43 20 4c 5b 2d
>d895	35 38 2e 31 31 5d 20 2d 20 4c 5b 31 37 33 2e 32
>d8a5	32 5d 20 3d 20 25 0a 4c 5b 2d 31 35 39 2e 35 31
>d8b5	5d 20 43 20 4c 5b 2d 36 30 2e 32 34 31 5d 20 2f
>d8c5	20 4c 5b 32 2e 36 34 37 38 36 34 34 31 31 32 38
>d8d5	31 33 35 33 5d 20 3d 20 25 0a 4c 5b 31 30 38 2e
>d8e5	37 31 36 5d 20 43 20 4c 5b 2d 32 2e 30 5d 20 2b
>d8f5	20 4c 5b 31 30 36 2e 37 31 36 5d 20 3d 20 25 0a
>d905	4c 5b 2d 31 37 38 2e 31 36 31 5d 20 43 20 4c 5b
>d915	31 32 32 2e 37 39 5d 20 2b 20 4c 5b 2d 35 35 2e
>d925	33 37 30 39 39 39 39 39 39 39 39 39 39 39 35 5d
>d935	20 3d 20 25 0a 4c 5b 2d 38 2e 36 39 5d 20 43 20
>d945	4c 5b 32 2e 30 5d 20 2f 20 4c 5b 2d 34 2e 33 34
>d955	35 5d 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 43 20
>d965	4c 5b 2d 32 2e 30 5d 20 2b 20 4c 5b 31 2e 30 5d
>d975	20 3d 20 25 0a 4c 5b 31 37 38 2e 39 32 39 5d 20
>d985	43 20 4c 5b 31 39 34 2e 35 35 37 5d 20 2b 20 4c
>d995	5b 33 37 33 2e 34 38 36 5d 20 3d 20 25 0a 4c 5b
>d9a5	2d 31 2e 30 5d 20 43 20 4c 5b 37 34 2e 35 5d 20
>d9b5	7e 20 4c 5b 2d 31 5d 20 3d 20 25 0a 4c 5b 31 39
>d9c5	34 2e 37 32 32 5d 20 43 20 4c 5b 2d 36 31 2e 35
>d9d5	32 5d 20 2b 20 4c 5b 31 33 33 2e 32 30 32 5d 20
>d9e5	3d 20 25 0a 4c 5b 2d 31 34 37 2e 31 37 5d 20 43
>d9f5	20 4c 5b 31 2e 30 5d 20 2a 20 4c 5b 2d 31 34 37
>da05	2e 31 37 5d 20 3d 20 25 0a 4c 5b 2d 31 2e 30 5d
>da15	20 43 20 4c 5b 31 2e 30 5d 20 7e 20 4c 5b 2d 31
>da25	5d 20 3d 20 25 0a 4c 5b 2d 34 2e 32 36 34 5d 20
>da35	43 20 4c 5b 2d 32 2e 35 30 30 30 30 30 65 2b 30
>da45	37 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25 0a 4c 5b
>da55	38 39 2e 34 31 5d 20 43 20 4c 5b 2d 34 34 2e 37
>da65	33 37 5d 20 2b 20 4c 5b 34 34 2e 36 37 32 39 39
>da75	39 39 39 39 39 39 39 39 39 35 5d 20 3d 20 25 0a
>da85	4c 5b 31 34 35 2e 37 35 35 5d 20 43 20 4c 5b 2d
>da95	31 33 37 2e 32 31 31 5d 20 2f 20 4c 5b 2d 31 2e
>daa5	30 36 32 32 36 39 30 36 30 30 36 30 37 38 32 33
>dab5	5d 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 43 20 4c
>dac5	5b 30 2e 30 5d 20 2b 20 4c 5b 30 2e 30 5d 20 3d
>dad5	20 25 0a 4c 5b 2d 31 37 37 2e 30 39 5d 20 43 20
>dae5	4c 5b 31 36 35 2e 35 31 5d 20 2d 20 4c 5b 2d 33
>daf5	34 32 2e 36 5d 20 3d 20 25 0a 4c 5b 31 30 37 2e
>db05	36 32 31 5d 20 43 20 4c 5b 2d 30 2e 30 38 34 34
>db15	5d 20 2f 20 4c 5b 2d 31 32 37 35 2e 31 33 30 33
>db25	33 31 37 35 33 35 35 34 34 5d 20 3d 20 25 0a 4c
>db35	5b 30 2e 34 33 35 5d 20 43 20 4c 5b 2d 30 2e 31
>db45	34 36 5d 20 2f 20 4c 5b 2d 32 2e 39 37 39 34 35
>db55	32 30 35 34 37 39 34 35 32 30 37 5d 20 3d 20 25
>db65	0a 4c 5b 2d 31 39 31 2e 32 35 5d 20 43 20 4c 5b
>db75	2d 31 2e 36 65 2d 31 33 5d 20 2f 20 4c 5b 31 2e
>db85	31 39 35 33 31 32 65 2b 31 35 5d 20 3d 20 25 0a
>db95	4c 5b 2d 33 39 2e 30 35 5d 20 43 20 4c 5b 31 30
>dba5	2e 36 36 5d 20 2f 20 4c 5b 2d 33 2e 36 36 33 32
>dbb5	32 37 30 31 36 38 38 35 35 35 33 5d 20 3d 20 25
>dbc5	0a 4c 5b 2d 38 37 2e 35 34 36 5d 20 43 20 4c 5b
>dbd5	31 2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25
>dbe5	0a 4c 5b 31 32 32 2e 33 32 5d 20 43 20 4c 5b 35
>dbf5	30 2e 33 37 37 5d 20 2d 20 4c 5b 37 31 2e 39 34
>dc05	32 39 39 39 39 39 39 39 39 39 39 38 5d 20 3d 20
>dc15	25 0a 4c 5b 2d 31 39 35 2e 30 5d 20 43 20 4c 5b
>dc25	2d 31 38 35 2e 32 36 34 5d 20 2a 20 4c 5b 33 36
>dc35	31 32 36 2e 34 38 5d 20 3d 20 25 0a 4c 5b 2d 33
>dc45	2e 30 5d 20 43 20 4c 5b 2d 31 2e 30 5d 20 2a 20
>dc55	4c 5b 33 2e 30 5d 20 3d 20 25 0a 4c 5b 38 2e 31
>dc65	35 65 2d 31 30 5d 20 43 20 4c 5b 2d 31 2e 30 5d
>dc75	20 2f 20 4c 5b 2d 38 2e 31 35 65 2d 31 30 5d 20
>dc85	3d 20 25 0a 4c 5b 30 2e 30 5d 20 43 20 4c 5b 2d
>dc95	36 39 32 2e 30 5d 20 2a 20 4c 5b 2d 30 2e 30 5d
>dca5	20 3d 20 25 0a 4c 5b 2d 32 2e 38 36 5d 20 43 20
>dcb5	4c 5b 31 31 2e 33 37 5d 20 2f 20 4c 5b 2d 30 2e
>dcc5	32 35 31 35 33 39 31 33 38 30 38 32 36 37 33 37
>dcd5	5d 20 3d 20 25 0a 4c 5b 2d 31 34 33 2e 32 35 36
>dce5	5d 20 43 20 4c 5b 2d 31 2e 30 31 30 30 30 30 65
>dcf5	2b 31 34 5d 20 2f 20 4c 5b 31 2e 34 31 38 33 37
>dd05	36 32 33 37 36 32 33 37 36 32 34 65 2d 31 32 5d
>dd15	20 3d 20 25 0a 4c 5b 31 30 38 2e 30 31 36 5d 20
>dd25	43 20 4c 5b 2d 37 2e 36 31 65 2d 30 37 5d 20 2d
>dd35	20 4c 5b 31 30 38 2e 30 31 36 30 30 30 37 36 31
>dd45	5d 20 3d 20 25 0a 4c 5b 30 2e 30 30 30 36 34 36
>dd55	5d 20 43 20 4c 5b 2d 31 34 34 2e 30 33 5d 20 2b
>dd65	20 4c 5b 2d 31 34 34 2e 30 32 39 33 35 34 5d 20
>dd75	3d 20 25 0a 4c 5b 31 31 33 2e 38 5d 20 43 20 4c
>dd85	5b 2d 32 2e 30 5d 20 2f 20 4c 5b 2d 35 36 2e 39
>dd95	5d 20 3d 20 25 0a 4c 5b 2d 32 2e 30 5d 20 43 20
>dda5	4c 5b 2d 36 32 2e 30 39 5d 20 7e 20 4c 5b 31 5d
>ddb5	20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 43 20 4c 5b
>ddc5	38 39 2e 35 35 5d 20 2a 20 4c 5b 31 37 39 2e 31
>ddd5	5d 20 3d 20 25 0a 4c 5b 2d 31 2e 30 5d 20 43 20
>dde5	4c 5b 2d 38 37 2e 37 35 5d 20 2f 20 4c 5b 30 2e
>ddf5	30 31 31 33 39 36 30 31 31 33 39 36 30 31 31 33
>de05	39 37 5d 20 3d 20 25 0a 4c 5b 2d 38 38 2e 32 34
>de15	5d 20 43 20 4c 5b 2d 31 31 34 2e 34 39 5d 20 2d
>de25	20 4c 5b 32 36 2e 32 35 5d 20 3d 20 25 0a 4c 5b
>de35	33 33 2e 38 33 38 5d 20 43 20 4c 5b 2d 33 33 2e
>de45	37 32 38 5d 20 2b 20 4c 5b 30 2e 31 30 39 39 39
>de55	39 39 39 39 39 39 39 39 39 39 34 33 5d 20 3d 20
>de65	25 0a 4c 5b 33 2e 30 5d 20 43 20 4c 5b 33 2e 30
>de75	5d 20 2f 20 4c 5b 31 2e 30 5d 20 3d 20 25 0a 4c
>de85	5b 2d 37 33 2e 30 35 5d 20 43 20 4c 5b 2d 31 30
>de95	38 2e 33 32 5d 20 2b 20 4c 5b 2d 31 38 31 2e 33
>dea5	37 5d 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 43 20
>deb5	4c 5b 30 2e 30 5d 20 2b 20 4c 5b 30 2e 30 5d 20
>dec5	3d 20 25 0a 4c 5b 2d 37 34 2e 33 38 36 5d 20 43
>ded5	20 4c 5b 2d 31 37 35 2e 31 32 5d 20 2b 20 4c 5b
>dee5	2d 32 34 39 2e 35 30 36 5d 20 3d 20 25 0a 4c 5b
>def5	30 2e 30 5d 20 43 20 4c 5b 2d 32 2e 30 5d 20 2f
>df05	20 4c 5b 2d 30 2e 30 5d 20 3d 20 25 0a 4c 5b 2d
>df15	34 39 2e 34 39 5d 20 43 20 4c 5b 2d 36 37 36 30
>df25	30 30 2e 30 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25
>df35	0a 4c 5b 30 2e 30 5d 20 43 20 4c 5b 2d 34 36 2e
>df45	38 31 5d 20 7e 20 4c 5b 31 5d 20 3d 20 25 0a 4c
>df55	5b 30 2e 30 5d 20 43 20 4c 5b 2d 32 38 2e 31 35
>df65	5d 20 2d 20 4c 5b 32 38 2e 31 35 5d 20 3d 20 25
>df75	0a 4c 5b 2d 31 2e 30 5d 20 43 20 4c 5b 36 33 37
>df85	30 2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25
>df95	0a 4c 5b 2d 31 31 37 2e 33 39 5d 20 43 20 4c 5b
>dfa5	33 2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20 3d 20 25
>dfb5	0a 4c 5b 2d 39 2e 38 36 30 30 30 30 65 2b 31 32
>dfc5	5d 20 43 20 4c 5b 2d 34 2e 30 32 5d 20 2b 20 4c
>dfd5	5b 2d 39 2e 38 36 30 30 30 30 65 2b 31 32 5d 20
>dfe5	3d 20 25 0a 4c 5b 2d 33 31 2e 38 31 5d 20 43 20
>dff5	4c 5b 37 34 2e 32 34 5d 20 2f 20 4c 5b 2d 30 2e
>e005	34 32 38 34 37 35 32 31 35 35 31 37 32 34 31 34
>e015	5d 20 3d 20 25 0a 4c 5b 37 2e 36 33 65 2d 30 36
>e025	5d 20 43 20 4c 5b 37 2e 36 33 65 2d 30 36 5d 20
>e035	2b 20 4c 5b 31 2e 35 32 36 65 2d 30 35 5d 20 3d
>e045	20 25 0a 4c 5b 2d 33 35 37 30 2e 30 5d 20 43 20
>e055	4c 5b 2d 31 34 38 2e 38 35 5d 20 2f 20 4c 5b 32
>e065	33 2e 39 38 33 38 37 36 33 38 35 36 32 33 31 31
>e075	33 5d 20 3d 20 25 0a 4c 5b 31 2e 30 5d 20 43 20
>e085	4c 5b 31 31 31 2e 35 38 36 5d 20 2f 20 4c 5b 30
>e095	2e 30 30 38 39 36 31 36 39 37 37 30 34 30 31 33
>e0a5	30 34 39 5d 20 3d 20 25 0a 4c 5b 32 2e 31 39 30
>e0b5	30 30 30 65 2b 31 30 5d 20 43 20 4c 5b 36 2e 35
>e0c5	34 30 30 30 30 65 2b 31 33 5d 20 7e 20 4c 5b 2d
>e0d5	31 5d 20 3d 20 25 0a 4c 5b 31 38 32 2e 33 32 5d
>e0e5	20 43 20 4c 5b 31 38 32 2e 33 32 5d 20 2f 20 4c
>e0f5	5b 31 2e 30 5d 20 3d 20 25 0a 4c 5b 2d 36 33 2e
>e105	32 35 36 5d 20 43 20 4c 5b 31 35 34 2e 31 33 5d
>e115	20 7e 20 4c 5b 2d 31 5d 20 3d 20 25 0a 4c 5b 31
>e125	38 34 2e 31 33 5d 20 43 20 4c 5b 2d 33 2e 30 5d
>e135	20 2d 20 4c 5b 31 38 37 2e 31 33 5d 20 3d 20 25
>e145	0a 4c 5b 2d 31 39 37 2e 39 35 5d 20 43 20 4c 5b
>e155	2d 31 30 34 2e 30 39 5d 20 2d 20 4c 5b 2d 39 33
>e165	2e 38 35 39 39 39 39 39 39 39 39 39 39 39 39 5d
>e175	20 3d 20 25 0a 4c 5b 31 2e 30 5d 20 43 20 4c 5b
>e185	31 33 39 2e 35 34 5d 20 2b 20 4c 5b 31 34 30 2e
>e195	35 34 5d 20 3d 20 25 0a 4c 5b 35 39 2e 35 36 5d
>e1a5	20 43 20 4c 5b 31 2e 30 5d 20 2b 20 4c 5b 36 30
>e1b5	2e 35 36 5d 20 3d 20 25 0a 4c 5b 31 38 35 2e 33
>e1c5	37 36 5d 20 43 20 4c 5b 31 31 31 2e 39 5d 20 2f
>e1d5	20 4c 5b 31 2e 36 35 36 36 32 31 39 38 33 39 31
>e1e5	34 32 30 39 31 5d 20 3d 20 25 0a 4c 5b 2d 32 36
>e1f5	2e 31 5d 20 43 20 4c 5b 2d 39 34 2e 31 30 36 5d
>e205	20 2f 20 4c 5b 30 2e 32 37 37 33 34 36 38 32 31
>e215	36 36 39 31 38 31 35 36 5d 20 3d 20 25 0a 4c 5b
>e225	31 2e 30 5d 20 43 20 4c 5b 30 2e 30 30 36 31 37
>e235	5d 20 2d 20 4c 5b 30 2e 39 39 33 38 33 5d 20 3d
>e245	20 25 0a 4c 5b 2d 31 39 36 2e 33 32 32 5d 20 43
>e255	20 4c 5b 31 2e 30 5d 20 7e 20 4c 5b 2d 31 5d 20
>e265	3d 20 25 0a 4c 5b 2d 31 39 39 2e 31 34 34 5d 20
>e275	43 20 4c 5b 2d 30 2e 30 30 30 32 36 39 5d 20 2b
>e285	20 4c 5b 2d 31 39 39 2e 31 34 34 32 36 39 5d 20
>e295	3d 20 25 0a 4c 5b 30 2e 30 5d 20 43 20 4c 5b 34
>e2a5	38 2e 31 30 32 5d 20 2d 20 4c 5b 2d 34 38 2e 31
>e2b5	30 32 5d 20 3d 20 25 0a 51 0a
>e2bf	00						.byte 	0

;******  Return to file: basic.asm

.e2c0	a2 16		ldx #$16			ldx 		#22
.e2c2	a0 00		ldy #$00			ldy 		#0
.e2c4	20 f8 ac	jsr $acf8			jsr 		FPUSetBFromXY
.e2c7	20 1c ad	jsr $ad1c			jsr 		FPUCopyBToA
.e2ca	a2 00		ldx #$00			ldx 		#0
.e2cc	20 2a ad	jsr $ad2a			jsr 		FPUToFloatX
.e2cf	a9 e0		lda #$e0			lda 		#toConvert & $FF
.e2d1	85 2a		sta $2a				sta 		zGenPtr
.e2d3	a9 e2		lda #$e2			lda 		#toConvert >> 8
.e2d5	85 2b		sta $2b				sta 		zGenPtr+1
.e2d7	20 ac b0	jsr $b0ac			jsr 		FPAsciiToNumber
.e2da	b0 fe		bcs $e2da	stop1:	bcs 		stop1
.e2dc	4c 88 ab	jmp $ab88			jmp 		TIM_Start
>e2df	5c						.byte 		$5C
.e2e0					toConvert:
>e2e0	31 32 33 34 35 36 37 38				.text 		"123456789",0
>e2e8	39 00
.e2ea					ERR_Handler:
.e2ea	80 fe		bra $e2ea			bra 		ERR_Handler
.e2ec					NMIHandler:
.e2ec	40		rti				rti
>fffa	ec e2						.word		NMIHandler
>fffc	f8 b1						.word 		StartROM
>fffe	70 ac						.word 		TIM_BreakVector

;******  End of listing
