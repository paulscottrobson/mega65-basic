
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q --m4510 -D CPU=4510 -D INTERFACE=2 -b -L rom.lst -o rom.bin basic.asm
; Thu Aug 15 21:22:29 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=4510					CPU=4510
=2					INTERFACE=2

;******  Processing input file: basic.asm

.0000	ea		nop				nop

;******  Processing file: data.asm

>0010					zTemp1:		.word ?							; temporary pointers
>0012					zTemp2:		.word ?
>0014					zTemp3:		.word ?
>0016					zLTemp1:	.dword ?						; long word (used in multiply)
>001a					zGenPtr:	.word ? 						; general pointer.
>0200					IFT_XCursor:.byte ?							; current logical position on screen
>0201					IFT_YCursor:.byte ?
>0202					IFT_Buffer:	.fill 100 						; scroll copy buffer.
>0266					IFT_LineBuffer: .fill 100 					; line input buffer.
>0300					XS_Mantissa .dword ? 						; 4 byte mantissa, bit 31 set.
>0304					XS_Exponent .byte ?							; 1 byte exponent, 128 == 2^0 (float only)
>0305					XS_Type 	.byte ? 						; bit 7 sign (float only)
=774					XS2_Mantissa = XS_Mantissa+6
=778					XS2_Exponent = XS_Exponent+6
=779					XS2_Type = XS_Type+6
>0400					Num_Buffer	.fill 	32 						; buffer for numeric conversions
>0420					NumBufX 	.byte 	?						; buffer index position
>0421					NumSuppress	.byte 	?						; leading zero suppression flag
>0422					NumConvCount .byte 	? 						; count for conversions.
>0423					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>0425					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>0427					Tim_SR:		.byte ? 						; Processor Status
>0428					Tim_A:		.byte ? 						; Processor Registers
>0429					Tim_X:		.byte ?
>042a					Tim_Y:		.byte ?
>042b					Tim_Z:		.byte ?
>042c					Tim_SP:		.byte ?							; Stack Pointer
>042d					ExpTemp:	.byte ?							; Working temp for exponents.
>042e					ExpCount:	.byte ? 						; Count of decimal exponents.

;******  Return to file: basic.asm


;******  Processing file: utility/tim.asm

.a000					TIM_Error:
.a000	20 83 e9	jsr $e983			jsr 	IFT_UpLine 					; go up one line.
.a003	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.a005	80 02		bra $a009			bra 	TIM_ShowPrompt
.a007					TIM_NewCommand:
.a007	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.a009					TIM_ShowPrompt:
.a009	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.a00c	20 49 ea	jsr $ea49			jsr 	IFT_ReadLine	 			; get character, go to next line
.a00f	20 ab e9	jsr $e9ab			jsr 	IFT_NewLine					; go to next line.
.a012	86 10		stx $10				stx 	zTemp1 						; save line read address
.a014	84 11		sty $11				sty 	zTemp1+1
.a016	a0 01		ldy #$01			ldy 	#1 							; get first character after the prompt.
.a018	b1 10		lda ($10),y			lda 	(zTemp1),y
.a01a	c9 52		cmp #$52			cmp 	#"R"						; show registers
.a01c	f0 6e		beq $a08c			beq 	TIM_ShowRegisters
.a01e	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.a020	f0 12		beq $a034			beq 	TIM_ShowMemory
.a022	c9 47		cmp #$47			cmp 	#"G"						; execute
.a024	f0 49		beq $a06f			beq 	TIM_Execute
.a026	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.a028	f0 07		beq $a031			beq 	TIM_GoLoadMemory
.a02a	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.a02c	d0 d2		bne $a000			bne 	TIM_Error
.a02e	4c b0 a1	jmp $a1b0			jmp 	TIM_UpdateRegisters
.a031					TIM_GoLoadMemory:
.a031	4c db a1	jmp $a1db			jmp 	TIM_LoadMemory
.a034					TIM_ShowMemory:
.a034	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.a037	b0 c7		bcs $a000			bcs 	TIM_Error
.a039	a5 14		lda $14				lda 	zTemp3 						; copy zTemp3 => zTemp2
.a03b	85 12		sta $12				sta 	zTemp2
.a03d	a5 15		lda $15				lda 	zTemp3+1
.a03f	85 13		sta $13				sta 	zTemp2+1
.a041	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.a044	90 08		bcc $a04e			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.a046	a5 12		lda $12				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.a048	85 14		sta $14				sta 	zTemp3
.a04a	a5 13		lda $13				lda 	zTemp2+1
.a04c	85 15		sta $15				sta 	zTemp3+1
.a04e					_TIMSM_Start:
.a04e	20 01 a1	jsr $a101			jsr 	TIM_WriteLine 				; write one line of hex out
.a051	a5 12		lda $12				lda 	zTemp2 						; bump ZTemp2 by 16
.a053	18		clc				clc
.a054	69 10		adc #$10			adc 	#16
.a056	85 12		sta $12				sta 	zTemp2
.a058	90 02		bcc $a05c			bcc 	_TIMSM_NoCarry
.a05a	e6 13		inc $13				inc 	zTemp2+1
.a05c					_TIMSM_NoCarry:
.a05c	20 36 e0	jsr $e036			jsr 	IF_CheckBreak 				; check CTL+C
.a05f	d0 0b		bne $a06c			bne 	_TIMSM_Ends 				; if pressed break out.
.a061	38		sec				sec 								; check past the end address in zTemp3
.a062	a5 14		lda $14				lda 	zTemp3
.a064	e5 12		sbc $12				sbc 	zTemp2
.a066	a5 15		lda $15				lda 	zTemp3+1
.a068	e5 13		sbc $13				sbc 	zTemp2+1
.a06a	10 e2		bpl $a04e			bpl 	_TIMSM_Start
.a06c					_TIMSM_Ends:
.a06c	4c 07 a0	jmp $a007			jmp 	TIM_NewCommand
.a06f					TIM_Execute:
.a06f	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; get the execute address
.a072	b0 8c		bcs $a000			bcs 	TIM_Error 					; not legitimate
.a074	ae 2c 04	ldx $042c			ldx 	TIM_SP 						; set up SP
.a077	9a		txs				txs
.a078	ad 27 04	lda $0427			lda 	TIM_SR 						; Status for PLP
.a07b	48		pha				pha
.a07c	ad 28 04	lda $0428			lda 	TIM_A 						; restore AXYZ
.a07f	ae 29 04	ldx $0429			ldx 	TIM_X
.a082	ac 2a 04	ldy $042a			ldy 	TIM_Y
.a085	ab 2b 04	ldz $042b			ldz 	TIM_Z
.a088	28		plp				plp 								; and PS Byte.
.a089	6c 14 00	jmp ($0014)			jmp 	(zTemp3)					; go execute
.a08c					TIM_Start:
.a08c					TIM_ShowRegisters:
.a08c	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.a08f	8d 26 04	sta $0426			sta 	TIM_IRQ+1
.a092	ad ff ff	lda $ffff			lda 	$FFFF
.a095	8d 25 04	sta $0425			sta 	TIM_IRQ
.a098	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.a09a					_TIMSR_Text:
.a09a	bd c5 a0	lda $a0c5,x			lda 	_TIMSR_Label,x
.a09d	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a0a0	e8		inx				inx
.a0a1	e0 23		cpx #$23			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.a0a3	d0 f5		bne $a09a			bne 	_TIMSR_Text
.a0a5	a2 00		ldx #$00			ldx 	#0 							; output Register Line.
.a0a7					_TIMSR_LoopSpace:
.a0a7	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.a0a9	b0 04		bcs $a0af			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.a0ab	8a		txa				txa
.a0ac	4a		lsr a				lsr 	a
.a0ad	b0 05		bcs $a0b4			bcs 	_TIMSR_NoSpace
.a0af					_TIMSR_Space:
.a0af	a9 20		lda #$20			lda 	#" "
.a0b1	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a0b4					_TIMSR_NoSpace:
.a0b4	bd 23 04	lda $0423,x			lda 	TIM_PC,x 					; output hex value.
.a0b7	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.a0ba	e8		inx				inx
.a0bb	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.a0bd	d0 e8		bne $a0a7			bne 	_TimSR_LoopSpace
.a0bf	20 ab e9	jsr $e9ab			jsr 	IFT_NewLine 				; new line
.a0c2	4c 07 a0	jmp $a007			jmp	 	TIM_NewCommand 				; new command.
.a0c5					_TIMSR_Label:
>a0c5	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR ZR SP",13,".; "
>a0cd	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>a0dd	52 20 5a 52 20 53 50 0d 2e 3b 20
.a0e8					_TIMSR_LabelEnd:
.a0e8					TIM_WriteHex:
.a0e8	48		pha				pha 								; save A
.a0e9	4a		lsr a				lsr 	a 							; shift MSB->LSB
.a0ea	4a		lsr a				lsr 	a
.a0eb	4a		lsr a				lsr 	a
.a0ec	4a		lsr a				lsr 	a
.a0ed	20 f1 a0	jsr $a0f1			jsr 	_TIMWH_Nibble 				; print MSB
.a0f0	68		pla				pla 								; restore and print LSB
.a0f1					_TIMWH_Nibble:
.a0f1	48		pha				pha
.a0f2	29 0f		and #$0f			and 	#15 						; mask out
.a0f4	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.a0f6	90 02		bcc $a0fa			bcc 	_TIMWHNoLetter
.a0f8	69 06		adc #$06			adc 	#6
.a0fa					_TIMWHNoLetter:
.a0fa	69 30		adc #$30			adc 	#48
.a0fc	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter 			; print it out.
.a0ff	68		pla				pla
.a100	60		rts				rts
.a101					TIM_WriteLine:
.a101	a9 2e		lda #$2e			lda 	#"." 						; prompt
.a103	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a106	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.a108	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a10b	a5 13		lda $13				lda 	zTemp2+1 					; write address
.a10d	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.a110	a5 12		lda $12				lda 	zTemp2
.a112	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.a115	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.a117					_TIMWL_Loop:
.a117	a9 20		lda #$20			lda 	#" "
.a119	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.a11c	b1 12		lda ($12),y			lda 	(zTemp2),y
.a11e	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.a121	c8		iny				iny
.a122	c0 10		cpy #$10			cpy 	#16
.a124	d0 f1		bne $a117			bne 	_TIMWL_Loop
.a126	4c ab e9	jmp $e9ab			jmp 	IFT_NewLine 				; new line and exit
.a129					TIM_GetHex:
.a129	c8		iny				iny
.a12a	b1 10		lda ($10),y			lda 	(zTemp1),y 					; skip over spaces.
.a12c	c9 20		cmp #$20			cmp 	#32
.a12e	f0 f9		beq $a129			beq 	TIM_GetHex
.a130	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.a132	f0 f5		beq $a129			beq 	TIM_GetHex
.a134	20 5d a1	jsr $a15d			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.a137	b0 23		bcs $a15c			bcs 	_TIMGH_Exit					; if first bad then exit now.
.a139	a9 00		lda #$00			lda 	#0 							; zero result
.a13b	85 14		sta $14				sta 	zTemp3
.a13d	85 15		sta $15				sta 	zTemp3+1
.a13f					_TIM_GHLoop:
.a13f	20 5d a1	jsr $a15d			jsr 	TIM_GetHexCharacter 		; get next character
.a142	b0 17		bcs $a15b			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.a144	c8		iny				iny 								; skip over it.
.a145	06 14		asl $14				asl 	zTemp3 						; x zTemp3 by 16
.a147	26 15		rol $15				rol 	zTemp3+1
.a149	06 14		asl $14				asl 	zTemp3 						; now x 2
.a14b	26 15		rol $15				rol 	zTemp3+1
.a14d	06 14		asl $14				asl 	zTemp3						; now x 4
.a14f	26 15		rol $15				rol 	zTemp3+1
.a151	06 14		asl $14				asl 	zTemp3 						; now x 8
.a153	26 15		rol $15				rol 	zTemp3+1
.a155	05 14		ora $14				ora 	zTemp3 						; OR result in
.a157	85 14		sta $14				sta 	zTemp3
.a159	80 e4		bra $a13f			bra 	_TIM_GHLoop 				; loop round again.
.a15b					_TIMGH_Okay:
.a15b	18		clc				clc
.a15c					_TIMGH_Exit:
.a15c	60		rts				rts
.a15d					TIM_GetHexCharacter:
.a15d	b1 10		lda ($10),y			lda 	(zTemp1),y
.a15f	38		sec				sec
.a160	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.a162	90 0e		bcc $a172			bcc 	_TIM_GHCFail
.a164	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.a166	90 0b		bcc $a173			bcc 	_TIM_GHCExit
.a168	c9 11		cmp #$11			cmp 	#65-48						; < A
.a16a	90 06		bcc $a172			bcc		_TIM_GHCFail
.a16c	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.a16e	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.a170	90 01		bcc $a173			bcc		_TIM_GHCExit
.a172					_TIM_GHCFail:
.a172	38		sec				sec
.a173					_TIM_GHCExit:
.a173	60		rts				rts
.a174					TIM_BreakVector:
.a174	da		phx				phx									; save X/A on stack
.a175	48		pha				pha
.a176	ba		tsx				tsx 								; X points to S
.a177	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.a17a	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.a17c	d0 03		bne $a181			bne 	_TIMBreak					; if set, it's BRK
.a17e	68		pla				pla 								; abandon routine.
.a17f	fa		plx				plx
.a180	40		rti				rti
.a181					_TIMBreak:
.a181	68		pla				pla 								; save A X Y and maybe Z
.a182	8d 28 04	sta $0428			sta 	TIM_A
.a185	fa		plx				plx
.a186	8e 29 04	stx $0429			stx 	TIM_X
.a189	8c 2a 04	sty $042a			sty 	TIM_Y
.a18c	9c 2b 04	stz $042b			stz 	TIM_Z
.a18f	68		pla				pla 								; get Status Register
.a190	8d 27 04	sta $0427			sta 	TIM_SR
.a193	68		pla				pla
.a194	8d 24 04	sta $0424			sta 	TIM_PC+1 					; save calling address
.a197	68		pla				pla
.a198	8d 23 04	sta $0423			sta 	TIM_PC 						; high byte
.a19b	ad 24 04	lda $0424			lda 	TIM_PC+1 					; dec PC to point right.
.a19e	d0 03		bne $a1a3			bne 	_TIMDecrement 				; brk bumps it.
.a1a0	ce 23 04	dec $0423			dec 	TIM_PC
.a1a3					_TIMDecrement:
.a1a3	ce 24 04	dec $0424			dec 	TIM_PC+1
.a1a6	ba		tsx				tsx 								; and copy SP
.a1a7	8e 2c 04	stx $042c			stx 	TIM_SP
.a1aa	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.a1ac	9a		txs				txs
.a1ad	4c 8c a0	jmp $a08c			jmp 	TIM_Start 					; and start up TIM monitor.
.a1b0					TIM_UpdateRegisters:
.a1b0	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; PC
.a1b3	b0 23		bcs $a1d8			bcs 	_TIMURFail
.a1b5	a5 14		lda $14				lda 	zTemp3
.a1b7	8d 24 04	sta $0424			sta 	Tim_PC+1
.a1ba	a5 15		lda $15				lda 	zTemp3+1
.a1bc	8d 23 04	sta $0423			sta 	Tim_PC
.a1bf	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; ignore IRQ
.a1c2	b0 14		bcs $a1d8			bcs 	_TIMURFail
.a1c4	a2 00		ldx #$00			ldx 	#0
.a1c6					_TIM_URLoop:
.a1c6	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; registers
.a1c9	b0 0d		bcs $a1d8			bcs 	_TIMURFail
.a1cb	a5 14		lda $14				lda 	zTemp3
.a1cd	9d 27 04	sta $0427,x			sta 	Tim_SR,x
.a1d0	e8		inx				inx
.a1d1	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.a1d3	d0 f1		bne $a1c6			bne 	_TIM_URLoop
.a1d5	4c 07 a0	jmp $a007			jmp 	TIM_NewCommand
.a1d8					_TIMURFail:
.a1d8	4c 00 a0	jmp $a000			jmp 	TIM_Error
.a1db					TIM_LoadMemory:
.a1db	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; target address => zTemp2
.a1de	a5 14		lda $14				lda 	zTemp3
.a1e0	85 12		sta $12				sta 	zTemp2
.a1e2	a5 15		lda $15				lda 	zTemp3+1
.a1e4	85 13		sta $13				sta 	zTemp2+1
.a1e6					_TIM_LMLoop:
.a1e6	20 29 a1	jsr $a129			jsr 	TIM_GetHex 					; next byte ?
.a1e9	b0 0e		bcs $a1f9			bcs 	_TIMLMDone 					; no more
.a1eb	a2 00		ldx #$00			ldx 	#0							; write out.
.a1ed	a5 14		lda $14				lda 	zTemp3
.a1ef	81 12		sta ($12,x)			sta 	(zTemp2,x)
.a1f1	e6 12		inc $12				inc 	zTemp2 						; bump address
.a1f3	d0 f1		bne $a1e6			bne 	_TIM_LMLoop
.a1f5	e6 13		inc $13				inc 	zTemp2+1
.a1f7	80 ed		bra $a1e6			bra 	_TIM_LMLoop
.a1f9					_TIMLMDone:
.a1f9	4c 07 a0	jmp $a007			jmp 	TIM_NewCommand

;******  Return to file: basic.asm


;******  Processing file: integer/inttostr.asm

.c000					INTToString:
.c000	48		pha				pha
.c001	5a		phy				phy
.c002	bd 03 03	lda $0303,x			lda 		XS_Mantissa+3,x 		; check -ve
.c005	10 08		bpl $c00f			bpl 		_ITSNotMinus
.c007	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.c009	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c00c	20 87 c1	jsr $c187			jsr 		FPUNegateInteger
.c00f					_ITSNotMinus:
.c00f	a9 00		lda #$00			lda 		#0 						; X is offset in table.
.c011	8d 21 04	sta $0421			sta 		NumSuppress 			; clear the suppression flag.
.c014	a0 00		ldy #$00			ldy 		#0 						; Y is index into dword subtraction table.
.c016					_ITSNextSubtractor:
.c016	a9 30		lda #$30			lda 		#"0" 					; count of subtractions count in ASCII.
.c018	8d 22 04	sta $0422			sta 		NumConvCount
.c01b					_ITSSubtract:
.c01b	38		sec				sec
.c01c	bd 00 03	lda $0300,x			lda 		XS_Mantissa,x 			; subtract number and push on stack
.c01f	f9 78 c0	sbc $c078,y			sbc 		_ITSSubtractors+0,y
.c022	48		pha				pha
.c023	bd 01 03	lda $0301,x			lda 		XS_Mantissa+1,x
.c026	f9 79 c0	sbc $c079,y			sbc 		_ITSSubtractors+1,y
.c029	48		pha				pha
.c02a	bd 02 03	lda $0302,x			lda 		XS_Mantissa+2,x
.c02d	f9 7a c0	sbc $c07a,y			sbc 		_ITSSubtractors+2,y
.c030	48		pha				pha
.c031	bd 03 03	lda $0303,x			lda 		XS_Mantissa+3,x
.c034	f9 7b c0	sbc $c07b,y			sbc 		_ITSSubtractors+3,y
.c037	90 14		bcc $c04d			bcc 		_ITSCantSubtract 		; if CC, then gone too far.
.c039	9d 03 03	sta $0303,x			sta 		XS_Mantissa+3,x 		; save subtract off stack
.c03c	68		pla				pla
.c03d	9d 02 03	sta $0302,x			sta 		XS_Mantissa+2,x
.c040	68		pla				pla
.c041	9d 01 03	sta $0301,x			sta 		XS_Mantissa+1,x
.c044	68		pla				pla
.c045	9d 00 03	sta $0300,x			sta 		XS_Mantissa+0,x
.c048	ee 22 04	inc $0422			inc 		NumConvCount 			; bump count.
.c04b	80 ce		bra $c01b			bra 		_ITSSubtract 			; go round again.
.c04d					_ITSCantSubtract:
.c04d	68		pla				pla 								; throw away interim answers
.c04e	68		pla				pla
.c04f	68		pla				pla
.c050	ad 22 04	lda $0422			lda 		NumConvCount 			; if not zero then no suppression check
.c053	c9 30		cmp #$30			cmp 		#"0"
.c055	d0 05		bne $c05c			bne 		_ITSOutputDigit
.c057	ad 21 04	lda $0421			lda 		NumSuppress 			; if suppression check zero, then don't print it.
.c05a	10 09		bpl $c065			bpl 		_ITSGoNextSubtractor
.c05c					_ITSOutputDigit:
.c05c	ce 21 04	dec $0421			dec 		NumSuppress 			; suppression check will be non-zero.
.c05f	ad 22 04	lda $0422			lda 		NumConvCount 			; count of subtractions
.c062	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter 		; output it.
.c065					_ITSGoNextSubtractor:
.c065	c8		iny				iny 								; next dword
.c066	c8		iny				iny
.c067	c8		iny				iny
.c068	c8		iny				iny
.c069	c0 24		cpy #$24			cpy 		#_ITSSubtractorsEnd-_ITSSubtractors
.c06b	d0 a9		bne $c016			bne 		_ITSNextSubtractor 		; do all the subtractors.
.c06d	bd 00 03	lda $0300,x			lda 		XS_Mantissa+0,x 		; and the last digit is left.
.c070	09 30		ora #$30			ora 		#"0"
.c072	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c075	7a		ply				ply 								; and exit
.c076	68		pla				pla
.c077	60		rts				rts
.c078					_ITSSubtractors:
>c078	00 ca 9a 3b					.dword 		1000000000
>c07c	00 e1 f5 05					.dword 		100000000
>c080	80 96 98 00					.dword 		10000000
>c084	40 42 0f 00					.dword 		1000000
>c088	a0 86 01 00					.dword 		100000
>c08c	10 27 00 00					.dword 		10000
>c090	e8 03 00 00					.dword 		1000
>c094	64 00 00 00					.dword 		100
>c098	0a 00 00 00					.dword 		10
.c09c					_ITSSubtractorsEnd:
.c09c					ITSOutputCharacter:
.c09c	48		pha				pha
.c09d	da		phx				phx
.c09e	ae 20 04	ldx $0420			ldx 	NumBufX 					; save digit
.c0a1	9d 00 04	sta $0400,x			sta 	Num_Buffer,x
.c0a4	a9 00		lda #$00			lda		#0 							; follow by trailing NULL
.c0a6	9d 01 04	sta $0401,x			sta 	Num_Buffer+1,x
.c0a9	ee 20 04	inc $0420			inc 	NumBufX						; bump pointer.
.c0ac	fa		plx				plx
.c0ad	68		pla				pla
.c0ae	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: integer/intfromstr.asm

.c0af					IntFromString:
.c0af	a0 00		ldy #$00			ldy 	#0
.c0b1	8c 2d 04	sty $042d			sty 	ExpTemp 					; this is the converted digit count.
.c0b4					IntFromStringY:
.c0b4	48		pha				pha
.c0b5	a9 00		lda #$00			lda 	#0 							; clear the mantissa
.c0b7	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c0ba	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c0bd	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c0c0	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c0c3	a9 01		lda #$01			lda 	#1
.c0c5	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c0c8					_IFSLoop:
.c0c8	b1 1a		lda ($1a),y			lda 	(zGenPtr),y 				; get next
.c0ca	c9 30		cmp #$30			cmp 	#"0"						; validate it.
.c0cc	90 60		bcc $c12e			bcc 	_IFSExit
.c0ce	c9 3a		cmp #$3a			cmp 	#"9"+1
.c0d0	b0 5c		bcs $c12e			bcs 	_IFSExit
.c0d2	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; is High Byte > $7F/10
.c0d5	c9 0c		cmp #$0c			cmp 	#12
.c0d7	b0 5f		bcs $c138			bcs 	_IFSOverflow
.c0d9	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; push mantissa on stack backwards
.c0dc	48		pha				pha
.c0dd	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c0e0	48		pha				pha
.c0e1	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c0e4	48		pha				pha
.c0e5	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c0e8	48		pha				pha
.c0e9	20 4d c1	jsr $c14d			jsr 	IFSX1ShiftLeft 				; double
.c0ec	20 4d c1	jsr $c14d			jsr 	IFSX1ShiftLeft 				; x 4
.c0ef	18		clc				clc 								; add saved value x 5
.c0f0	68		pla				pla
.c0f1	7d 00 03	adc $0300,x			adc 	XS_Mantissa+0,x
.c0f4	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c0f7	68		pla				pla
.c0f8	7d 01 03	adc $0301,x			adc 	XS_Mantissa+1,x
.c0fb	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c0fe	68		pla				pla
.c0ff	7d 02 03	adc $0302,x			adc 	XS_Mantissa+2,x
.c102	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c105	68		pla				pla
.c106	7d 03 03	adc $0303,x			adc 	XS_Mantissa+3,x
.c109	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c10c	20 4d c1	jsr $c14d			jsr 	IFSX1ShiftLeft 				; x 10
.c10f	ee 2d 04	inc $042d			inc 	ExpTemp 					; bump count of digits processed.
.c112	b1 1a		lda ($1a),y			lda 	(zGenPtr),y 				; add digit
.c114	29 0f		and #$0f			and 	#15
.c116	c8		iny				iny
.c117	7d 00 03	adc $0300,x			adc 	XS_Mantissa+0,x
.c11a	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c11d	90 a9		bcc $c0c8			bcc 	_IFSLoop
.c11f	fe 01 03	inc $0301,x			inc 	XS_Mantissa+1,x 			; propogate carry round.
.c122	d0 a4		bne $c0c8			bne 	_IFSLoop
.c124	fe 02 03	inc $0302,x			inc 	XS_Mantissa+2,x
.c127	d0 9f		bne $c0c8			bne 	_IFSLoop
.c129	fe 03 03	inc $0303,x			inc 	XS_Mantissa+3,x
.c12c	80 9a		bra $c0c8			bra 	_IFSLoop
.c12e					_IFSExit:
.c12e	98		tya				tya 								; get offset
.c12f					_IFSOkay:
.c12f	38		sec				sec
.c130	ad 2d 04	lda $042d			lda 	ExpTemp
.c133	f0 01		beq $c136			beq 	_IFSSkipFail
.c135	18		clc				clc
.c136					_IFSSkipFail:
.c136	68		pla				pla 								; and exit.
.c137	60		rts				rts
.c138					_IFSOverflow:
.c138	20 0a eb	jsr $eb0a			jsr 	ERR_Handler
>c13b	43 6f 6e 73 74 61 6e 74				.text 	"Constant overflow",0
>c143	20 6f 76 65 72 66 6c 6f 77 00
.c14d					IFSX1ShiftLeft:
.c14d	1e 00 03	asl $0300,x			asl 	0+XS_Mantissa,x
.c150	3e 01 03	rol $0301,x			rol 	1+XS_Mantissa,x
.c153	3e 02 03	rol $0302,x			rol 	2+XS_Mantissa,x
.c156	3e 03 03	rol $0303,x			rol 	3+XS_Mantissa,x
.c159	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: float/fpmacros.asm


;******  Return to file: basic.asm


;******  Processing file: float/fputils.asm

.c15a					FPUCopyX2ToX1:
.c15a	48		pha				pha
.c15b	da		phx				phx
.c15c	5a		phy				phy
.c15d	a0 08		ldy #$08			ldy 	#8
.c15f	bd 06 03	lda $0306,x	_FPUC21:lda 	XS2_Mantissa,x
.c162	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c165	e8		inx				inx
.c166	88		dey				dey
.c167	10 f6		bpl $c15f			bpl 	_FPUC21
.c169	7a		ply				ply
.c16a	fa		plx				plx
.c16b	68		pla				pla
.c16c	60		rts				rts
.c16d					FPUSetInteger:
.c16d	48		pha				pha
.c16e	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; set the lowest byte.
.c171	29 80		and #$80			and 	#$80 						; make this $00 or $FF dependent on MSB
.c173	10 02		bpl $c177			bpl 	_FPUSIExtend
.c175	a9 ff		lda #$ff			lda 	#$FF
.c177					_FPUSIExtend:
.c177	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x 			; copy into the rest of the mantissa
.c17a	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c17d	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c180	a9 01		lda #$01			lda 	#1 			 				; type is integer (set bit 0)
.c182	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c185	68		pla				pla
.c186	60		rts				rts
.c187					FPUNegateInteger:
.c187	48		pha				pha
.c188	38		sec				sec
.c189	a9 00		lda #$00			lda 	#0 							; simple 32 bit subtraction.
.c18b	fd 00 03	sbc $0300,x			sbc 	XS_Mantissa+0,x
.c18e	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c191	a9 00		lda #$00			lda 	#0
.c193	fd 01 03	sbc $0301,x			sbc 	XS_Mantissa+1,x
.c196	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c199	a9 00		lda #$00			lda 	#0
.c19b	fd 02 03	sbc $0302,x			sbc 	XS_Mantissa+2,x
.c19e	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c1a1	a9 00		lda #$00			lda 	#0
.c1a3	fd 03 03	sbc $0303,x			sbc 	XS_Mantissa+3,x
.c1a6	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c1a9	68		pla				pla
.c1aa	60		rts				rts
.c1ab					FPUToFloat:
.c1ab	48		pha				pha
.c1ac	bd 05 03	lda $0305,x			lda 	XS_Type,x					; exit if already float.
.c1af	29 0f		and #$0f			and 	#$0F
.c1b1	f0 2d		beq $c1e0			beq 	_FPUFExit
.c1b3	a9 00		lda #$00			lda 	#0  						; zero the type byte, making it a float.
.c1b5	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c1b8	a9 a0		lda #$a0			lda 	#128+32 					; and the exponent to 32, makes it * 2^32
.c1ba	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; x mantissa.
.c1bd	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; signed integer ?
.c1c0	10 08		bpl $c1ca			bpl		_FPUFPositive
.c1c2	20 87 c1	jsr $c187			jsr 	FPUNegateInteger 			; negate the mantissa
.c1c5	a9 80		lda #$80			lda 	#$80 						; set the sign flag.
.c1c7	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c1ca					_FPUFPositive:
.c1ca	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; mantissa is zero ?
.c1cd	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.c1d0	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.c1d3	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.c1d6	d0 05		bne $c1dd			bne 	_FPUFNonZero
.c1d8	a9 40		lda #$40			lda 	#$40 						; set the zero flag only in type byte
.c1da	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c1dd					_FPUFNonZero:
.c1dd	20 e2 c1	jsr $c1e2			jsr 	FPUNormalise 				; normalise the floating point.
.c1e0					_FPUFExit:
.c1e0	68		pla				pla
.c1e1	60		rts				rts
.c1e2					FPUNormalise:
.c1e2	48		pha				pha
.c1e3	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if float-zero, don't need to normalise it.
.c1e6	70 20		bvs $c208			bvs 	_FPUNExit
.c1e8	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent is zero, then make it zero.
.c1eb	f0 16		beq $c203			beq 	_FPUNSetZero
.c1ed					_FPUNLoop:
.c1ed	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x 			; bit 31 of mantissa set.
.c1f0	30 16		bmi $c208			bmi 	_FPUNExit 					; if so, we are normalised.
.c1f2	1e 00 03	asl $0300,x			asl 	0+XS_Mantissa+0,x
.c1f5	3e 01 03	rol $0301,x			rol 	1+XS_Mantissa+0,x
.c1f8	3e 02 03	rol $0302,x			rol 	2+XS_Mantissa+0,x
.c1fb	3e 03 03	rol $0303,x			rol 	3+XS_Mantissa+0,x
.c1fe	de 04 03	dec $0304,x			dec 	XS_Exponent,x 				; decrement exponent
.c201	d0 ea		bne $c1ed			bne 	_FPUNLoop 		 			; go round again until bit 31 set.
.c203					_FPUNSetZero:
.c203	a9 40		lda #$40			lda 	#$40
.c205	9d 05 03	sta $0305,x			sta 	XS_Type,x 					; the result is now zero.
.c208					_FPUNExit:
.c208	68		pla				pla
.c209	60		rts				rts
.c20a					FPUToInteger:
.c20a	48		pha				pha
.c20b	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if already integer, exit
.c20e	29 01		and #$01			and 	#1
.c210	d0 3e		bne $c250			bne 	_FPUTOI_Exit
.c212	3c 05 03	bit $0305,x			bit 	XS_Type,x					; if zero, return zero.
.c215	70 2b		bvs $c242			bvs 	_FPUTOI_Zero
.c217	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent 00-7F
.c21a	10 26		bpl $c242			bpl 	_FPUToI_Zero 				; the integer value will be zero (< 1.0)
.c21c	c9 a0		cmp #$a0			cmp 	#128+32 					; sign exponent >= 32, overflow.
.c21e	b0 37		bcs $c257			bcs 	FP_Overflow
.c220					_FPUToIToInteger:
.c220	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; keep right shifting until reached 2^32
.c223	c9 a0		cmp #$a0			cmp 	#128+32
.c225	f0 11		beq $c238			beq 	_FPUToICheckSign 			; check sign needs fixing up.
.c227	fe 04 03	inc $0304,x			inc 	XS_Exponent,X 				; increment Exponent
.c22a	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.c22d	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c230	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c233	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c236	80 e8		bra $c220			bra 	_FPUToIToInteger 			; keep going.
.c238					_FPUToICheckSign:
.c238	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; check sign
.c23b	10 13		bpl $c250			bpl 	_FPUToI_Exit 				; exit if unsigned.
.c23d	20 87 c1	jsr $c187			jsr 	FPUNegateInteger 			; otherwise negate the shifted mantissa
.c240	80 0e		bra $c250			bra 	_FPUTOI_Exit
.c242					_FPUTOI_Zero:
.c242	a9 00		lda #$00			lda 	#0 							; return zero integer.
.c244	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c247	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c24a	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c24d	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c250					_FPUToI_Exit:
.c250	a9 01		lda #$01			lda 	#1 							; set type to integer
.c252	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c255	68		pla				pla
.c256	60		rts				rts
.c257					FP_Overflow:
.c257	20 0a eb	jsr $eb0a			jsr 	ERR_Handler
>c25a	46 6c 6f 61 74 69 6e 67				.text 	"Floating Point overflow",0
>c262	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.c272					FPUTimes10:
.c272	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; copy mantissa to ZLTemp1
.c275	85 16		sta $16				sta 	ZLTemp1+0
.c277	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c27a	85 17		sta $17				sta 	ZLTemp1+1
.c27c	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c27f	85 18		sta $18				sta 	ZLTemp1+2
.c281	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c284	85 19		sta $19				sta 	ZLTemp1+3
.c286	20 ca c2	jsr $c2ca			jsr 	_FPUT_LSR_ZLTemp1 			; divide ZLTemp1 by 4
.c289	20 ca c2	jsr $c2ca			jsr 	_FPUT_LSR_ZLTemp1
.c28c	18		clc				clc
.c28d	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x 			; add n/4 to n
.c290	65 16		adc $16				adc 	ZLTemp1+0
.c292	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c295	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c298	65 17		adc $17				adc 	ZLTemp1+1
.c29a	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c29d	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c2a0	65 18		adc $18				adc 	ZLTemp1+2
.c2a2	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c2a5	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c2a8	65 19		adc $19				adc 	ZLTemp1+3
.c2aa	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c2ad	90 0f		bcc $c2be			bcc 	_FPUTimes10
.c2af	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c2b2	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c2b5	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c2b8	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c2bb	fe 04 03	inc $0304,x			inc 	XS_Exponent,x				; fix exponent
.c2be					_FPUTimes10:
.c2be	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; fix up x 2^3 e.g. multiply by 8.
.c2c1	18		clc				clc
.c2c2	69 03		adc #$03			adc 	#3
.c2c4	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c2c7	b0 8e		bcs $c257			bcs 	FP_Overflow 				; error
.c2c9	60		rts				rts
.c2ca					_FPUT_LSR_ZLTemp1:
.c2ca	46 19		lsr $19				lsr 	ZLTemp1+3
.c2cc	66 18		ror $18				ror 	ZLTemp1+2
.c2ce	66 17		ror $17				ror 	ZLTemp1+1
.c2d0	66 16		ror $16				ror 	ZLTemp1+0
.c2d2	60		rts				rts
.c2d3					FPUScale10A:
.c2d3	5a		phy				phy
.c2d4	c9 00		cmp #$00			cmp 	#0 							; if A = 0, nothing to scale
.c2d6	f0 3d		beq $c315			beq 	_FPUScaleExit
.c2d8	da		phx				phx 								; save X
.c2d9	e8		inx				inx
.c2da	e8		inx				inx
.c2db	e8		inx				inx
.c2dc	e8		inx				inx
.c2dd	e8		inx				inx
.c2de	e8		inx				inx
.c2df	a8		tay				tay 								; save power scalar in Y.
.c2e0	a9 00		lda #$00			lda 	#0
.c2e2	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x 			; set slot to 1.0
.c2e5	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c2e8	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c2eb	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c2ee	a9 80		lda #$80			lda 	#$80
.c2f0	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c2f3	a9 81		lda #$81			lda 	#$81
.c2f5	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c2f8	5a		phy				phy 								; save 10^n on stack.
.c2f9	c0 00		cpy #$00			cpy 	#0
.c2fb	10 05		bpl $c302			bpl 	_FPUSAbs 					; set Y = |Y|, we want to multiply that 1.0 x 10
.c2fd	98		tya				tya
.c2fe	49 ff		eor #$ff			eor 	#$FF
.c300	1a		inc a				inc 	a
.c301	a8		tay				tay
.c302					_FPUSAbs:
.c302	20 72 c2	jsr $c272			jsr 	FPUTimes10
.c305	88		dey				dey
.c306	d0 fa		bne $c302			bne 	_FPUSAbs 					; tos is now 10^|AC|
.c308	68		pla				pla 								; restore count in A
.c309	fa		plx				plx 								; restore X pointing to number to scale.
.c30a	0a		asl a				asl 	a
.c30b	b0 05		bcs $c312			bcs 	_FPUSDivide 				; if bit 7 of count set, divide
.c30d	20 0f c4	jsr $c40f			jsr 	FPMultiply 					; if clear multiply.
.c310	80 03		bra $c315			bra		_FPUScaleExit
.c312					_FPUSDivide:
.c312	20 c0 c4	jsr $c4c0			jsr 	FPDivide
.c315					_FPUScaleExit:
.c315	7a		ply				ply
.c316	60		rts				rts
.c317					FPUCopyToNext:
.c317	a0 06		ldy #$06			ldy 		#6
.c319	da		phx				phx
.c31a					_FPUCopy1:
.c31a	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x
.c31d	9d 06 03	sta $0306,x			sta 	XS2_Mantissa,x
.c320	e8		inx				inx
.c321	88		dey				dey
.c322	d0 f6		bne $c31a			bne 	_FPUCopy1
.c324	fa		plx				plx
.c325	60		rts				rts
.c326					FPUCopyFromNext:
.c326	a0 06		ldy #$06			ldy 		#6
.c328	da		phx				phx
.c329					_FPUCopy1:
.c329	bd 06 03	lda $0306,x			lda 	XS2_Mantissa,x
.c32c	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c32f	e8		inx				inx
.c330	88		dey				dey
.c331	d0 f6		bne $c329			bne 	_FPUCopy1
.c333	fa		plx				plx
.c334	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: float/fpadd.asm

.c335					FPSubtract:
.c335	48		pha				pha
.c336	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of X2 and add
.c339	49 80		eor #$80			eor 	#$80
.c33b	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.c33e	68		pla				pla 								; --- and fall through ---
.c33f					FPAdd:
.c33f	48		pha				pha
.c340	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; if X1 is -ve, specialised code
.c343	d0 05		bne $c34a			bne 	_FPA_NegativeLHS
.c345	20 67 c3	jsr $c367			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.c348	68		pla				pla
.c349	60		rts				rts
.c34a					_FPA_NegativeLHS:
.c34a	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 and X2
.c34d	49 80		eor #$80			eor 	#$80
.c34f	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c352	bd 0b 03	lda $030b,x			lda 	XS2_Type,x 					; flip the sign of B and add
.c355	49 80		eor #$80			eor 	#$80
.c357	9d 0b 03	sta $030b,x			sta 	XS2_Type,x
.c35a	20 67 c3	jsr $c367			jsr 	FPAdd_Worker 				; do the add calculation.
.c35d	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip sign of X1 back
.c360	49 80		eor #$80			eor 	#$80
.c362	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c365	68		pla				pla
.c366	60		rts				rts
.c367					FPAdd_Worker:
.c367	3c 0b 03	bit $030b,x			bit 	XS2_Type,x					; if X2 is zero (e.g. adding zero)
.c36a	70 08		bvs $c374			bvs 	_FPAWExit 					; no change.
.c36c	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 is zero (e.g. 0 + X2)
.c36f	50 07		bvc $c378			bvc 	_FPAWMakeSame 				; then return X2, else make same exponent
.c371	20 5a c1	jsr $c15a			jsr 	FPUCopyX2ToX1 				; copy X2 to X1
.c374					_FPAWExit:
.c374	20 e2 c1	jsr $c1e2			jsr 	FPUNormalise 				; normalise the result.
.c377	60		rts				rts
.c378					_FPAWMakeSame:
.c378	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; check if exponents are the same.
.c37b	38		sec				sec
.c37c	fd 0a 03	sbc $030a,x			sbc	 	XS2_Exponent,x 				; using subtraction
.c37f	f0 1b		beq $c39c			beq 	_FPAW_DoArithmetic 			; if they are, do the actual arithmetic part.
.c381	da		phx				phx 								; save X
.c382	90 06		bcc $c38a			bcc 	_FPAWShiftA 				; if X1 < X2 then shift X1
.c384	e8		inx				inx
.c385	e8		inx				inx
.c386	e8		inx				inx
.c387	e8		inx				inx
.c388	e8		inx				inx
.c389	e8		inx				inx
.c38a					_FPAWShiftA:
.c38a	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.c38d	5e 03 03	lsr $0303,x			lsr 	3+XS_Mantissa,x
.c390	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c393	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c396	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c399	fa		plx				plx 								; restore original X
.c39a	80 dc		bra $c378			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.c39c					_FPAW_DoArithmetic:
.c39c	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; is it adding a negative to a positive
.c39f	30 39		bmi $c3da			bmi 	_FPAW_BNegative
.c3a1	18		clc				clc
.c3a2	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c3a5	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.c3a8	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c3ab	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c3ae	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.c3b1	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c3b4	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c3b7	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.c3ba	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c3bd	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c3c0	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.c3c3	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c3c6	90 ac		bcc $c374			bcc 	_FPAWExit 					; no carry.
.c3c8	fe 04 03	inc $0304,x			inc 	XS_Exponent,x 				; so shift exponent up.
.c3cb	38		sec				sec
.c3cc	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c3cf	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c3d2	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c3d5	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c3d8	80 9a		bra $c374			bra 	_FPAWExit
.c3da					_FPAW_BNegative:
.c3da	38		sec				sec
.c3db	bd 00 03	lda $0300,x			lda 	XS_Mantissa+0,x
.c3de	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa+0,x
.c3e1	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c3e4	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c3e7	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.c3ea	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c3ed	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c3f0	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.c3f3	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c3f6	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c3f9	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.c3fc	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c3ff	b0 0b		bcs $c40c			bcs		_FPAWGoExit 				; no borrow, e.g. the result is positive.
.c401	20 87 c1	jsr $c187			jsr 	FPUNegateInteger			; negate the mantissa
.c404	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; flip result sign
.c407	49 80		eor #$80			eor 	#$80
.c409	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c40c					_FPAWGoExit:
.c40c	4c 74 c3	jmp $c374			jmp 	_FPAWExit

;******  Return to file: basic.asm


;******  Processing file: float/fpmultiply.asm

.c40f					FPMultiply:
.c40f	48		pha				pha
.c410	5a		phy				phy
.c411	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if X1 = 0, return X1 e.g. zero.
.c414	70 08		bvs $c41e			bvs 	_FPM_Exit
.c416	3c 0b 03	bit $030b,x			bit		XS2_Type,x 					; if X2 = 0, return X2 unchanged, e.g. zero :)
.c419	50 06		bvc $c421			bvc 	_FPM_CalcExponent
.c41b	20 5a c1	jsr $c15a			jsr 	FPUCopyX2ToX1
.c41e					_FPM_Exit:
.c41e	7a		ply				ply
.c41f	68		pla				pla
.c420	60		rts				rts
.c421					_FPM_CalcExponent:
.c421	18		clc				clc
.c422	20 93 c4	jsr $c493			jsr 	FPCalculateExponent 		; calc exponent of product. (also used by divide)
.c425	9d 04 03	sta $0304,x			sta 	XS_Exponent,x 				; save the result.
.c428	a9 00		lda #$00			lda 	#0
.c42a	85 16		sta $16				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.c42c	85 17		sta $17				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.c42e	85 18		sta $18				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.c430	85 19		sta $19				sta 	zLTemp1+3
.c432	a0 20		ldy #$20			ldy 	#32							; X is loop counter, do it 32 times.
.c434					_FPM_Loop:
.c434	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x				; check LSB of long product
.c437	29 01		and #$01			and 	#1
.c439	18		clc				clc 								; clear carry for the long rotate.
.c43a	f0 1d		beq $c459			beq 	_FPM_NoAddition
.c43c	18		clc				clc 								; add X2 mantissa to the MSB of the long product.
.c43d	a5 16		lda $16				lda 	zLTemp1+0
.c43f	7d 06 03	adc $0306,x			adc 	XS2_Mantissa+0,x
.c442	85 16		sta $16				sta 	zLTemp1+0
.c444	a5 17		lda $17				lda 	zLTemp1+1
.c446	7d 07 03	adc $0307,x			adc 	XS2_Mantissa+1,x
.c449	85 17		sta $17				sta 	zLTemp1+1
.c44b	a5 18		lda $18				lda 	zLTemp1+2
.c44d	7d 08 03	adc $0308,x			adc 	XS2_Mantissa+2,x
.c450	85 18		sta $18				sta 	zLTemp1+2
.c452	a5 19		lda $19				lda 	zLTemp1+3
.c454	7d 09 03	adc $0309,x			adc 	XS2_Mantissa+3,x
.c457	85 19		sta $19				sta 	zLTemp1+3
.c459					_FPM_NoAddition:
.c459	66 19		ror $19				ror 	3+zLTemp1
.c45b	66 18		ror $18				ror 	2+zLTemp1
.c45d	66 17		ror $17				ror 	1+zLTemp1
.c45f	66 16		ror $16				ror 	0+zLTemp1
.c461	7e 03 03	ror $0303,x			ror 	3+XS_Mantissa,x
.c464	7e 02 03	ror $0302,x			ror 	2+XS_Mantissa,x
.c467	7e 01 03	ror $0301,x			ror 	1+XS_Mantissa,x
.c46a	7e 00 03	ror $0300,x			ror 	0+XS_Mantissa,x
.c46d	88		dey				dey
.c46e	d0 c4		bne $c434			bne 	_FPM_Loop 					; do this 32 times.
.c470					FPM_CopySignNormalize:
.c470	a5 16		lda $16				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.c472	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x 				; which is the 32 x 32 product upper bits.
.c475	a5 17		lda $17				lda 	zLTemp1+1
.c477	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c47a	a5 18		lda $18				lda 	zLTemp1+2
.c47c	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c47f	a5 19		lda $19				lda 	zLTemp1+3
.c481	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x
.c484	bd 05 03	lda $0305,x			lda 	XS_Type,x 					; sign is xor of signs
.c487	5d 0b 03	eor $030b,x			eor 	XS2_Type,x
.c48a	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c48d	20 e2 c1	jsr $c1e2			jsr 	FPUNormalise 				; normalise and exit.
.c490	7a		ply				ply
.c491	68		pla				pla
.c492	60		rts				rts
.c493					FPCalculateExponent:
.c493	18		clc				clc
.c494	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; this is with $80 being 2^0.
.c497	7d 0a 03	adc $030a,x			adc 	XS2_Exponent,x
.c49a	b0 08		bcs $c4a4			bcs 	_FPCECarry 					; carry out ?
.c49c	10 03		bpl $c4a1			bpl 	_FPCEExpZero 				; if 0-127 then the product < minimum float
.c49e	29 7f		and #$7f			and 	#$7F 						; this is the actual exponent.
.c4a0	60		rts				rts
.c4a1					_FPCEExpZero:
.c4a1	a9 00		lda #$00			lda 	#0
.c4a3	60		rts				rts
.c4a4					_FPCECarry:
.c4a4	30 03		bmi $c4a9			bmi 	_FPCEOverflow 				; overflow if say 255 + 129 (2^127+2^1)
.c4a6	09 80		ora #$80			ora 	#$80 						; put in right range
.c4a8	60		rts				rts
.c4a9					_FPCEOverflow:
.c4a9	4c 57 c2	jmp $c257			jmp 	FP_Overflow

;******  Return to file: basic.asm


;******  Processing file: float/fpdivide.asm

.c4ac					FPD_IsDivZero:
.c4ac	20 0a eb	jsr $eb0a			jsr 		ERR_Handler
>c4af	44 69 76 69 73 69 6f 6e				.text 		"Division by zero",0
>c4b7	20 62 79 20 7a 65 72 6f 00
.c4c0					FPDivide:
.c4c0	48		pha				pha
.c4c1	5a		phy				phy
.c4c2	3c 0b 03	bit $030b,x			bit 	XS2_Type,x 					; check if division by zero
.c4c5	70 e5		bvs $c4ac			bvs 	FPD_IsDivZero 				; if X2 is zero, cause an error.
.c4c7	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if 0/X (X is not zero) return 0
.c4ca	f0 03		beq $c4cf			beq 	_FPDCalculateExp
.c4cc					_FPD_Exit:
.c4cc	7a		ply				ply
.c4cd	68		pla				pla
.c4ce	60		rts				rts
.c4cf					_FPDCalculateExp:
.c4cf	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x 				; negate the 2nd exponent
.c4d2	49 ff		eor #$ff			eor 	#$FF
.c4d4	1a		inc a				inc 	a
.c4d5	9d 0a 03	sta $030a,x			sta 	XS2_Exponent,x
.c4d8	20 93 c4	jsr $c493			jsr 	FPCalculateExponent 		; then we can use the multiply version.
.c4db	18		clc				clc 	 							; add 1 to the resulting exponent
.c4dc	69 01		adc #$01			adc 	#1
.c4de	b0 65		bcs $c545			bcs 	_FPD_Overflow 				; which can overflow.
.c4e0	9d 04 03	sta $0304,x			sta 	XS_Exponent,x
.c4e3	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.c4e5	85 16		sta $16				sta 	zLTemp1+0
.c4e7	85 17		sta $17				sta 	zLTemp1+1
.c4e9	85 18		sta $18				sta 	zLTemp1+2
.c4eb	85 19		sta $19				sta 	zLTemp1+3
.c4ed	a0 20		ldy #$20			ldy 	#32 						; times round.
.c4ef					_FPD_Loop:
.c4ef	38		sec				sec 								; calculate X1-X2 stacking result because we might
.c4f0	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 				; not save it.
.c4f3	fd 06 03	sbc $0306,x			sbc 	XS2_Mantissa,x
.c4f6	48		pha				pha
.c4f7	bd 01 03	lda $0301,x			lda 	XS_Mantissa+1,x
.c4fa	fd 07 03	sbc $0307,x			sbc 	XS2_Mantissa+1,x
.c4fd	48		pha				pha
.c4fe	bd 02 03	lda $0302,x			lda 	XS_Mantissa+2,x
.c501	fd 08 03	sbc $0308,x			sbc 	XS2_Mantissa+2,x
.c504	48		pha				pha
.c505	bd 03 03	lda $0303,x			lda 	XS_Mantissa+3,x
.c508	fd 09 03	sbc $0309,x			sbc 	XS2_Mantissa+3,x
.c50b	90 17		bcc $c524			bcc		_FPD_NoSubtract 			; if CC couldn't subtract without borrowing.
.c50d	9d 03 03	sta $0303,x			sta 	XS_Mantissa+3,x 			; save results out to A
.c510	68		pla				pla
.c511	9d 02 03	sta $0302,x			sta 	XS_Mantissa+2,x
.c514	68		pla				pla
.c515	9d 01 03	sta $0301,x			sta 	XS_Mantissa+1,x
.c518	68		pla				pla
.c519	9d 00 03	sta $0300,x			sta 	XS_Mantissa+0,x
.c51c	a5 19		lda $19				lda 	zLTemp1+3 					; set high bit of result
.c51e	09 80		ora #$80			ora 	#$80
.c520	85 19		sta $19				sta 	zLTemp1+3
.c522	80 03		bra $c527			bra 	_FPD_Rotates
.c524					_FPD_NoSubtract:
.c524	68		pla				pla 								; throw away unwanted results
.c525	68		pla				pla
.c526	68		pla				pla
.c527					_FPD_Rotates:
.c527	5e 09 03	lsr $0309,x			lsr 	3+XS2_Mantissa,x
.c52a	7e 08 03	ror $0308,x			ror 	2+XS2_Mantissa,x
.c52d	7e 07 03	ror $0307,x			ror 	1+XS2_Mantissa,x
.c530	7e 06 03	ror $0306,x			ror 	0+XS2_Mantissa,x
.c533	06 16		asl $16				asl 	zLTemp1 					; rotate result round left
.c535	26 17		rol $17				rol 	zLTemp1+1
.c537	26 18		rol $18				rol 	zLTemp1+2
.c539	26 19		rol $19				rol 	zLTemp1+3
.c53b	90 02		bcc $c53f			bcc 	_FPD_NoCarry
.c53d	e6 16		inc $16				inc 	zLTemp1 					; if rotated out, set LSB.
.c53f					_FPD_NoCarry:
.c53f	88		dey				dey 								; do 32 times
.c540	d0 ad		bne $c4ef			bne 	_FPD_Loop
.c542	4c 70 c4	jmp $c470			jmp 	FPM_CopySignNormalize 		; hijack multiply exit.
.c545					_FPD_Overflow:
.c545	4c 57 c2	jmp $c257			jmp 	FP_Overflow

;******  Return to file: basic.asm


;******  Processing file: float/fpcompare.asm

.c548					FPCompare:
.c548	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; save the exponents on the stack
.c54b	48		pha				pha
.c54c	bd 0a 03	lda $030a,x			lda 	XS2_Exponent,x
.c54f	48		pha				pha
.c550	20 35 c3	jsr $c335			jsr 	FPSubtract 					; calculate X1-X2
.c553	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; is the result zero ? (e.g. zero flag set)
.c556	70 2c		bvs $c584			bvs 	_FPCPullZero 				; if so, then return zero throwing saved exp
.c558	68		pla				pla
.c559	8d 2d 04	sta $042d			sta 	ExpTemp						; save first exponent in temporary reg.
.c55c	68		pla				pla
.c55d	38		sec				sec
.c55e	ed 2d 04	sbc $042d			sbc 	ExpTemp 					; calculate AX-BX
.c561	70 15		bvs $c578			bvs 	_FPCNotEqual				; overflow, can't be equal.
.c563	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.c564	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.c566	b0 10		bcs $c578			bcs 	_FPCNotEqual  				; exponents can't be more than 2 out.
.c568	38		sec				sec
.c569	ad 2d 04	lda $042d			lda 	ExpTemp 					; get one of the exponents back.
.c56c	e9 18		sbc #$18			sbc 	#24 						; allow for 2^24 error, relatively.
.c56e	b0 02		bcs $c572			bcs 	_FPCNotRange 				; keep in range.
.c570	a9 01		lda #$01			lda 	#1
.c572					_FPCNotRange:
.c572	38		sec				sec
.c573	fd 04 03	sbc $0304,x			sbc 	XS_Exponent,x  				; if exponent of difference greater than this
.c576	b0 0e		bcs $c586			bcs 	_FPCZero 					; then error is nearly zero, so we let it go.
.c578					_FPCNotEqual:
.c578	bd 05 03	lda $0305,x			lda 	XS_Type,x					; so this needs to be $FF (-ve) $01 (+ve)
.c57b	29 80		and #$80			and 	#$80 						; $80 if -ve, $00 if +ve
.c57d	f0 02		beq $c581			beq 	_FPCNE2
.c57f	a9 fe		lda #$fe			lda 	#$FE 						; $FE if -ve, $00 if +ve
.c581	1a		inc a		_FPCNE2:inc 	a 							; $FF if -ve, $01 if +ve
.c582	80 04		bra $c588			bra 	_FPCExit
.c584					_FPCPullZero:
.c584	68		pla				pla 								; throw saved exponents
.c585	68		pla				pla
.c586					_FPCZero:
.c586	a9 00		lda #$00			lda 	#0 							; and return zero
.c588					_FPCExit:
.c588	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: float/fpparts.asm

.c589					FPFractionalPart:
.c589	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent $00-$7F then unchanged as fractional.
.c58c	38		sec				sec 								; this flag tells us to keep the fractional part
.c58d	30 0f		bmi $c59e			bmi 	FPGetPart
.c58f	60		rts				rts
.c590					FPIntegerPart:
.c590	bd 04 03	lda $0304,x			lda 	XS_Exponent,x 				; if exponent -ve then the result is zero (must be < 1.0)
.c593	18		clc				clc 								; this flag says keep the integer part.
.c594	30 08		bmi $c59e			bmi 	FPGetPart 					; -ve exponents are 0..127
.c596	48		pha				pha
.c597	a9 40		lda #$40			lda 	#$40 						; set the Zero Flag
.c599	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c59c	68		pla				pla
.c59d	60		rts				rts
.c59e					FPGetPart:
.c59e	48		pha				pha
.c59f	5a		phy				phy 								; save Y
.c5a0	08		php				php 								; save action
.c5a1	3c 05 03	bit $0305,x			bit 	XS_Type,x 					; if zero, return zero for int and frac
.c5a4	70 62		bvs $c608			bvs 	_FPGP_Exit 					; then do nothing.
.c5a6	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.c5a8	85 16		sta $16				sta 	zLTemp1+0 					; this mask is applied to chop out the
.c5aa	85 17		sta $17				sta 	zLTemp1+1 					; bits you would keep/lose if it was exponent 32.
.c5ac	85 18		sta $18				sta 	zLTemp1+2
.c5ae	85 19		sta $19				sta 	zLTemp1+3
.c5b0	bd 04 03	lda $0304,x			lda 	XS_Exponent,x				; the number of shifts.
.c5b3	38		sec				sec
.c5b4	e9 80		sbc #$80			sbc 	#128 						; is the exponent value-128
.c5b6	f0 12		beq $c5ca			beq 	_FPGP_NoShift 				; ... if any
.c5b8	c9 20		cmp #$20			cmp 	#32
.c5ba	90 02		bcc $c5be			bcc 	_FPGP_NotMax
.c5bc	a9 20		lda #$20			lda 	#32 						; max of 32.
.c5be					_FPGP_NotMax:
.c5be	a8		tay				tay 								; Y is the mask shift count.
.c5bf					_FPGP_ShiftMask:
.c5bf	46 19		lsr $19				lsr 	3+zLTemp1
.c5c1	66 18		ror $18				ror 	2+zLTemp1
.c5c3	66 17		ror $17				ror 	1+zLTemp1
.c5c5	66 16		ror $16				ror 	0+zLTemp1
.c5c7	88		dey				dey
.c5c8	d0 f5		bne $c5bf			bne 	_FPGP_ShiftMask
.c5ca					_FPGP_NoShift:
.c5ca	a0 00		ldy #$00			ldy 	#0 							; now mask each part in turn.
.c5cc	8e 2d 04	stx $042d			stx 	ExpTemp						; save X
.c5cf					_FPGP_MaskLoop:
.c5cf	b9 16 00	lda $0016,y			lda 	zlTemp1,y 					; get mask byte
.c5d2	28		plp				plp 								; if CC we keep the top part, so we
.c5d3	08		php				php		 							; flip the mask.
.c5d4	b0 02		bcs $c5d8			bcs		_FPGP_NoFlip
.c5d6	49 ff		eor #$ff			eor 	#$FF
.c5d8					_FPGP_NoFlip:
.c5d8	3d 00 03	and $0300,x			and 	XS_Mantissa,x 				; and into the mantissa.
.c5db	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.c5de	e8		inx				inx
.c5df	c8		iny				iny
.c5e0	c0 04		cpy #$04			cpy 	#4 							; until done 32 bits.
.c5e2	d0 eb		bne $c5cf			bne 	_FPGP_MaskLoop
.c5e4	ae 2d 04	ldx $042d			ldx 	ExpTemp						; restore X
.c5e7	28		plp				plp
.c5e8	08		php				php 								; get action flag on the stack
.c5e9	90 05		bcc $c5f0			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.c5eb	a9 00		lda #$00			lda 	#0
.c5ed	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c5f0					_FPGP_NotFractional:
.c5f0	bd 00 03	lda $0300,x			lda 	XS_Mantissa,x 						; check if \1 zero
.c5f3	1d 01 03	ora $0301,x			ora 	XS_Mantissa+1,x
.c5f6	1d 02 03	ora $0302,x			ora 	XS_Mantissa+2,x
.c5f9	1d 03 03	ora $0303,x			ora 	XS_Mantissa+3,x
.c5fc	f0 05		beq $c603			beq 	_FPGP_Zero 					; if zero, return zero
.c5fe	20 e2 c1	jsr $c1e2			jsr 	FPUNormalise
.c601	80 05		bra $c608			bra 	_FPGP_Exit 					; and exit
.c603					_FPGP_Zero:
.c603	a9 40		lda #$40			lda 	#$40 						; set zero flag
.c605	9d 05 03	sta $0305,x			sta 	XS_Type,x
.c608					_FPGP_Exit:
.c608	68		pla				pla 								; throw saved action flag.
.c609	7a		ply				ply
.c60a	68		pla				pla
.c60b	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: float/fpfromstr.asm

.c60c					FPFromString:
.c60c	48		pha				pha 								; push A
.c60d	b1 1a		lda ($1a),y			lda		(zGenPtr),y					; is it followed by a DP ?
.c60f	c9 2e		cmp #$2e			cmp 	#"."
.c611	f0 03		beq $c616			beq	 	_FPFIsDecimal
.c613	4c 79 c6	jmp $c679			jmp 	_FPFNotDecimal
.c616					_FPFIsDecimal:
.c616	c8		iny				iny 								; consume the decimal.
.c617	20 ab c1	jsr $c1ab			jsr 	FPUToFloat 					; convert the integer to float.
.c61a	da		phx				phx 								; save X.
.c61b	5a		phy				phy 								; save decimal start position
.c61c	e8		inx				inx
.c61d	e8		inx				inx
.c61e	e8		inx				inx
.c61f	e8		inx				inx
.c620	e8		inx				inx
.c621	e8		inx				inx
.c622	20 b4 c0	jsr $c0b4			jsr 	INTFromStringY 				; get the part after the DP.
.c625	20 ab c1	jsr $c1ab			jsr 	FPUToFloat 					; convert that to a float.
.c628	68		pla				pla 								; calculate - chars consumed.
.c629	8c 2d 04	sty $042d			sty 	ExpTemp
.c62c	38		sec				sec
.c62d	ed 2d 04	sbc $042d			sbc 	ExpTemp 					; this is the shift amount
.c630	20 d3 c2	jsr $c2d3			jsr 	FPUScale10A 				; scale it by 10^AC
.c633	fa		plx				plx 								; restore original X
.c634	20 3f c3	jsr $c33f			jsr 	FPAdd 						; Add X2 to X1 giving the fractional bit.
.c637	b1 1a		lda ($1a),y			lda 	(zGenPtr),y 				; exponent ?
.c639	c9 45		cmp #$45			cmp 	#"E"
.c63b	f0 04		beq $c641			beq 	_FPFExponent
.c63d	c9 65		cmp #$65			cmp 	#"e"
.c63f	d0 38		bne $c679			bne 	_FPFNotDecimal 				; no, then exit normally.
.c641					_FPFExponent:
.c641	c8		iny				iny 								; skip over E symbol.
.c642	b1 1a		lda ($1a),y			lda 	(zGenPtr),y 				; look at next
.c644	49 2d		eor #$2d			eor 	#"-"						; will be zero if -ve
.c646	d0 01		bne $c649			bne 	_FPFGotSign
.c648	c8		iny				iny 								; if it was - skip over it.
.c649					_FPFGotSign:
.c649	48		pha				pha 								; push direction : 0 -ve, #0 +ve onto stack.
.c64a	da		phx				phx
.c64b	e8		inx				inx
.c64c	e8		inx				inx
.c64d	e8		inx				inx
.c64e	e8		inx				inx
.c64f	e8		inx				inx
.c650	e8		inx				inx
.c651	20 b4 c0	jsr $c0b4			jsr 	INTFromStringY 				; get the exponent
.c654	fa		plx				plx 								; restore X.
.c655	bd 07 03	lda $0307,x			lda 	XS2_Mantissa+1,x 			; check exponent low bytes are all zero.
.c658	1d 09 03	ora $0309,x			ora 	XS2_Mantissa+3,x
.c65b	1d 08 03	ora $0308,x			ora 	XS2_Mantissa+2,x
.c65e	d0 1b		bne $c67b			bne 	_FPFXOverflow 				; if not, must be a bad exponent
.c660	bd 06 03	lda $0306,x			lda 	XS2_Mantissa+0,x 			; get the exponent, the low byte
.c663	c9 1e		cmp #$1e			cmp 	#30 						; check in range 0-30
.c665	b0 14		bcs $c67b			bcs 	_FPFXOverflow
.c667	68		pla				pla 								; get direction
.c668	d0 09		bne $c673			bne 	_FPFXScale  				; if non-zero, e.g. +ve skip the next bit
.c66a	bd 06 03	lda $0306,x			lda 	XS2_Mantissa+0,x 			; negate the exponent
.c66d	49 ff		eor #$ff			eor 	#$FF
.c66f	1a		inc a				inc 	a
.c670	9d 06 03	sta $0306,x			sta 	XS2_Mantissa+0,x
.c673					_FPFXScale:
.c673	bd 06 03	lda $0306,x			lda 	XS2_Mantissa+0,x 			; get scale amount
.c676	20 d3 c2	jsr $c2d3			jsr 	FPUScale10A 				; scale by the exponent.
.c679					_FPFNotDecimal:
.c679	68		pla				pla
.c67a	60		rts				rts
.c67b					_FPFXOverflow:
.c67b	20 0a eb	jsr $eb0a			jsr 	ERR_Handler
>c67e	45 78 70 6f 6e 65 6e 74				.text 	"Exponent Range",0
>c686	20 52 61 6e 67 65 00

;******  Return to file: basic.asm


;******  Processing file: float/fptostr.asm

.c68d					FPToString:
.c68d	48		pha				pha
.c68e	5a		phy				phy
.c68f	3c 05 03	bit $0305,x			bit 		XS_Type,x 				; check zero flag
.c692	50 0a		bvc $c69e			bvc 		_FPTSIsFloat 			; if zero,
.c694					_FPTSZero:
.c694	a9 30		lda #$30			lda 		#"0"
.c696	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c699					_FPTSExit:
.c699	7a		ply				ply
.c69a	68		pla				pla
.c69b	60		rts				rts
.c69c	80 fb		bra $c699			bra 		_FPTSExit
.c69e					_FPTSIsFloat:
.c69e	bd 05 03	lda $0305,x			lda 		XS_Type,x 				; is it signed ?
.c6a1	10 0a		bpl $c6ad			bpl 		_FPTSNotSigned
.c6a3	a9 00		lda #$00			lda 		#0 						; clear sign flag
.c6a5	9d 05 03	sta $0305,x			sta 		XS_Type,x
.c6a8	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.c6aa	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c6ad					_FPTSNotSigned:
.c6ad	bd 04 03	lda $0304,x			lda 		XS_Exponent,x
.c6b0	c9 98		cmp #$98			cmp 		#128+24 				; if > 2^24 do as exponent
.c6b2	b0 09		bcs $c6bd			bcs 		_FPTSExponent
.c6b4	c9 6c		cmp #$6c			cmp 		#128-20 				; if < 2^-20 do as an exponent
.c6b6	90 05		bcc $c6bd			bcc 		_FPTSExponent 			;
.c6b8					_FPTSStandard:
.c6b8	20 01 c7	jsr $c701			jsr 		FPTOutputBody 			; output the body.
.c6bb	80 dc		bra $c699			bra 		_FPTSExit
.c6bd					_FPTSExponent:
.c6bd	a9 00		lda #$00			lda 		#0 						; zero the exponent count.
.c6bf	8d 2e 04	sta $042e			sta 		ExpCount
.c6c2					_FPTSExponentLoop:
.c6c2	bd 04 03	lda $0304,x			lda 		XS_Exponent,x 			; exponent < 0, x by 10
.c6c5	10 0e		bpl $c6d5			bpl 		_FPTSTimes
.c6c7	c9 85		cmp #$85			cmp 		#128+5 					; exit when in range 0..4
.c6c9	90 14		bcc $c6df			bcc 		_FPTSScaledToExp
.c6cb	a9 ff		lda #$ff			lda 		#-1 					; divide by 10.
.c6cd	20 d3 c2	jsr $c2d3			jsr 		FPUScale10A
.c6d0	ee 2e 04	inc $042e			inc 		ExpCount
.c6d3	80 ed		bra $c6c2			bra 		_FPTSExponentLoop
.c6d5					_FPTSTimes:
.c6d5	a9 01		lda #$01			lda 		#1
.c6d7	20 d3 c2	jsr $c2d3			jsr 		FPUScale10A
.c6da	ce 2e 04	dec $042e			dec 		ExpCount
.c6dd	80 e3		bra $c6c2			bra 		_FPTSExponentLoop
.c6df					_FPTSScaledToExp:
.c6df	20 01 c7	jsr $c701			jsr 		FPTOutputBody 			; output the body.
.c6e2	a9 65		lda #$65			lda 		#"e"					; output E
.c6e4	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c6e7	ad 2e 04	lda $042e			lda 		ExpCount 				; get the exponent
.c6ea	9d 00 03	sta $0300,x			sta 		XS_Mantissa,x
.c6ed	29 80		and #$80			and 		#$80 					; sign extend it
.c6ef	f0 02		beq $c6f3			beq 		_FPTSSExt
.c6f1	a9 ff		lda #$ff			lda 		#$FF
.c6f3					_FPTSSExt:
.c6f3	9d 01 03	sta $0301,x			sta 		XS_Mantissa+1,x
.c6f6	9d 02 03	sta $0302,x			sta 		XS_Mantissa+2,x
.c6f9	9d 03 03	sta $0303,x			sta 		XS_Mantissa+3,x
.c6fc	20 00 c0	jsr $c000			jsr 		INTToString 			; output the exponent.
.c6ff	80 98		bra $c699			bra			_FPTSExit 				; and exit.
.c701					FPTOutputBody:
.c701	20 17 c3	jsr $c317			jsr 		FPUCopyToNext 			; copy to next slot.
.c704	20 0a c2	jsr $c20a			jsr 		FPUToInteger 			; convert to an integer
.c707	20 00 c0	jsr $c000			jsr 		INTToString 			; output the main integer part.
.c70a	20 26 c3	jsr $c326			jsr 		FPUCopyFromNext 		; get the fractional part back.
.c70d	20 89 c5	jsr $c589			jsr 		FPFractionalPart 		; get the decimal part.
.c710	3c 05 03	bit $0305,x			bit 		XS_Type,x 				; any fractional part.
.c713	70 3e		bvs $c753			bvs 		_FPTOExit 				; if not, exit now.
.c715	a9 2e		lda #$2e			lda 		#"." 					; print out a decimal place.
.c717	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c71a					_FPOutLoop:
.c71a	3c 05 03	bit $0305,x			bit 		XS_Type,x 				; finally reached zero.
.c71d	70 1e		bvs $c73d			bvs 		_FPStripZeros 			; strip trailing zeros
.c71f	20 72 c2	jsr $c272			jsr 		FPUTimes10 				; multiply by 10
.c722	20 17 c3	jsr $c317			jsr 		FPUCopyToNext			; copy to next slot.
.c725	20 0a c2	jsr $c20a			jsr 		FPUToInteger 			; convert to integer
.c728	bd 00 03	lda $0300,x			lda 		XS_Mantissa+0,x 		; print digit.
.c72b	09 30		ora #$30			ora 		#"0"
.c72d	20 9c c0	jsr $c09c			jsr 		ITSOutputCharacter
.c730	20 26 c3	jsr $c326			jsr 		FPUCopyFromNext 		; get it back
.c733	20 89 c5	jsr $c589			jsr 		FPFractionalPart 		; get fractional part
.c736	ad 20 04	lda $0420			lda 		NumBufX 				; done 11 characters yet ?
.c739	c9 0b		cmp #$0b			cmp 	 	#11
.c73b	90 dd		bcc $c71a			bcc 		_FPOutLoop 				; if so, keep going till zero.
.c73d					_FPStripZeros:
.c73d	ac 20 04	ldy $0420			ldy 		NumBufX 				; strip trailing zeros.
.c740					_FPStripLoop:
.c740	88		dey				dey 								; back one, if at start then no strip
.c741	f0 10		beq $c753			beq 		_FPToExit
.c743	b9 00 04	lda $0400,y			lda 		Num_Buffer,y 			; keep going if "0"
.c746	c9 30		cmp #$30			cmp 		#"0"
.c748	f0 f6		beq $c740			beq 		_FPStripLoop
.c74a	c8		iny				iny
.c74b	a9 00		lda #$00			lda 		#0 						; add trailing zero one on
.c74d	99 00 04	sta $0400,y			sta 		Num_Buffer,y
.c750	8c 20 04	sty $0420			sty 		NumBufX 				; update position.
.c753					_FPTOExit:
.c753	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: interface/interface_mega65.asm

=80					IF_Width 	= 80 							; characters across
=25					IF_Height 	= 25 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line
=6					IF_XPos 	= 6 							; current position, horizontal.
=8					IF_FarPtr 	= 8 							; far pointer (4 bytes)
=$1000					IF_Screen = $1000							; 2k screen RAM here
=$800					IF_CharSet = $800							; 2k character set (0-7F) here
.e000					IF_Home:
.e000	48		pha				pha 								; reset cursor position
.e001	a9 00		lda #$00			lda 	#IF_Screen & $FF
.e003	85 04		sta $04				sta 	IF_Pos
.e005	a9 10		lda #$10			lda 	#IF_Screen >> 8
.e007	85 05		sta $05				sta 	IF_Pos+1
.e009	a9 00		lda #$00			lda 	#0
.e00b	85 06		sta $06				sta 	IF_XPos
.e00d	68		pla				pla
.e00e	60		rts				rts
.e00f					IF_NewLine:
.e00f	48		pha				pha
.e010	a9 00		lda #$00			lda 	#0 							; back to start of line
.e012	85 06		sta $06				sta 	IF_XPos
.e014	18		clc				clc 								; down one line
.e015	a5 04		lda $04				lda 	IF_Pos
.e017	69 50		adc #$50			adc 	#80
.e019	85 04		sta $04				sta 	IF_Pos
.e01b	90 02		bcc $e01f			bcc 	_IF_NoCarry 				; carry through.
.e01d	e6 05		inc $05				inc 	IF_Pos+1
.e01f					_IF_NoCarry:
.e01f	68		pla				pla
.e020	60		rts				rts
.e021					IF_Read:
.e021	5a		phy				phy 								; save current Y
.e022	a4 06		ldy $06				ldy 	IF_XPos 					; read character at current position
.e024	b1 04		lda ($04),y			lda 	(IF_Pos),y
.e026	e6 06		inc $06				inc 	IF_XPos 					; step right.
.e028	7a		ply				ply									; restore Y
.e029	60		rts				rts
.e02a					IF_Write:
.e02a	5a		phy				phy 								; save current Y
.e02b	a4 06		ldy $06				ldy 	IF_XPos 					; write character at current position
.e02d	91 04		sta ($04),y			sta 	(IF_Pos),y
.e02f	e6 06		inc $06				inc 	IF_XPos 					; step right.
.e031	7a		ply				ply									; restore Y
.e032	60		rts				rts
.e033					IF_LeftOne:
.e033	c6 06		dec $06				dec 	IF_XPos
.e035	60		rts				rts
.e036					IF_CheckBreak:
.e036	db		phz				phz
.e037	20 7f e0	jsr $e07f			jsr 	IF_SetupKeyAddress 			; point to keyboard
.e03a	e6 08		inc $08				inc 	IF_FarPtr 					; point to modifiers.
.e03c	ea		nop				nop 								; read modifiers.
.e03d	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.e03f	fb		plz				plz 								; restore Z
.e040	29 05		and #$05			and 	#5							; break is LeftShift+Ctrl
.e042	c9 05		cmp #$05			cmp 	#5
.e044	f0 02		beq $e048			beq 	_IF_CBExit
.e046	a9 00		lda #$00			lda 	#0
.e048					_IF_CBExit:
.e048	c9 00		cmp #$00			cmp 	#0
.e04a	60		rts				rts
.e04b					IF_GetKey:
.e04b	db		phz				phz
.e04c	20 7f e0	jsr $e07f			jsr 	IF_SetupKeyAddress
.e04f	ea		nop				nop 								; read keyboard
.e050	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.e052	c9 14		cmp #$14			cmp 	#20
.e054	d0 02		bne $e058			bne 	_KMNo
.e056	a9 08		lda #$08			lda 	#"H"-64
.e058					_KMNo:
.e058	c9 91		cmp #$91			cmp 	#145
.e05a	d0 02		bne $e05e			bne 	_KMNo
.e05c	a9 17		lda #$17			lda 	#"W"-64
.e05e					_KMNo:
.e05e	c9 11		cmp #$11			cmp 	#17
.e060	d0 02		bne $e064			bne 	_KMNo
.e062	a9 13		lda #$13			lda 	#"S"-64
.e064					_KMNo:
.e064	c9 9d		cmp #$9d			cmp 	#157
.e066	d0 02		bne $e06a			bne 	_KMNo
.e068	a9 01		lda #$01			lda 	#"A"-64
.e06a					_KMNo:
.e06a	c9 1d		cmp #$1d			cmp 	#29
.e06c	d0 02		bne $e070			bne 	_KMNo
.e06e	a9 04		lda #$04			lda 	#"D"-64
.e070					_KMNo:
.e070	c9 00		cmp #$00			cmp 	#0
.e072	f0 07		beq $e07b			beq 	_IFGKEmpty
.e074	48		pha				pha
.e075	a9 00		lda #$00			lda 	#0
.e077	ea		nop				nop
.e078	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e07a	68		pla				pla
.e07b					_IFGKEmpty:
.e07b	fb		plz				plz
.e07c	c9 00		cmp #$00			cmp 	#0 							; set Z
.e07e	60		rts				rts
.e07f					IF_SetupKeyAddress:
.e07f	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to read keyboard.
.e081	85 0b		sta $0b				sta 	IF_FarPtr+3
.e083	a9 fd		lda #$fd			lda 	#$FD
.e085	85 0a		sta $0a				sta 	IF_FarPtr+2
.e087	a9 36		lda #$36			lda 	#$36
.e089	85 09		sta $09				sta 	IF_FarPtr+1
.e08b	a9 10		lda #$10			lda 	#$10
.e08d	85 08		sta $08				sta 	IF_FarPtr+0
.e08f	a3 00		ldz #$00			ldz 	#0
.e091	60		rts				rts
.e092					IF_Reset:
.e092	48		pha				pha 								; save registers
.e093	da		phx				phx
.e094	5a		phy				phy
.e095	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to video system.
.e097	85 0b		sta $0b				sta 	IF_FarPtr+3
.e099	a9 fd		lda #$fd			lda 	#$FD
.e09b	85 0a		sta $0a				sta 	IF_FarPtr+2
.e09d	a9 30		lda #$30			lda 	#$30
.e09f	85 09		sta $09				sta 	IF_FarPtr+1
.e0a1	a9 00		lda #$00			lda 	#$00
.e0a3	85 08		sta $08				sta 	IF_FarPtr+0
.e0a5	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.e0a7	a9 47		lda #$47			lda 	#$47
.e0a9	ea		nop				nop
.e0aa	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0ac	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.e0ae	a9 53		lda #$53			lda 	#$53
.e0b0	ea		nop				nop
.e0b1	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0b3	a3 30		ldz #$30			ldz 	#$30 						; address already set up
.e0b5	a9 40		lda #$40			lda 	#$40
.e0b7	ea		nop				nop
.e0b8	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0ba	a3 31		ldz #$31			ldz 	#$31 						; address already set up
.e0bc	a9 c0		lda #$c0			lda 	#$80+$40
.e0be	ea		nop				nop
.e0bf	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0c1	a3 20		ldz #$20			ldz 	#$20 						; address already set up
.e0c3	a9 00		lda #$00			lda 	#0
.e0c5	ea		nop				nop
.e0c6	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0c8	a3 21		ldz #$21			ldz 	#$21 						; address already set up
.e0ca	a9 00		lda #$00			lda 	#0
.e0cc	ea		nop				nop
.e0cd	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0cf	a3 54		ldz #$54			ldz 	#$54 						; address already set up
.e0d1	a9 40		lda #$40			lda 	#$40
.e0d3	ea		nop				nop
.e0d4	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0d6	a3 01		ldz #$01			ldz 	#$01 						; address already set up
.e0d8	a9 ff		lda #$ff			lda 	#$FF
.e0da	ea		nop				nop
.e0db	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0dd	a3 00		ldz #$00			ldz 	#$00 						; address already set up
.e0df	a9 ff		lda #$ff			lda 	#$FF
.e0e1	ea		nop				nop
.e0e2	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0e4	a3 16		ldz #$16			ldz 	#$16 						; address already set up
.e0e6	a9 cc		lda #$cc			lda 	#$CC
.e0e8	ea		nop				nop
.e0e9	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0eb	a3 18		ldz #$18			ldz 	#$18 						; address already set up
.e0ed	a9 42		lda #$42			lda 	#$42
.e0ef	ea		nop				nop
.e0f0	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0f2	a3 11		ldz #$11			ldz 	#$11 						; address already set up
.e0f4	a9 1b		lda #$1b			lda 	#$1B
.e0f6	ea		nop				nop
.e0f7	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e0f9	a9 00		lda #$00			lda 	#$00						; colour RAM at $1F800-1FFFF (2kb)
.e0fb	85 0b		sta $0b				sta 	IF_FarPtr+3
.e0fd	a9 01		lda #$01			lda 	#$01
.e0ff	85 0a		sta $0a				sta 	IF_FarPtr+2
.e101	a9 f8		lda #$f8			lda 	#$F8
.e103	85 09		sta $09				sta 	IF_FarPtr+1
.e105	a9 00		lda #$00			lda 	#$00
.e107	85 08		sta $08				sta 	IF_FarPtr+0
.e109	a3 00		ldz #$00			ldz 	#0
.e10b					_EXTClearColorRam:
.e10b	a9 05		lda #$05			lda 	#5							; fill that with this colour.
.e10d	ea		nop				nop
.e10e	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.e110	3b		dez				dez
.e111	d0 f8		bne $e10b			bne 	_EXTClearColorRam
.e113	e6 09		inc $09				inc 	IF_FarPtr+1
.e115	d0 f4		bne $e10b			bne 	_EXTClearColorRam
.e117	a2 00		ldx #$00			ldx 	#0 							; copy PET Font into memory.
.e119					_EXTCopyCBMFont:
.e119	bd 5a e1	lda $e15a,x			lda 	IF_CBMFont,x 				; +$800 uses the lower case c/set
.e11c	9d 00 08	sta $0800,x			sta 	IF_CharSet,x
.e11f	49 ff		eor #$ff			eor 	#$FF
.e121	9d 00 0c	sta $0c00,x			sta 	IF_CharSet+$400,x
.e124	bd 5a e2	lda $e25a,x			lda 	IF_CBMFont+$100,x
.e127	9d 00 09	sta $0900,x			sta 	IF_CharSet+$100,x
.e12a	49 ff		eor #$ff			eor 	#$FF
.e12c	9d 00 0d	sta $0d00,x			sta 	IF_CharSet+$500,x
.e12f	bd 5a e3	lda $e35a,x			lda 	IF_CBMFont+$200,x
.e132	9d 00 0a	sta $0a00,x			sta 	IF_CharSet+$200,x
.e135	49 ff		eor #$ff			eor 	#$FF
.e137	9d 00 0e	sta $0e00,x			sta 	IF_CharSet+$600,x
.e13a	bd 5a e4	lda $e45a,x			lda 	IF_CBMFont+$300,x
.e13d	9d 00 0b	sta $0b00,x			sta 	IF_CharSet+$300,x
.e140	49 ff		eor #$ff			eor 	#$FF
.e142	9d 00 0f	sta $0f00,x			sta 	IF_CharSet+$700,x
.e145	ca		dex				dex
.e146	d0 d1		bne $e119			bne 	_EXTCopyCBMFont
.e148	a9 3b		lda #$3b			lda 	#$3F-4  					; puts ROM back in the map (the -4)
.e14a	85 01		sta $01				sta 	$01
.e14c	a9 00		lda #$00			lda 	#$00						; do not map bytes 0000-7FFF
.e14e	a2 00		ldx #$00			ldx 	#$00
.e150	a0 00		ldy #$00			ldy 	#$00 						; 8000-FFFF offset by $2000
.e152	a3 f2		ldz #$f2			ldz 	#$F2
.e154	5c		map				map
.e155	ea		nop				eom
.e156	7a		ply				ply 								; restore and exit.
.e157	fa		plx				plx
.e158	68		pla				pla
.e159	60		rts				rts
.e15a					IF_CBMFont:
>e15a	1c 22 4a 56 4c 20 1e 00				.binary "pet-font.bin"
>e162	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>e172	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>e182	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>e192	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>e1a2	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>e1b2	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>e1c2	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>e1d2	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>e1e2	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>e1f2	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>e202	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>e212	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>e222	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>e232	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>e242	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>e252	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>e262	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>e272	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>e282	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>e292	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>e2a2	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>e2b2	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>e2c2	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>e2d2	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>e2e2	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>e2f2	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>e302	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>e312	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>e322	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>e332	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>e342	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>e352	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>e362	08 1c 3e 7f 7f 1c 3e 00 10 10 10 10 10 10 10 10
>e372	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>e382	00 ff 00 00 00 00 00 00 00 00 00 00 00 ff 00 00
>e392	20 20 20 20 20 20 20 20 04 04 04 04 04 04 04 04
>e3a2	00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>e3b2	08 08 08 10 e0 00 00 00 80 80 80 80 80 80 80 ff
>e3c2	80 40 20 10 08 04 02 01 01 02 04 08 10 20 40 80
>e3d2	ff 80 80 80 80 80 80 80 ff 01 01 01 01 01 01 01
>e3e2	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 00 ff 00
>e3f2	36 7f 7f 7f 3e 1c 08 00 40 40 40 40 40 40 40 40
>e402	00 00 00 00 03 04 08 08 81 42 24 18 18 24 42 81
>e412	00 3c 42 42 42 42 3c 00 08 1c 2a 77 2a 08 08 00
>e422	02 02 02 02 02 02 02 02 08 1c 3e 7f 3e 1c 08 00
>e432	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>e442	08 08 08 08 08 08 08 08 00 00 01 3e 54 14 14 00
>e452	ff 7f 3f 1f 0f 07 03 01 00 00 00 00 00 00 00 00
>e462	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>e472	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>e482	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>e492	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>e4a2	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>e4b2	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>e4c2	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>e4d2	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>e4e2	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>e4f2	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>e502	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>e512	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>e522	00 00 00 00 00 ff ff ff 01 01 01 01 01 01 01 ff
>e532	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>e542	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>e552	f0 f0 f0 f0 0f 0f 0f 0f 1c 22 4a 56 4c 20 1e 00
>e562	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>e572	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>e582	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>e592	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>e5a2	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>e5b2	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>e5c2	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>e5d2	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>e5e2	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>e5f2	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>e602	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>e612	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>e622	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>e632	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>e642	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>e652	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>e662	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>e672	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>e682	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>e692	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>e6a2	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>e6b2	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>e6c2	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>e6d2	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>e6e2	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>e6f2	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>e702	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>e712	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>e722	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>e732	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>e742	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>e752	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>e762	00 00 38 04 3c 44 3a 00 40 40 5c 62 42 62 5c 00
>e772	00 00 3c 42 40 42 3c 00 02 02 3a 46 42 46 3a 00
>e782	00 00 3c 42 7e 40 3c 00 0c 12 10 7c 10 10 10 00
>e792	00 00 3a 46 46 3a 02 3c 40 40 5c 62 42 42 42 00
>e7a2	08 00 18 08 08 08 1c 00 04 00 0c 04 04 04 44 38
>e7b2	40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>e7c2	00 00 76 49 49 49 49 00 00 00 5c 62 42 42 42 00
>e7d2	00 00 3c 42 42 42 3c 00 00 00 5c 62 62 5c 40 40
>e7e2	00 00 3a 46 46 3a 02 02 00 00 5c 62 40 40 40 00
>e7f2	00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 12 0c 00
>e802	00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>e812	00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>e822	00 00 42 42 46 3a 02 3c 00 00 7e 04 18 20 7e 00
>e832	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>e842	08 08 08 08 08 08 08 08 cc cc 33 33 cc cc 33 33
>e852	cc 66 33 99 cc 66 33 99 00 00 00 00 00 00 00 00
>e862	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>e872	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>e882	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>e892	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>e8a2	99 33 66 cc 99 33 66 cc 03 03 03 03 03 03 03 03
>e8b2	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>e8c2	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>e8d2	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>e8e2	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>e8f2	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>e902	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>e912	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>e922	00 00 00 00 00 ff ff ff 01 02 44 48 50 60 40 00
>e932	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>e942	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>e952	f0 f0 f0 f0 0f 0f 0f 0f

;******  Return to file: basic.asm


;******  Processing file: interface/interface_tools.asm

.e95a					IFT_ClearScreen:
.e95a	48		pha				pha
.e95b	da		phx				phx
.e95c	5a		phy				phy
.e95d	20 00 e0	jsr $e000			jsr 	IF_Home 					; home cursor
.e960	a2 19		ldx #$19			ldx 	#IF_Height 					; this many lines.
.e962					_IFT_CS0:
.e962	a0 50		ldy #$50			ldy 	#IF_Width 					; this many chars/line
.e964					_IFT_CS1:
.e964	a9 20		lda #$20			lda 	#' '						; clear line.
.e966	20 2a e0	jsr $e02a			jsr 	IF_Write
.e969	88		dey				dey
.e96a	d0 f8		bne $e964			bne 	_IFT_CS1
.e96c	20 0f e0	jsr $e00f			jsr 	IF_NewLine 					; next line down
.e96f	ca		dex				dex
.e970	d0 f0		bne $e962			bne 	_IFT_CS0
.e972	7a		ply				ply
.e973	fa		plx				plx
.e974	68		pla				pla
.e975					IFT_HomeCursor:
.e975	48		pha				pha
.e976	20 00 e0	jsr $e000			jsr 	IF_Home
.e979	a9 00		lda #$00			lda 	#0
.e97b	8d 00 02	sta $0200			sta 	IFT_XCursor
.e97e	8d 01 02	sta $0201			sta 	IFT_YCursor
.e981	68		pla				pla
.e982	60		rts				rts
.e983					IFT_UpLine:
.e983	48		pha				pha
.e984	ad 01 02	lda $0201			lda  	IFT_YCursor 				; get Y
.e987	3a		dec a				dec 	a 							; line above
.e988	30 03		bmi $e98d			bmi 	_IFTULExit 					; too far, abort
.e98a	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos					; set to that line.
.e98d					_IFTULExit:
.e98d	68		pla				pla
.e98e	60		rts				rts
.e98f					IFT_PrintCharacter:
.e98f	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.e991	f0 18		beq $e9ab			beq 	IFT_NewLine
.e993	48		pha				pha
.e994	20 c3 e9	jsr $e9c3			jsr 	IFT_UpperCase 				; make upper case
.e997	29 3f		and #$3f			and 	#63 						; make 6 bit PETSCII
.e999	20 2a e0	jsr $e02a			jsr 	IF_Write 					; write out.
.e99c	ee 00 02	inc $0200			inc 	IFT_XCursor 				; bump x cursor
.e99f	ad 00 02	lda $0200			lda 	IFT_XCursor 				; reached RHS ?
.e9a2	c9 50		cmp #$50			cmp 	#IF_Width
.e9a4	d0 03		bne $e9a9			bne 	_IFT_PCNotEOL
.e9a6	20 ab e9	jsr $e9ab			jsr 	IFT_NewLine 				; if so do new line.
.e9a9					_IFT_PCNotEOL:
.e9a9	68		pla				pla
.e9aa	60		rts				rts
.e9ab					IFT_NewLine:
.e9ab	48		pha				pha
.e9ac	20 0f e0	jsr $e00f			jsr 	IF_NewLine 					; new line on actual screen.
.e9af	a9 00		lda #$00			lda 	#0 							; reset x position
.e9b1	8d 00 02	sta $0200			sta 	IFT_XCursor
.e9b4	ee 01 02	inc $0201			inc 	IFT_YCursor 				; move down.
.e9b7	ad 01 02	lda $0201			lda 	IFT_YCursor
.e9ba	c9 19		cmp #$19			cmp 	#IF_Height 					; reached bottom.
.e9bc	d0 03		bne $e9c1			bne 	_IFT_NL_NotEOS
.e9be	20 ce e9	jsr $e9ce			jsr 	IFT_Scroll 					; scroll screen up.
.e9c1					_IFT_NL_NotEOS:
.e9c1	68		pla				pla
.e9c2	60		rts				rts
.e9c3					IFT_UpperCase:
.e9c3	c9 61		cmp #$61			cmp 	#"a"
.e9c5	90 06		bcc $e9cd			bcc 	_IFT_UCExit
.e9c7	c9 7b		cmp #$7b			cmp 	#"z"+1
.e9c9	b0 02		bcs $e9cd			bcs 	_IFT_UCExit
.e9cb	49 20		eor #$20			eor 	#$20
.e9cd					_IFT_UCExit:
.e9cd	60		rts				rts
.e9ce					IFT_Scroll:
.e9ce	48		pha				pha 								; save AXY
.e9cf	da		phx				phx
.e9d0	5a		phy				phy
.e9d1	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.e9d3					_IFT_SLoop:
.e9d3	20 f3 e9	jsr $e9f3			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.e9d6	e8		inx				inx
.e9d7	e0 18		cpx #$18			cpx 	#IF_Height-1				; do whole screen
.e9d9	d0 f8		bne $e9d3			bne 	_IFT_SLoop
.e9db	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.e9dd	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.e9e0	a2 50		ldx #$50			ldx 	#IF_Width 					; blank line
.e9e2					_IFT_SBlank:
.e9e2	a9 20		lda #$20			lda 	#32
.e9e4	20 2a e0	jsr $e02a			jsr 	IF_Write
.e9e7	ca		dex				dex
.e9e8	d0 f8		bne $e9e2			bne 	_IFT_SBlank
.e9ea	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.e9ec	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.e9ef	7a		ply				ply
.e9f0	fa		plx				plx
.e9f1	68		pla				pla
.e9f2	60		rts				rts
.e9f3					_IFT_ScrollLine:
.e9f3	da		phx				phx
.e9f4	da		phx				phx
.e9f5	8a		txa				txa 								; copy line into buffer.
.e9f6	1a		inc a				inc 	a 							; next line down.
.e9f7	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.e9fa	a2 00		ldx #$00			ldx 	#0
.e9fc					_IFTScrollCopy1:
.e9fc	20 21 e0	jsr $e021			jsr 	IF_Read
.e9ff	9d 02 02	sta $0202,x			sta 	IFT_Buffer,x
.ea02	e8		inx				inx
.ea03	e0 50		cpx #$50			cpx 	#IF_Width
.ea05	d0 f5		bne $e9fc			bne 	_IFTScrollCopy1
.ea07	68		pla				pla
.ea08	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.ea0b	a2 00		ldx #$00			ldx 	#0
.ea0d					_IFTScrollCopy2:
.ea0d	bd 02 02	lda $0202,x			lda 	IFT_Buffer,x
.ea10	20 2a e0	jsr $e02a			jsr 	IF_Write
.ea13	e8		inx				inx
.ea14	e0 50		cpx #$50			cpx 	#IF_Width
.ea16	d0 f5		bne $ea0d			bne 	_IFTScrollCopy2
.ea18	fa		plx				plx
.ea19	60		rts				rts
.ea1a					IFT_SetYPos:
.ea1a	48		pha				pha
.ea1b	da		phx				phx
.ea1c	aa		tax				tax
.ea1d	20 75 e9	jsr $e975			jsr 	IFT_HomeCursor
.ea20	e0 00		cpx #$00			cpx 	#0
.ea22	f0 09		beq $ea2d			beq 	_IFT_MOAExit
.ea24					_IFT_MOALoop:
.ea24	20 0f e0	jsr $e00f			jsr 	IF_NewLine
.ea27	ee 01 02	inc $0201			inc 	IFT_YCursor
.ea2a	ca		dex				dex
.ea2b	d0 f7		bne $ea24			bne		_IFT_MOALoop
.ea2d					_IFT_MOAExit:
.ea2d	fa		plx				plx
.ea2e	68		pla				pla
.ea2f	60		rts				rts
.ea30					IFT_GetKeyCursor:
.ea30	20 38 ea	jsr $ea38			jsr 	_IFT_FlipCursor 			; reverse current
.ea33					_IFT_GKCWait:
.ea33	20 4b e0	jsr $e04b			jsr 	IF_GetKey 					; get key
.ea36	f0 fb		beq $ea33			beq 	_IFT_GKCWait
.ea38					_IFT_FlipCursor:
.ea38	48		pha				pha 								; save
.ea39	20 21 e0	jsr $e021			jsr 	IF_Read 					; read
.ea3c	20 33 e0	jsr $e033			jsr 	IF_LeftOne
.ea3f	49 80		eor #$80			eor 	#$80 						; reverse
.ea41	20 2a e0	jsr $e02a			jsr 	IF_Write 					; write
.ea44	20 33 e0	jsr $e033			jsr 	IF_LeftOne
.ea47	68		pla				pla
.ea48	60		rts				rts
.ea49					IFT_ReadLine:
.ea49	48		pha				pha
.ea4a					_IFT_RLLoop:
.ea4a	20 30 ea	jsr $ea30			jsr 	IFT_GetKeyCursor 			; get keystroke
.ea4d	c9 0d		cmp #$0d			cmp 	#13							; return
.ea4f	f0 7d		beq $eace			beq 	_IFT_RLExit
.ea51	c9 20		cmp #$20			cmp 	#32 						; control character
.ea53	90 05		bcc $ea5a			bcc 	_IFT_Control
.ea55	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.ea58	80 f0		bra $ea4a			bra 	_IFT_RLLoop
.ea5a					_IFT_Control:
.ea5a	c9 01		cmp #$01			cmp 	#"A"-64
.ea5c	f0 26		beq $ea84			beq 	_IFT_Left
.ea5e	c9 04		cmp #$04			cmp 	#"D"-64
.ea60	f0 2e		beq $ea90			beq 	_IFT_Right
.ea62	c9 17		cmp #$17			cmp 	#"W"-64
.ea64	f0 36		beq $ea9c			beq 	_IFT_Up
.ea66	c9 13		cmp #$13			cmp 	#"S"-64
.ea68	f0 3e		beq $eaa8			beq 	_IFT_Down
.ea6a	c9 08		cmp #$08			cmp 	#"H"-64
.ea6c	f0 09		beq $ea77			beq 	_IFT_Backspace
.ea6e	c9 1a		cmp #$1a			cmp 	#"Z"-64
.ea70	d0 d8		bne $ea4a			bne 	_IFT_RLLoop
.ea72	20 5a e9	jsr $e95a			jsr 	IFT_ClearScreen				; clear CTL-Z
.ea75	80 d3		bra $ea4a			bra 	_IFT_RLLoop
.ea77					_IFT_Backspace:
.ea77	ad 00 02	lda $0200			lda 	IFT_XCursor 				; check not start of line.
.ea7a	f0 ce		beq $ea4a			beq 	_IFT_RLLoop
.ea7c	20 33 e0	jsr $e033			jsr 	IF_LeftOne
.ea7f	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.ea81	20 2a e0	jsr $e02a			jsr 	IF_Write
.ea84					_IFT_Left:
.ea84	ce 00 02	dec $0200			dec 	IFT_XCursor 				; left CTL-W
.ea87	10 29		bpl $eab2			bpl 	_IFT_Reposition
.ea89	a9 4f		lda #$4f			lda 	#IF_Width-1
.ea8b					_IFT_SetX:
.ea8b	8d 00 02	sta $0200			sta 	IFT_XCursor
.ea8e	80 22		bra $eab2			bra 	_IFT_Reposition
.ea90					_IFT_Right:
.ea90	ee 00 02	inc $0200			inc 	IFT_XCursor
.ea93	ad 00 02	lda $0200			lda 	IFT_XCursor
.ea96	49 50		eor #$50			eor 	#IF_Width
.ea98	f0 f1		beq $ea8b			beq 	_IFT_SetX
.ea9a	80 16		bra $eab2			bra 	_IFT_Reposition
.ea9c					_IFT_Up:
.ea9c	ce 01 02	dec $0201			dec 	IFT_YCursor
.ea9f	10 11		bpl $eab2			bpl 	_IFT_Reposition
.eaa1	a9 18		lda #$18			lda 	#IF_Height-1
.eaa3					_IFT_SetY:
.eaa3	8d 01 02	sta $0201			sta 	IFT_YCursor
.eaa6	80 0a		bra $eab2			bra 	_IFT_Reposition
.eaa8					_IFT_Down:
.eaa8	ee 01 02	inc $0201			inc 	IFT_YCursor
.eaab	ad 01 02	lda $0201			lda 	IFT_YCursor
.eaae	49 19		eor #$19			eor 	#IF_Height
.eab0	f0 f1		beq $eaa3			beq 	_IFT_SetY
.eab2					_IFT_Reposition:
.eab2	ad 00 02	lda $0200			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.eab5	48		pha				pha
.eab6	ad 01 02	lda $0201			lda 	IFT_YCursor
.eab9	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.eabc	68		pla				pla
.eabd	aa		tax				tax
.eabe	e0 00		cpx #$00			cpx 	#0
.eac0	f0 88		beq $ea4a			beq 	_IFT_RLLoop
.eac2					_IFT_MoveRight:
.eac2	20 21 e0	jsr $e021			jsr 	IF_Read
.eac5	ee 00 02	inc $0200			inc 	IFT_XCursor
.eac8	ca		dex				dex
.eac9	d0 f7		bne $eac2			bne 	_IFT_MoveRight
.eacb	4c 4a ea	jmp $ea4a			jmp 	_IFT_RLLoop
.eace					_IFT_RLExit:
.eace	ad 01 02	lda $0201			lda 	IFT_YCursor 				; go to start of line.
.ead1	20 1a ea	jsr $ea1a			jsr 	IFT_SetYPos
.ead4	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.ead6					_IFT_RLRead:
.ead6	20 21 e0	jsr $e021			jsr 	IF_Read
.ead9	18		clc				clc 								; convert back to ASCII.
.eada	49 20		eor #$20			eor 	#$20
.eadc	69 20		adc #$20			adc 	#$20
.eade	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.eae1	e8		inx				inx
.eae2	e0 50		cpx #$50			cpx 	#IF_Width
.eae4	d0 f0		bne $ead6			bne 	_IFT_RLRead
.eae6					_IFT_RL_Trim:
.eae6	ca		dex				dex 	 							; previous char
.eae7	30 07		bmi $eaf0			bmi 	_IFT_Found 					; gone too far
.eae9	bd 66 02	lda $0266,x			lda 	IFT_LineBuffer,x			; go back if space
.eaec	c9 20		cmp #$20			cmp 	#" "
.eaee	f0 f6		beq $eae6			beq 	_IFT_RL_Trim
.eaf0					_IFT_Found:
.eaf0	e8		inx				inx 								; forward to non-space
.eaf1	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.eaf3	9d 66 02	sta $0266,x			sta 	IFT_LineBuffer,x
.eaf6	68		pla				pla
.eaf7	a2 66		ldx #$66			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.eaf9	a0 02		ldy #$02			ldy 	#IFT_LineBuffer >> 8
.eafb	60		rts				rts

;******  Return to file: basic.asm

.eafc					StartROM:
.eafc	a2 ff		ldx #$ff			ldx 	#$FF 						; empty stack
.eafe	9a		txs				txs
.eaff	20 92 e0	jsr $e092			jsr 	IF_Reset 					; reset external interface
.eb02	20 5a e9	jsr $e95a			jsr 	IFT_ClearScreen
.eb05	20 0d eb	jsr $eb0d			jsr 	FPTTest
.eb08	80 fe		bra $eb08	freeze:	bra 	freeze
.eb0a					ERR_Handler:
.eb0a	80 fe		bra $eb0a			bra 	ERR_Handler
.eb0c					NMIHandler:
.eb0c	40		rti				rti

;******  Processing file: testing/fptest.asm

.eb0d					FPTTest:
.eb0d	a9 c5		lda #$c5			lda 	#FPTTestData & $FF 			; set zGenPtr to data.
.eb0f	85 1a		sta $1a				sta 	zGenPtr
.eb11	a9 eb		lda #$eb			lda 	#FPTTestData >> 8
.eb13	85 1b		sta $1b				sta 	zGenPtr+1
.eb15	a2 00		ldx #$00			ldx 	#0 							; start at stack bottom.
.eb17	a5 1b		lda $1b		FPTLoop:lda 	zGenPtr+1
.eb19	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.eb1c	a5 1a		lda $1a				lda 	zGenPtr
.eb1e	20 e8 a0	jsr $a0e8			jsr 	TIM_WriteHex
.eb21	a9 2e		lda #$2e			lda 	#"."
.eb23	20 8f e9	jsr $e98f			jsr		IFT_PrintCharacter
.eb26	20 b6 eb	jsr $ebb6			jsr 	FPTGet 						; get next command
.eb29	c9 00		cmp #$00			cmp 	#0 							; zero, exit
.eb2b	f0 58		beq $eb85			beq 	FPTExit
.eb2d	c9 01		cmp #$01			cmp 	#1 							; 1,load
.eb2f	f0 46		beq $eb77			beq 	FPTLoad
.eb31	c9 2b		cmp #$2b			cmp 	#"+" 						; the -1/0/1 value in AC.
.eb33	d0 0b		bne $eb40			bne 	_skip1
.eb35	20 aa eb	jsr $ebaa			jsr 	FPT_Preamble
.eb38	20 3f c3	jsr $c33f			jsr 	FPAdd
.eb3b	20 b0 eb	jsr $ebb0			jsr 	FPT_Postamble
.eb3e	80 d7		bra $eb17			bra 	FPTLoop
.eb40					_skip1:
.eb40	c9 2d		cmp #$2d			cmp 	#"-" 						; the -1/0/1 value in AC.
.eb42	d0 0b		bne $eb4f			bne 	_skip1
.eb44	20 aa eb	jsr $ebaa			jsr 	FPT_Preamble
.eb47	20 35 c3	jsr $c335			jsr 	FPSubtract
.eb4a	20 b0 eb	jsr $ebb0			jsr 	FPT_Postamble
.eb4d	80 c8		bra $eb17			bra 	FPTLoop
.eb4f					_skip1:
.eb4f	c9 2a		cmp #$2a			cmp 	#"*" 						; the -1/0/1 value in AC.
.eb51	d0 0b		bne $eb5e			bne 	_skip1
.eb53	20 aa eb	jsr $ebaa			jsr 	FPT_Preamble
.eb56	20 0f c4	jsr $c40f			jsr 	FPMultiply
.eb59	20 b0 eb	jsr $ebb0			jsr 	FPT_Postamble
.eb5c	80 b9		bra $eb17			bra 	FPTLoop
.eb5e					_skip1:
.eb5e	c9 2f		cmp #$2f			cmp 	#"/" 						; the -1/0/1 value in AC.
.eb60	d0 0b		bne $eb6d			bne 	_skip1
.eb62	20 aa eb	jsr $ebaa			jsr 	FPT_Preamble
.eb65	20 c0 c4	jsr $c4c0			jsr 	FPDivide
.eb68	20 b0 eb	jsr $ebb0			jsr 	FPT_Postamble
.eb6b	80 aa		bra $eb17			bra 	FPTLoop
.eb6d					_skip1:
.eb6d	c9 7e		cmp #$7e			cmp 	#"~" 						; ~, compare
.eb6f	f0 1a		beq $eb8b			beq 	FPTCompare
.eb71	c9 3d		cmp #$3d			cmp 	#"="						; = check equal
.eb73	f0 28		beq $eb9d			beq 	FPTCheck
.eb75					FPTError:
.eb75	80 fe		bra $eb75			bra 	FPTError
.eb77					FPTLoad:
.eb77	a0 06		ldy #$06			ldy 	#6 							; data to copy
.eb79					_FPTLoadLoop:
.eb79	20 b6 eb	jsr $ebb6			jsr 	FPTGet
.eb7c	9d 00 03	sta $0300,x			sta 	XS_Mantissa,x
.eb7f	e8		inx				inx
.eb80	88		dey				dey
.eb81	d0 f6		bne $eb79			bne 	_FPTLoadLoop
.eb83	80 92		bra $eb17			bra 	FPTLoop
.eb85					FPTExit:
.eb85	a9 2a		lda #$2a			lda 	#42
.eb87	20 8f e9	jsr $e98f			jsr 	IFT_PrintCharacter
.eb8a	60		rts				rts
.eb8b					FPTCompare:
.eb8b	20 aa eb	jsr $ebaa			jsr 	FPT_Preamble
.eb8e	20 48 c5	jsr $c548			jsr 	FPCompare
.eb91	20 6d c1	jsr $c16d			jsr 	FPUSetInteger
.eb94	20 ab c1	jsr $c1ab			jsr 	FPUToFloat
.eb97	20 b0 eb	jsr $ebb0			jsr 	FPT_Postamble
.eb9a	4c 17 eb	jmp $eb17			jmp 	FPTLoop
.eb9d					FPTCheck:
.eb9d	20 aa eb	jsr $ebaa			jsr 	FPT_Preamble
.eba0	20 48 c5	jsr $c548			jsr 	FPCompare
.eba3	09 00		ora #$00			ora 	#0
.eba5					_FPTCFail:
.eba5	d0 fe		bne $eba5			bne 	_FPTCFail
.eba7	4c 17 eb	jmp $eb17			jmp 	FPTLoop
.ebaa					FPT_Preamble:
.ebaa	8a		txa				txa
.ebab	38		sec				sec
.ebac	e9 0c		sbc #$0c			sbc 	#12
.ebae	aa		tax				tax
.ebaf	60		rts				rts
.ebb0					FPT_Postamble:
.ebb0	8a		txa				txa
.ebb1	18		clc				clc
.ebb2	69 06		adc #$06			adc 	#6
.ebb4	aa		tax				tax
.ebb5	60		rts				rts
.ebb6	5a		phy		FPTGet:	phy
.ebb7	a0 00		ldy #$00			ldy 	#0
.ebb9	b1 1a		lda ($1a),y			lda 	(zGenPtr),y
.ebbb	48		pha				pha
.ebbc	e6 1a		inc $1a				inc 	zGenPtr
.ebbe	d0 02		bne $ebc2			bne 	_FPTGet1
.ebc0	e6 1b		inc $1b				inc 	zGenPtr+1
.ebc2					_FPTGet1:
.ebc2	68		pla				pla
.ebc3	7a		ply				ply
.ebc4	60		rts				rts
.ebc5					FPTTestData:

;******  Processing file: testing/script.inc

>ebc5	01					.byte 	1	; *** Load Integer 99999 ***
>ebc6	9f 86 01 00				.dword 	$1869f
>ebca	00 01					.byte 	0,$01
>ebcc	01					.byte 	1     ; *** Load Float 7.017803 ***
>ebcd	98 d7 91 e0				.dword 	$e091d798
>ebd1	83 00					.byte 	$83,$0
>ebd3	01					.byte 	1     ; *** Load Float -7.136324711609631e-12 ***
>ebd4	72 4c 16 fb				.dword 	$fb164c72
>ebd8	5b 80					.byte 	$5b,$80
>ebda	2a					.byte 	$2a   ; *** Command * ***
>ebdb	01					.byte 	1     ; *** Load Float -5.00813209701082e-11 ***
>ebdc	fb 8d 42 dc				.dword 	$dc428dfb
>ebe0	5e 80					.byte 	$5e,$80
>ebe2	3d					.byte 	$3d   ; *** Command = ***
>ebe3	01					.byte 	1     ; *** Load Float -874.0198399999999 ***
>ebe4	0e 45 81 da				.dword 	$da81450e
>ebe8	8a 80					.byte 	$8a,$80
>ebea	01					.byte 	1     ; *** Load Float 0.0 ***
>ebeb	00 00 00 00				.dword 	$0
>ebef	80 40					.byte 	$80,$40
>ebf1	2d					.byte 	$2d   ; *** Command - ***
>ebf2	01					.byte 	1     ; *** Load Float -874.0198399999999 ***
>ebf3	0e 45 81 da				.dword 	$da81450e
>ebf7	8a 80					.byte 	$8a,$80
>ebf9	3d					.byte 	$3d   ; *** Command = ***
>ebfa	01					.byte 	1     ; *** Load Float 120.3 ***
>ebfb	99 99 99 f0				.dword 	$f0999999
>ebff	87 00					.byte 	$87,$0
>ec01	01					.byte 	1     ; *** Load Float 6.55696 ***
>ec02	c7 9d d2 d1				.dword 	$d1d29dc7
>ec06	83 00					.byte 	$83,$0
>ec08	2d					.byte 	$2d   ; *** Command - ***
>ec09	01					.byte 	1     ; *** Load Float 113.74304 ***
>ec0a	bd 6f 7c e3				.dword 	$e37c6fbd
>ec0e	87 00					.byte 	$87,$0
>ec10	3d					.byte 	$3d   ; *** Command = ***
>ec11	01					.byte 	1     ; *** Load Float 72175813528146.4 ***
>ec12	74 7b 49 83				.dword 	$83497b74
>ec16	af 00					.byte 	$af,$0
>ec18	01					.byte 	1     ; *** Load Float 7.685648597544059e-13 ***
>ec19	45 ef 54 d8				.dword 	$d854ef45
>ec1d	58 00					.byte 	$58,$0
>ec1f	2b					.byte 	$2b   ; *** Command + ***
>ec20	01					.byte 	1     ; *** Load Float 72175813528146.4 ***
>ec21	74 7b 49 83				.dword 	$83497b74
>ec25	af 00					.byte 	$af,$0
>ec27	3d					.byte 	$3d   ; *** Command = ***
>ec28	01					.byte 	1     ; *** Load Float 0.0 ***
>ec29	00 00 00 00				.dword 	$0
>ec2d	80 40					.byte 	$80,$40
>ec2f	01					.byte 	1     ; *** Load Float 878.44 ***
>ec30	f5 28 9c db				.dword 	$db9c28f5
>ec34	8a 00					.byte 	$8a,$0
>ec36	7e					.byte 	$7e   ; *** Command ~ ***
>ec37	01					.byte 	1     ; *** Load Float -1 ***
>ec38	00 00 00 80				.dword 	$80000000
>ec3c	81 80					.byte 	$81,$80
>ec3e	3d					.byte 	$3d   ; *** Command = ***
>ec3f	01					.byte 	1     ; *** Load Float -601.43 ***
>ec40	1e 85 5b 96				.dword 	$965b851e
>ec44	8a 80					.byte 	$8a,$80
>ec46	01					.byte 	1     ; *** Load Float -0.000231041259765625 ***
>ec47	79 aa 43 f2				.dword 	$f243aa79
>ec4b	74 80					.byte 	$74,$80
>ec4d	2b					.byte 	$2b   ; *** Command + ***
>ec4e	01					.byte 	1     ; *** Load Float -601.4302310412597 ***
>ec4f	e7 88 5b 96				.dword 	$965b88e7
>ec53	8a 80					.byte 	$8a,$80
>ec55	3d					.byte 	$3d   ; *** Command = ***
>ec56	01					.byte 	1     ; *** Load Float 7527423729521.918 ***
>ec57	5b ad 13 db				.dword 	$db13ad5b
>ec5b	ab 00					.byte 	$ab,$0
>ec5d	01					.byte 	1     ; *** Load Float 536.01 ***
>ec5e	d7 a3 00 86				.dword 	$8600a3d7
>ec62	8a 00					.byte 	$8a,$0
>ec64	2b					.byte 	$2b   ; *** Command + ***
>ec65	01					.byte 	1     ; *** Load Float 7527423730057.928 ***
>ec66	5c ad 13 db				.dword 	$db13ad5c
>ec6a	ab 00					.byte 	$ab,$0
>ec6c	3d					.byte 	$3d   ; *** Command = ***
>ec6d	01					.byte 	1     ; *** Load Float 1330.253824 ***
>ec6e	53 1f 48 a6				.dword 	$a6481f53
>ec72	8b 00					.byte 	$8b,$0
>ec74	01					.byte 	1     ; *** Load Float -8.0 ***
>ec75	00 00 00 80				.dword 	$80000000
>ec79	84 80					.byte 	$84,$80
>ec7b	2f					.byte 	$2f   ; *** Command / ***
>ec7c	01					.byte 	1     ; *** Load Float -166.281728 ***
>ec7d	53 1f 48 a6				.dword 	$a6481f53
>ec81	88 80					.byte 	$88,$80
>ec83	3d					.byte 	$3d   ; *** Command = ***
>ec84	01					.byte 	1     ; *** Load Float -567.5 ***
>ec85	00 00 e0 8d				.dword 	$8de00000
>ec89	8a 80					.byte 	$8a,$80
>ec8b	01					.byte 	1     ; *** Load Float -8441029931273.553 ***
>ec8c	e6 92 aa f5				.dword 	$f5aa92e6
>ec90	ab 80					.byte 	$ab,$80
>ec92	7e					.byte 	$7e   ; *** Command ~ ***
>ec93	01					.byte 	1     ; *** Load Float 1 ***
>ec94	00 00 00 80				.dword 	$80000000
>ec98	81 00					.byte 	$81,$0
>ec9a	3d					.byte 	$3d   ; *** Command = ***
>ec9b	01					.byte 	1     ; *** Load Float -6179308124659.254 ***
>ec9c	e7 6e d7 b3				.dword 	$b3d76ee7
>eca0	ab 80					.byte 	$ab,$80
>eca2	01					.byte 	1     ; *** Load Float -1006.1250560000001 ***
>eca3	ea 00 88 fb				.dword 	$fb8800ea
>eca7	8a 80					.byte 	$8a,$80
>eca9	2a					.byte 	$2a   ; *** Command * ***
>ecaa	01					.byte 	1     ; *** Load Float 6217156732964047.0 ***
>ecab	d4 c4 b3 b0				.dword 	$b0b3c4d4
>ecaf	b5 00					.byte 	$b5,$0
>ecb1	3d					.byte 	$3d   ; *** Command = ***
>ecb2	01					.byte 	1     ; *** Load Float 4.23 ***
>ecb3	f5 28 5c 87				.dword 	$875c28f5
>ecb7	83 00					.byte 	$83,$0
>ecb9	01					.byte 	1     ; *** Load Float 72.49 ***
>ecba	47 e1 fa 90				.dword 	$90fae147
>ecbe	87 00					.byte 	$87,$0
>ecc0	2f					.byte 	$2f   ; *** Command / ***
>ecc1	01					.byte 	1     ; *** Load Float 0.058352876258794324 ***
>ecc2	f2 6c 03 ef				.dword 	$ef036cf2
>ecc6	7c 00					.byte 	$7c,$0
>ecc8	3d					.byte 	$3d   ; *** Command = ***
>ecc9	01					.byte 	1     ; *** Load Float -809.0 ***
>ecca	00 00 40 ca				.dword 	$ca400000
>ecce	8a 80					.byte 	$8a,$80
>ecd0	01					.byte 	1     ; *** Load Float 2.171265 ***
>ecd1	79 01 f6 8a				.dword 	$8af60179
>ecd5	82 00					.byte 	$82,$0
>ecd7	2d					.byte 	$2d   ; *** Command - ***
>ecd8	01					.byte 	1     ; *** Load Float -811.171265 ***
>ecd9	01 f6 ca ca				.dword 	$cacaf601
>ecdd	8a 80					.byte 	$8a,$80
>ecdf	3d					.byte 	$3d   ; *** Command = ***
>ece0	01					.byte 	1     ; *** Load Float 2.665981650352478e-09 ***
>ece1	f7 71 34 b7				.dword 	$b73471f7
>ece5	64 00					.byte 	$64,$0
>ece7	01					.byte 	1     ; *** Load Float -30.6 ***
>ece8	cc cc cc f4				.dword 	$f4cccccc
>ecec	85 80					.byte 	$85,$80
>ecee	7e					.byte 	$7e   ; *** Command ~ ***
>ecef	01					.byte 	1     ; *** Load Float 1 ***
>ecf0	00 00 00 80				.dword 	$80000000
>ecf4	81 00					.byte 	$81,$0
>ecf6	3d					.byte 	$3d   ; *** Command = ***
>ecf7	01					.byte 	1     ; *** Load Float -33770.04544 ***
>ecf8	a1 0b ea 83				.dword 	$83ea0ba1
>ecfc	90 80					.byte 	$90,$80
>ecfe	01					.byte 	1     ; *** Load Float -33770.04544 ***
>ecff	a1 0b ea 83				.dword 	$83ea0ba1
>ed03	90 80					.byte 	$90,$80
>ed05	2f					.byte 	$2f   ; *** Command / ***
>ed06	01					.byte 	1     ; *** Load Float 1.0 ***
>ed07	00 00 00 80				.dword 	$80000000
>ed0b	81 00					.byte 	$81,$0
>ed0d	3d					.byte 	$3d   ; *** Command = ***
>ed0e	01					.byte 	1     ; *** Load Float 11.0 ***
>ed0f	00 00 00 b0				.dword 	$b0000000
>ed13	84 00					.byte 	$84,$0
>ed15	01					.byte 	1     ; *** Load Float 819.26 ***
>ed16	d7 a3 d0 cc				.dword 	$ccd0a3d7
>ed1a	8a 00					.byte 	$8a,$0
>ed1c	2f					.byte 	$2f   ; *** Command / ***
>ed1d	01					.byte 	1     ; *** Load Float 0.013426750970387912 ***
>ed1e	13 e0 fb db				.dword 	$dbfbe013
>ed22	7a 00					.byte 	$7a,$0
>ed24	3d					.byte 	$3d   ; *** Command = ***
>ed25	01					.byte 	1     ; *** Load Float 1.019968 ***
>ed26	b9 4f 8e 82				.dword 	$828e4fb9
>ed2a	81 00					.byte 	$81,$0
>ed2c	01					.byte 	1     ; *** Load Float 0.0 ***
>ed2d	00 00 00 00				.dword 	$0
>ed31	80 40					.byte 	$80,$40
>ed33	2a					.byte 	$2a   ; *** Command * ***
>ed34	01					.byte 	1     ; *** Load Float 0.0 ***
>ed35	00 00 00 00				.dword 	$0
>ed39	80 40					.byte 	$80,$40
>ed3b	3d					.byte 	$3d   ; *** Command = ***
>ed3c	01					.byte 	1     ; *** Load Float 8444341.911552 ***
>ed3d	e9 b5 d9 80				.dword 	$80d9b5e9
>ed41	98 00					.byte 	$98,$0
>ed43	01					.byte 	1     ; *** Load Float 0.181606 ***
>ed44	5b ec f6 b9				.dword 	$b9f6ec5b
>ed48	7e 00					.byte 	$7e,$0
>ed4a	7e					.byte 	$7e   ; *** Command ~ ***
>ed4b	01					.byte 	1     ; *** Load Float 1 ***
>ed4c	00 00 00 80				.dword 	$80000000
>ed50	81 00					.byte 	$81,$0
>ed52	3d					.byte 	$3d   ; *** Command = ***
>ed53	01					.byte 	1     ; *** Load Float 0.478911 ***
>ed54	95 d2 33 f5				.dword 	$f533d295
>ed58	7f 00					.byte 	$7f,$0
>ed5a	01					.byte 	1     ; *** Load Float 15.0 ***
>ed5b	00 00 00 f0				.dword 	$f0000000
>ed5f	84 00					.byte 	$84,$0
>ed61	2d					.byte 	$2d   ; *** Command - ***
>ed62	01					.byte 	1     ; *** Load Float -14.521089 ***
>ed63	6b 61 56 e8				.dword 	$e856616b
>ed67	84 80					.byte 	$84,$80
>ed69	3d					.byte 	$3d   ; *** Command = ***
>ed6a	01					.byte 	1     ; *** Load Float -0.373037 ***
>ed6b	a6 b4 fe be				.dword 	$befeb4a6
>ed6f	7f 80					.byte 	$7f,$80
>ed71	01					.byte 	1     ; *** Load Float 16.0 ***
>ed72	00 00 00 80				.dword 	$80000000
>ed76	85 00					.byte 	$85,$0
>ed78	2b					.byte 	$2b   ; *** Command + ***
>ed79	01					.byte 	1     ; *** Load Float 15.626963 ***
>ed7a	5a 0a 08 fa				.dword 	$fa080a5a
>ed7e	84 00					.byte 	$84,$0
>ed80	3d					.byte 	$3d   ; *** Command = ***
>ed81	01					.byte 	1     ; *** Load Float 2.7385864257812504e-06 ***
>ed82	79 8e c8 b7				.dword 	$b7c88e79
>ed86	6e 00					.byte 	$6e,$0
>ed88	01					.byte 	1     ; *** Load Float 712.36 ***
>ed89	3d 0a 17 b2				.dword 	$b2170a3d
>ed8d	8a 00					.byte 	$8a,$0
>ed8f	2a					.byte 	$2a   ; *** Command * ***
>ed90	01					.byte 	1     ; *** Load Float 0.0019508594262695315 ***
>ed91	de fa b3 ff				.dword 	$ffb3fade
>ed95	77 00					.byte 	$77,$0
>ed97	3d					.byte 	$3d   ; *** Command = ***
>ed98	01					.byte 	1     ; *** Load Float 7.596099376678466e-08 ***
>ed99	79 ff 1f a3				.dword 	$a31fff79
>ed9d	69 00					.byte 	$69,$0
>ed9f	01					.byte 	1     ; *** Load Float 173.51 ***
>eda0	5c 8f 82 ad				.dword 	$ad828f5c
>eda4	88 00					.byte 	$88,$0
>eda6	2f					.byte 	$2f   ; *** Command / ***
>eda7	01					.byte 	1     ; *** Load Float 4.377902931634181e-10 ***
>eda8	9b 81 ad f0				.dword 	$f0ad819b
>edac	61 00					.byte 	$61,$0
>edae	3d					.byte 	$3d   ; *** Command = ***
>edaf	01					.byte 	1     ; *** Load Float 6.280726 ***
>edb0	17 b5 fb c8				.dword 	$c8fbb517
>edb4	83 00					.byte 	$83,$0
>edb6	01					.byte 	1     ; *** Load Float -5.0 ***
>edb7	00 00 00 a0				.dword 	$a0000000
>edbb	83 80					.byte 	$83,$80
>edbd	2f					.byte 	$2f   ; *** Command / ***
>edbe	01					.byte 	1     ; *** Load Float -1.2561452 ***
>edbf	ac 5d c9 a0				.dword 	$a0c95dac
>edc3	81 80					.byte 	$81,$80
>edc5	3d					.byte 	$3d   ; *** Command = ***
>edc6	01					.byte 	1     ; *** Load Float -0.000910037109375 ***
>edc7	7d 8e 8f ee				.dword 	$ee8f8e7d
>edcb	76 80					.byte 	$76,$80
>edcd	01					.byte 	1     ; *** Load Float 12.0 ***
>edce	00 00 00 c0				.dword 	$c0000000
>edd2	84 00					.byte 	$84,$0
>edd4	2b					.byte 	$2b   ; *** Command + ***
>edd5	01					.byte 	1     ; *** Load Float 11.999089962890626 ***
>edd6	c1 45 fc bf				.dword 	$bffc45c1
>edda	84 00					.byte 	$84,$0
>eddc	3d					.byte 	$3d   ; *** Command = ***
>eddd	01					.byte 	1     ; *** Load Float 170.85 ***
>edde	99 99 d9 aa				.dword 	$aad99999
>ede2	88 00					.byte 	$88,$0
>ede4	01					.byte 	1     ; *** Load Float 10.0 ***
>ede5	00 00 00 a0				.dword 	$a0000000
>ede9	84 00					.byte 	$84,$0
>edeb	2a					.byte 	$2a   ; *** Command * ***
>edec	01					.byte 	1     ; *** Load Float 1708.5 ***
>eded	00 00 90 d5				.dword 	$d5900000
>edf1	8b 00					.byte 	$8b,$0
>edf3	3d					.byte 	$3d   ; *** Command = ***
>edf4	01					.byte 	1     ; *** Load Float 2249.125888 ***
>edf5	a3 03 92 8c				.dword 	$8c9203a3
>edf9	8c 00					.byte 	$8c,$0
>edfb	01					.byte 	1     ; *** Load Float 1.4541263226419688e-11 ***
>edfc	13 07 d0 ff				.dword 	$ffd00713
>ee00	5c 00					.byte 	$5c,$0
>ee02	7e					.byte 	$7e   ; *** Command ~ ***
>ee03	01					.byte 	1     ; *** Load Float 1 ***
>ee04	00 00 00 80				.dword 	$80000000
>ee08	81 00					.byte 	$81,$0
>ee0a	3d					.byte 	$3d   ; *** Command = ***
>ee0b	01					.byte 	1     ; *** Load Float -20.0 ***
>ee0c	00 00 00 a0				.dword 	$a0000000
>ee10	85 80					.byte 	$85,$80
>ee12	01					.byte 	1     ; *** Load Float -895.3 ***
>ee13	33 33 d3 df				.dword 	$dfd33333
>ee17	8a 80					.byte 	$8a,$80
>ee19	2b					.byte 	$2b   ; *** Command + ***
>ee1a	01					.byte 	1     ; *** Load Float -915.3 ***
>ee1b	33 33 d3 e4				.dword 	$e4d33333
>ee1f	8a 80					.byte 	$8a,$80
>ee21	3d					.byte 	$3d   ; *** Command = ***
>ee22	01					.byte 	1     ; *** Load Float 1.793851 ***
>ee23	d9 e8 9c e5				.dword 	$e59ce8d9
>ee27	81 00					.byte 	$81,$0
>ee29	01					.byte 	1     ; *** Load Float -17.0 ***
>ee2a	00 00 00 88				.dword 	$88000000
>ee2e	85 80					.byte 	$85,$80
>ee30	7e					.byte 	$7e   ; *** Command ~ ***
>ee31	01					.byte 	1     ; *** Load Float 1 ***
>ee32	00 00 00 80				.dword 	$80000000
>ee36	81 00					.byte 	$81,$0
>ee38	3d					.byte 	$3d   ; *** Command = ***
>ee39	01					.byte 	1     ; *** Load Float 2.0 ***
>ee3a	00 00 00 80				.dword 	$80000000
>ee3e	82 00					.byte 	$82,$0
>ee40	01					.byte 	1     ; *** Load Float 5.133580416440965e-10 ***
>ee41	57 5c 1c 8d				.dword 	$8d1c5c57
>ee45	62 00					.byte 	$62,$0
>ee47	7e					.byte 	$7e   ; *** Command ~ ***
>ee48	01					.byte 	1     ; *** Load Float 1 ***
>ee49	00 00 00 80				.dword 	$80000000
>ee4d	81 00					.byte 	$81,$0
>ee4f	3d					.byte 	$3d   ; *** Command = ***
>ee50	01					.byte 	1     ; *** Load Float 353.22 ***
>ee51	f5 28 9c b0				.dword 	$b09c28f5
>ee55	89 00					.byte 	$89,$0
>ee57	01					.byte 	1     ; *** Load Float -0.609302 ***
>ee58	43 37 fb 9b				.dword 	$9bfb3743
>ee5c	80 80					.byte 	$80,$80
>ee5e	7e					.byte 	$7e   ; *** Command ~ ***
>ee5f	01					.byte 	1     ; *** Load Float 1 ***
>ee60	00 00 00 80				.dword 	$80000000
>ee64	81 00					.byte 	$81,$0
>ee66	3d					.byte 	$3d   ; *** Command = ***
>ee67	01					.byte 	1     ; *** Load Float 2.740255 ***
>ee68	81 56 60 af				.dword 	$af605681
>ee6c	82 00					.byte 	$82,$0
>ee6e	01					.byte 	1     ; *** Load Float 6.977575 ***
>ee6f	5d 4b 48 df				.dword 	$df484b5d
>ee73	83 00					.byte 	$83,$0
>ee75	2b					.byte 	$2b   ; *** Command + ***
>ee76	01					.byte 	1     ; *** Load Float 9.71783 ***
>ee77	4f 3b 7c 9b				.dword 	$9b7c3b4f
>ee7b	84 00					.byte 	$84,$0
>ee7d	3d					.byte 	$3d   ; *** Command = ***
>ee7e	01					.byte 	1     ; *** Load Float 5.116488 ***
>ee7f	0a 45 ba a3				.dword 	$a3ba450a
>ee83	83 00					.byte 	$83,$0
>ee85	01					.byte 	1     ; *** Load Float -1.1235329111514147e-14 ***
>ee86	67 cf 65 ca				.dword 	$ca65cf67
>ee8a	52 80					.byte 	$52,$80
>ee8c	2b					.byte 	$2b   ; *** Command + ***
>ee8d	01					.byte 	1     ; *** Load Float 5.116487999999989 ***
>ee8e	0a 45 ba a3				.dword 	$a3ba450a
>ee92	83 00					.byte 	$83,$0
>ee94	3d					.byte 	$3d   ; *** Command = ***
>ee95	01					.byte 	1     ; *** Load Float -609.35 ***
>ee96	66 66 56 98				.dword 	$98566666
>ee9a	8a 80					.byte 	$8a,$80
>ee9c	01					.byte 	1     ; *** Load Float 10.0 ***
>ee9d	00 00 00 a0				.dword 	$a0000000
>eea1	84 00					.byte 	$84,$0
>eea3	2d					.byte 	$2d   ; *** Command - ***
>eea4	01					.byte 	1     ; *** Load Float -619.35 ***
>eea5	66 66 d6 9a				.dword 	$9ad66666
>eea9	8a 80					.byte 	$8a,$80
>eeab	3d					.byte 	$3d   ; *** Command = ***
>eeac	01					.byte 	1     ; *** Load Float -9.106769561767577e-07 ***
>eead	70 3e 75 f4				.dword 	$f4753e70
>eeb1	6c 80					.byte 	$6c,$80
>eeb3	01					.byte 	1     ; *** Load Float -9.0 ***
>eeb4	00 00 00 90				.dword 	$90000000
>eeb8	84 80					.byte 	$84,$80
>eeba	2d					.byte 	$2d   ; *** Command - ***
>eebb	01					.byte 	1     ; *** Load Float 8.999999089323044 ***
>eebc	0b ff ff 8f				.dword 	$8fffff0b
>eec0	84 00					.byte 	$84,$0
>eec2	3d					.byte 	$3d   ; *** Command = ***
>eec3	01					.byte 	1     ; *** Load Float -16.0 ***
>eec4	00 00 00 80				.dword 	$80000000
>eec8	85 80					.byte 	$85,$80
>eeca	01					.byte 	1     ; *** Load Float -19.0 ***
>eecb	00 00 00 98				.dword 	$98000000
>eecf	85 80					.byte 	$85,$80
>eed1	2a					.byte 	$2a   ; *** Command * ***
>eed2	01					.byte 	1     ; *** Load Float 304.0 ***
>eed3	00 00 00 98				.dword 	$98000000
>eed7	89 00					.byte 	$89,$0
>eed9	3d					.byte 	$3d   ; *** Command = ***
>eeda	01					.byte 	1     ; *** Load Float -6.0 ***
>eedb	00 00 00 c0				.dword 	$c0000000
>eedf	83 80					.byte 	$83,$80
>eee1	01					.byte 	1     ; *** Load Float 3.4182510375976564e-06 ***
>eee2	0c 1b 65 e5				.dword 	$e5651b0c
>eee6	6e 00					.byte 	$6e,$0
>eee8	2d					.byte 	$2d   ; *** Command - ***
>eee9	01					.byte 	1     ; *** Load Float -6.000003418251038 ***
>eeea	2b 07 00 c0				.dword 	$c000072b
>eeee	83 80					.byte 	$83,$80
>eef0	3d					.byte 	$3d   ; *** Command = ***
>eef1	01					.byte 	1     ; *** Load Float 428.48 ***
>eef2	a3 70 3d d6				.dword 	$d63d70a3
>eef6	89 00					.byte 	$89,$0
>eef8	01					.byte 	1     ; *** Load Float -4.0 ***
>eef9	00 00 00 80				.dword 	$80000000
>eefd	83 80					.byte 	$83,$80
>eeff	7e					.byte 	$7e   ; *** Command ~ ***
>ef00	01					.byte 	1     ; *** Load Float 1 ***
>ef01	00 00 00 80				.dword 	$80000000
>ef05	81 00					.byte 	$81,$0
>ef07	3d					.byte 	$3d   ; *** Command = ***
>ef08	01					.byte 	1     ; *** Load Float -3.017817107320297e-16 ***
>ef09	af 1e f7 ad				.dword 	$adf71eaf
>ef0d	4d 80					.byte 	$4d,$80
>ef0f	01					.byte 	1     ; *** Load Float 840.35 ***
>ef10	66 66 16 d2				.dword 	$d2166666
>ef14	8a 00					.byte 	$8a,$0
>ef16	7e					.byte 	$7e   ; *** Command ~ ***
>ef17	01					.byte 	1     ; *** Load Float -1 ***
>ef18	00 00 00 80				.dword 	$80000000
>ef1c	81 80					.byte 	$81,$80
>ef1e	3d					.byte 	$3d   ; *** Command = ***
>ef1f	01					.byte 	1     ; *** Load Float 853.24 ***
>ef20	28 5c 4f d5				.dword 	$d54f5c28
>ef24	8a 00					.byte 	$8a,$0
>ef26	01					.byte 	1     ; *** Load Float 18.0 ***
>ef27	00 00 00 90				.dword 	$90000000
>ef2b	85 00					.byte 	$85,$0
>ef2d	2a					.byte 	$2a   ; *** Command * ***
>ef2e	01					.byte 	1     ; *** Load Float 15358.32 ***
>ef2f	ae 47 f9 ef				.dword 	$eff947ae
>ef33	8e 00					.byte 	$8e,$0
>ef35	3d					.byte 	$3d   ; *** Command = ***
>ef36	01					.byte 	1     ; *** Load Float 10.0 ***
>ef37	00 00 00 a0				.dword 	$a0000000
>ef3b	84 00					.byte 	$84,$0
>ef3d	01					.byte 	1     ; *** Load Float 5.934681 ***
>ef3e	20 e8 e8 bd				.dword 	$bde8e820
>ef42	83 00					.byte 	$83,$0
>ef44	7e					.byte 	$7e   ; *** Command ~ ***
>ef45	01					.byte 	1     ; *** Load Float 1 ***
>ef46	00 00 00 80				.dword 	$80000000
>ef4a	81 00					.byte 	$81,$0
>ef4c	3d					.byte 	$3d   ; *** Command = ***
>ef4d	01					.byte 	1     ; *** Load Float -630598505831.8582 ***
>ef4e	95 99 d2 92				.dword 	$92d29995
>ef52	a8 80					.byte 	$a8,$80
>ef54	01					.byte 	1     ; *** Load Float -17.0 ***
>ef55	00 00 00 88				.dword 	$88000000
>ef59	85 80					.byte 	$85,$80
>ef5b	2f					.byte 	$2f   ; *** Command / ***
>ef5c	01					.byte 	1     ; *** Load Float 37094029754.815186 ***
>ef5d	9b 9f 2f 8a				.dword 	$8a2f9f9b
>ef61	a4 00					.byte 	$a4,$0
>ef63	3d					.byte 	$3d   ; *** Command = ***
>ef64	01					.byte 	1     ; *** Load Float 4.899333 ***
>ef65	ff 55 c7 9c				.dword 	$9cc755ff
>ef69	83 00					.byte 	$83,$0
>ef6b	01					.byte 	1     ; *** Load Float 1.23753662109375e-05 ***
>ef6c	0c cb 9f cf				.dword 	$cf9fcb0c
>ef70	70 00					.byte 	$70,$0
>ef72	2f					.byte 	$2f   ; *** Command / ***
>ef73	01					.byte 	1     ; *** Load Float 395893.9813570858 ***
>ef74	67 bf 4e c1				.dword 	$c14ebf67
>ef78	93 00					.byte 	$93,$0
>ef7a	3d					.byte 	$3d   ; *** Command = ***
>ef7b	01					.byte 	1     ; *** Load Float -12.0 ***
>ef7c	00 00 00 c0				.dword 	$c0000000
>ef80	84 80					.byte 	$84,$80
>ef82	01					.byte 	1     ; *** Load Float 75324.194816 ***
>ef83	ef 18 1e 93				.dword 	$931e18ef
>ef87	91 00					.byte 	$91,$0
>ef89	2d					.byte 	$2d   ; *** Command - ***
>ef8a	01					.byte 	1     ; *** Load Float -75336.194816 ***
>ef8b	ef 18 24 93				.dword 	$932418ef
>ef8f	91 80					.byte 	$91,$80
>ef91	3d					.byte 	$3d   ; *** Command = ***
>ef92	01					.byte 	1     ; *** Load Float 16828643938.402304 ***
>ef93	98 2e c4 fa				.dword 	$fac42e98
>ef97	a2 00					.byte 	$a2,$0
>ef99	01					.byte 	1     ; *** Load Float 16828643938.402304 ***
>ef9a	98 2e c4 fa				.dword 	$fac42e98
>ef9e	a2 00					.byte 	$a2,$0
>efa0	2b					.byte 	$2b   ; *** Command + ***
>efa1	01					.byte 	1     ; *** Load Float 33657287876.804607 ***
>efa2	98 2e c4 fa				.dword 	$fac42e98
>efa6	a3 00					.byte 	$a3,$0
>efa8	3d					.byte 	$3d   ; *** Command = ***
>efa9	01					.byte 	1     ; *** Load Float 77307.57632 ***
>efaa	c4 c9 fd 96				.dword 	$96fdc9c4
>efae	91 00					.byte 	$91,$0
>efb0	01					.byte 	1     ; *** Load Float -1.9129482097923755e-11 ***
>efb1	a4 c3 43 a8				.dword 	$a843c3a4
>efb5	5d 80					.byte 	$5d,$80
>efb7	2b					.byte 	$2b   ; *** Command + ***
>efb8	01					.byte 	1     ; *** Load Float 77307.57631999998 ***
>efb9	c4 c9 fd 96				.dword 	$96fdc9c4
>efbd	91 00					.byte 	$91,$0
>efbf	3d					.byte 	$3d   ; *** Command = ***
>efc0	01					.byte 	1     ; *** Load Float -657.03 ***
>efc1	85 eb 41 a4				.dword 	$a441eb85
>efc5	8a 80					.byte 	$8a,$80
>efc7	01					.byte 	1     ; *** Load Float 883.41 ***
>efc8	70 3d da dc				.dword 	$dcda3d70
>efcc	8a 00					.byte 	$8a,$0
>efce	7e					.byte 	$7e   ; *** Command ~ ***
>efcf	01					.byte 	1     ; *** Load Float -1 ***
>efd0	00 00 00 80				.dword 	$80000000
>efd4	81 80					.byte 	$81,$80
>efd6	3d					.byte 	$3d   ; *** Command = ***
>efd7	01					.byte 	1     ; *** Load Float 6.83613121509552e-10 ***
>efd8	32 ff e8 bb				.dword 	$bbe8ff32
>efdc	62 00					.byte 	$62,$0
>efde	01					.byte 	1     ; *** Load Float -1.7746799585438565e-15 ***
>efdf	4e 22 c2 ff				.dword 	$ffc2224e
>efe3	4f 80					.byte 	$4f,$80
>efe5	2d					.byte 	$2d   ; *** Command - ***
>efe6	01					.byte 	1     ; *** Load Float 6.836148961895105e-10 ***
>efe7	2a 1f e9 bb				.dword 	$bbe91f2a
>efeb	62 00					.byte 	$62,$0
>efed	3d					.byte 	$3d   ; *** Command = ***
>efee	01					.byte 	1     ; *** Load Float -13.0 ***
>efef	00 00 00 d0				.dword 	$d0000000
>eff3	84 80					.byte 	$84,$80
>eff5	01					.byte 	1     ; *** Load Float -15.0 ***
>eff6	00 00 00 f0				.dword 	$f0000000
>effa	84 80					.byte 	$84,$80
>effc	7e					.byte 	$7e   ; *** Command ~ ***
>effd	01					.byte 	1     ; *** Load Float 1 ***
>effe	00 00 00 80				.dword 	$80000000
>f002	81 00					.byte 	$81,$0
>f004	3d					.byte 	$3d   ; *** Command = ***
>f005	01					.byte 	1     ; *** Load Float -5.0 ***
>f006	00 00 00 a0				.dword 	$a0000000
>f00a	83 80					.byte 	$83,$80
>f00c	01					.byte 	1     ; *** Load Float 3.8932132720947267e-07 ***
>f00d	70 ea 03 d1				.dword 	$d103ea70
>f011	6b 00					.byte 	$6b,$0
>f013	7e					.byte 	$7e   ; *** Command ~ ***
>f014	01					.byte 	1     ; *** Load Float -1 ***
>f015	00 00 00 80				.dword 	$80000000
>f019	81 80					.byte 	$81,$80
>f01b	3d					.byte 	$3d   ; *** Command = ***
>f01c	01					.byte 	1     ; *** Load Float 8.158343 ***
>f01d	ab 92 88 82				.dword 	$828892ab
>f021	84 00					.byte 	$84,$0
>f023	01					.byte 	1     ; *** Load Float 2.536989 ***
>f024	1c 07 5e a2				.dword 	$a25e071c
>f028	82 00					.byte 	$82,$0
>f02a	2f					.byte 	$2f   ; *** Command / ***
>f02b	01					.byte 	1     ; *** Load Float 3.21575812902618 ***
>f02c	2f fb ce cd				.dword 	$cdcefb2f
>f030	82 00					.byte 	$82,$0
>f032	3d					.byte 	$3d   ; *** Command = ***
>f033	01					.byte 	1     ; *** Load Float -14.0 ***
>f034	00 00 00 e0				.dword 	$e0000000
>f038	84 80					.byte 	$84,$80
>f03a	01					.byte 	1     ; *** Load Float 11824130452917.059 ***
>f03b	86 51 10 ac				.dword 	$ac105186
>f03f	ac 00					.byte 	$ac,$0
>f041	2f					.byte 	$2f   ; *** Command / ***
>f042	01					.byte 	1     ; *** Load Float -1.1840194131608338e-12 ***
>f043	8b cb a2 a6				.dword 	$a6a2cb8b
>f047	59 80					.byte 	$59,$80
>f049	3d					.byte 	$3d   ; *** Command = ***
>f04a	01					.byte 	1     ; *** Load Float 8.870793 ***
>f04b	a4 c4 ee 8d				.dword 	$8deec4a4
>f04f	84 00					.byte 	$84,$0
>f051	01					.byte 	1     ; *** Load Float -859.59 ***
>f052	8f c2 e5 d6				.dword 	$d6e5c28f
>f056	8a 80					.byte 	$8a,$80
>f058	2f					.byte 	$2f   ; *** Command / ***
>f059	01					.byte 	1     ; *** Load Float -0.010319795483893484 ***
>f05a	06 5c 14 a9				.dword 	$a9145c06
>f05e	7a 80					.byte 	$7a,$80
>f060	3d					.byte 	$3d   ; *** Command = ***
>f061	01					.byte 	1     ; *** Load Float 8344255315843.22 ***
>f062	f7 8b d9 f2				.dword 	$f2d98bf7
>f066	ab 00					.byte 	$ab,$0
>f068	01					.byte 	1     ; *** Load Float 9280015577.382912 ***
>f069	36 73 48 8a				.dword 	$8a487336
>f06d	a2 00					.byte 	$a2,$0
>f06f	2f					.byte 	$2f   ; *** Command / ***
>f070	01					.byte 	1     ; *** Load Float 899.1639341834393 ***
>f071	e5 7d ca e0				.dword 	$e0ca7de5
>f075	8a 00					.byte 	$8a,$0
>f077	3d					.byte 	$3d   ; *** Command = ***
>f078	01					.byte 	1     ; *** Load Float 648.62 ***
>f079	14 ae 27 a2				.dword 	$a227ae14
>f07d	8a 00					.byte 	$8a,$0
>f07f	01					.byte 	1     ; *** Load Float 0.725865 ***
>f080	e4 49 d2 b9				.dword 	$b9d249e4
>f084	80 00					.byte 	$80,$0
>f086	2a					.byte 	$2a   ; *** Command * ***
>f087	01					.byte 	1     ; *** Load Float 470.8105563 ***
>f088	4f c0 67 eb				.dword 	$eb67c04f
>f08c	89 00					.byte 	$89,$0
>f08e	3d					.byte 	$3d   ; *** Command = ***
>f08f	01					.byte 	1     ; *** Load Float -556.5 ***
>f090	00 00 20 8b				.dword 	$8b200000
>f094	8a 80					.byte 	$8a,$80
>f096	01					.byte 	1     ; *** Load Float -0.842877 ***
>f097	7d c9 c6 d7				.dword 	$d7c6c97d
>f09b	80 80					.byte 	$80,$80
>f09d	2f					.byte 	$2f   ; *** Command / ***
>f09e	01					.byte 	1     ; *** Load Float 660.238682512395 ***
>f09f	93 46 0f a5				.dword 	$a50f4693
>f0a3	8a 00					.byte 	$8a,$0
>f0a5	3d					.byte 	$3d   ; *** Command = ***
>f0a6	01					.byte 	1     ; *** Load Float -677.47 ***
>f0a7	7a 14 5e a9				.dword 	$a95e147a
>f0ab	8a 80					.byte 	$8a,$80
>f0ad	01					.byte 	1     ; *** Load Float -203.89 ***
>f0ae	0a d7 e3 cb				.dword 	$cbe3d70a
>f0b2	88 80					.byte 	$88,$80
>f0b4	7e					.byte 	$7e   ; *** Command ~ ***
>f0b5	01					.byte 	1     ; *** Load Float -1 ***
>f0b6	00 00 00 80				.dword 	$80000000
>f0ba	81 80					.byte 	$81,$80
>f0bc	3d					.byte 	$3d   ; *** Command = ***
>f0bd	01					.byte 	1     ; *** Load Float -4.0 ***
>f0be	00 00 00 80				.dword 	$80000000
>f0c2	83 80					.byte 	$83,$80
>f0c4	01					.byte 	1     ; *** Load Float 18.0 ***
>f0c5	00 00 00 90				.dword 	$90000000
>f0c9	85 00					.byte 	$85,$0
>f0cb	2f					.byte 	$2f   ; *** Command / ***
>f0cc	01					.byte 	1     ; *** Load Float -0.2222222222222222 ***
>f0cd	e3 38 8e e3				.dword 	$e38e38e3
>f0d1	7e 80					.byte 	$7e,$80
>f0d3	3d					.byte 	$3d   ; *** Command = ***
>f0d4	01					.byte 	1     ; *** Load Float 357937742.61043197 ***
>f0d5	74 92 ad aa				.dword 	$aaad9274
>f0d9	9d 00					.byte 	$9d,$0
>f0db	01					.byte 	1     ; *** Load Float 4.973392 ***
>f0dc	fa 06 26 9f				.dword 	$9f2606fa
>f0e0	83 00					.byte 	$83,$0
>f0e2	2f					.byte 	$2f   ; *** Command / ***
>f0e3	01					.byte 	1     ; *** Load Float 71970546.98492135 ***
>f0e4	5f de 45 89				.dword 	$8945de5f
>f0e8	9b 00					.byte 	$9b,$0
>f0ea	3d					.byte 	$3d   ; *** Command = ***
>f0eb	01					.byte 	1     ; *** Load Float -497.54 ***
>f0ec	b8 1e c5 f8				.dword 	$f8c51eb8
>f0f0	89 80					.byte 	$89,$80
>f0f2	01					.byte 	1     ; *** Load Float 404.99 ***
>f0f3	51 b8 7e ca				.dword 	$ca7eb851
>f0f7	89 00					.byte 	$89,$0
>f0f9	2b					.byte 	$2b   ; *** Command + ***
>f0fa	01					.byte 	1     ; *** Load Float -92.55000000000001 ***
>f0fb	99 99 19 b9				.dword 	$b9199999
>f0ff	87 80					.byte 	$87,$80
>f101	3d					.byte 	$3d   ; *** Command = ***
>f102	01					.byte 	1     ; *** Load Float 0.000187981689453125 ***
>f103	55 f3 1c c5				.dword 	$c51cf355
>f107	74 00					.byte 	$74,$0
>f109	01					.byte 	1     ; *** Load Float -2.4219818115234376e-06 ***
>f10a	a7 54 89 a2				.dword 	$a28954a7
>f10e	6e 80					.byte 	$6e,$80
>f110	2b					.byte 	$2b   ; *** Command + ***
>f111	01					.byte 	1     ; *** Load Float 0.00018555970764160156 ***
>f112	03 ce 92 c2				.dword 	$c292ce03
>f116	74 00					.byte 	$74,$0
>f118	3d					.byte 	$3d   ; *** Command = ***
>f119	01					.byte 	1     ; *** Load Float -7.0963203907012945e-09 ***
>f11a	ef e4 d3 f3				.dword 	$f3d3e4ef
>f11e	65 80					.byte 	$65,$80
>f120	01					.byte 	1     ; *** Load Float 1.0 ***
>f121	00 00 00 80				.dword 	$80000000
>f125	81 00					.byte 	$81,$0
>f127	2f					.byte 	$2f   ; *** Command / ***
>f128	01					.byte 	1     ; *** Load Float -7.0963203907012945e-09 ***
>f129	ef e4 d3 f3				.dword 	$f3d3e4ef
>f12d	65 80					.byte 	$65,$80
>f12f	3d					.byte 	$3d   ; *** Command = ***
>f130	01					.byte 	1     ; *** Load Float 1.677692413330078e-06 ***
>f131	87 12 2d e1				.dword 	$e12d1287
>f135	6d 00					.byte 	$6d,$0
>f137	01					.byte 	1     ; *** Load Float -0.473494 ***
>f138	39 ce 6d f2				.dword 	$f26dce39
>f13c	7f 80					.byte 	$7f,$80
>f13e	2f					.byte 	$2f   ; *** Command / ***
>f13f	01					.byte 	1     ; *** Load Float -3.5432178936376767e-06 ***
>f140	18 05 c8 ed				.dword 	$edc80518
>f144	6e 80					.byte 	$6e,$80
>f146	3d					.byte 	$3d   ; *** Command = ***
>f147	01					.byte 	1     ; *** Load Float 2.45029223151505e-11 ***
>f148	08 ad 87 d7				.dword 	$d787ad08
>f14c	5d 00					.byte 	$5d,$0
>f14e	01					.byte 	1     ; *** Load Float -19.0 ***
>f14f	00 00 00 98				.dword 	$98000000
>f153	85 80					.byte 	$85,$80
>f155	2b					.byte 	$2b   ; *** Command + ***
>f156	01					.byte 	1     ; *** Load Float -18.999999999975497 ***
>f157	ff ff ff 97				.dword 	$97ffffff
>f15b	85 80					.byte 	$85,$80
>f15d	3d					.byte 	$3d   ; *** Command = ***
>f15e	01					.byte 	1     ; *** Load Float 19.0 ***
>f15f	00 00 00 98				.dword 	$98000000
>f163	85 00					.byte 	$85,$0
>f165	01					.byte 	1     ; *** Load Float 2.449329 ***
>f166	6c ce c1 9c				.dword 	$9cc1ce6c
>f16a	82 00					.byte 	$82,$0
>f16c	2b					.byte 	$2b   ; *** Command + ***
>f16d	01					.byte 	1     ; *** Load Float 21.449329 ***
>f16e	cd 39 98 ab				.dword 	$ab9839cd
>f172	85 00					.byte 	$85,$0
>f174	3d					.byte 	$3d   ; *** Command = ***
>f175	01					.byte 	1     ; *** Load Float 370.83 ***
>f176	70 3d 6a b9				.dword 	$b96a3d70
>f17a	89 00					.byte 	$89,$0
>f17c	01					.byte 	1     ; *** Load Float 9.922441 ***
>f17d	7e 51 c2 9e				.dword 	$9ec2517e
>f181	84 00					.byte 	$84,$0
>f183	2a					.byte 	$2a   ; *** Command * ***
>f184	01					.byte 	1     ; *** Load Float 3679.5387960299995 ***
>f185	e8 9e f8 e5				.dword 	$e5f89ee8
>f189	8c 00					.byte 	$8c,$0
>f18b	3d					.byte 	$3d   ; *** Command = ***
>f18c	01					.byte 	1     ; *** Load Float 9.445458 ***
>f18d	91 98 20 97				.dword 	$97209891
>f191	84 00					.byte 	$84,$0
>f193	01					.byte 	1     ; *** Load Float 8.829259 ***
>f194	15 a5 44 8d				.dword 	$8d44a515
>f198	84 00					.byte 	$84,$0
>f19a	2f					.byte 	$2f   ; *** Command / ***
>f19b	01					.byte 	1     ; *** Load Float 1.069790567928747 ***
>f19c	b7 e5 ee 88				.dword 	$88eee5b7
>f1a0	81 00					.byte 	$81,$0
>f1a2	3d					.byte 	$3d   ; *** Command = ***
>f1a3	01					.byte 	1     ; *** Load Float -1.0 ***
>f1a4	00 00 00 80				.dword 	$80000000
>f1a8	81 80					.byte 	$81,$80
>f1aa	01					.byte 	1     ; *** Load Float 3.237703 ***
>f1ab	a4 86 36 cf				.dword 	$cf3686a4
>f1af	82 00					.byte 	$82,$0
>f1b1	2b					.byte 	$2b   ; *** Command + ***
>f1b2	01					.byte 	1     ; *** Load Float 2.237703 ***
>f1b3	a4 86 36 8f				.dword 	$8f3686a4
>f1b7	82 00					.byte 	$82,$0
>f1b9	3d					.byte 	$3d   ; *** Command = ***
>f1ba	01					.byte 	1     ; *** Load Float 9.015886 ***
>f1bb	ad 11 41 90				.dword 	$904111ad
>f1bf	84 00					.byte 	$84,$0
>f1c1	01					.byte 	1     ; *** Load Float -579.61 ***
>f1c2	3d 0a e7 90				.dword 	$90e70a3d
>f1c6	8a 80					.byte 	$8a,$80
>f1c8	7e					.byte 	$7e   ; *** Command ~ ***
>f1c9	01					.byte 	1     ; *** Load Float 1 ***
>f1ca	00 00 00 80				.dword 	$80000000
>f1ce	81 00					.byte 	$81,$0
>f1d0	3d					.byte 	$3d   ; *** Command = ***
>f1d1	01					.byte 	1     ; *** Load Float -10.0 ***
>f1d2	00 00 00 a0				.dword 	$a0000000
>f1d6	84 80					.byte 	$84,$80
>f1d8	01					.byte 	1     ; *** Load Float -11.0 ***
>f1d9	00 00 00 b0				.dword 	$b0000000
>f1dd	84 80					.byte 	$84,$80
>f1df	7e					.byte 	$7e   ; *** Command ~ ***
>f1e0	01					.byte 	1     ; *** Load Float 1 ***
>f1e1	00 00 00 80				.dword 	$80000000
>f1e5	81 00					.byte 	$81,$0
>f1e7	3d					.byte 	$3d   ; *** Command = ***
>f1e8	01					.byte 	1     ; *** Load Float 7.017029 ***
>f1e9	66 80 8b e0				.dword 	$e08b8066
>f1ed	83 00					.byte 	$83,$0
>f1ef	01					.byte 	1     ; *** Load Float -19.0 ***
>f1f0	00 00 00 98				.dword 	$98000000
>f1f4	85 80					.byte 	$85,$80
>f1f6	2b					.byte 	$2b   ; *** Command + ***
>f1f7	01					.byte 	1     ; *** Load Float -11.982971 ***
>f1f8	cc 3f ba bf				.dword 	$bfba3fcc
>f1fc	84 80					.byte 	$84,$80
>f1fe	3d					.byte 	$3d   ; *** Command = ***
>f1ff	01					.byte 	1     ; *** Load Float -13981125.18144 ***
>f200	2e c5 55 d5				.dword 	$d555c52e
>f204	98 80					.byte 	$98,$80
>f206	01					.byte 	1     ; *** Load Float -5.0 ***
>f207	00 00 00 a0				.dword 	$a0000000
>f20b	83 80					.byte 	$83,$80
>f20d	2d					.byte 	$2d   ; *** Command - ***
>f20e	01					.byte 	1     ; *** Load Float -13981120.18144 ***
>f20f	2e c0 55 d5				.dword 	$d555c02e
>f213	98 80					.byte 	$98,$80
>f215	3d					.byte 	$3d   ; *** Command = ***
>f216	01					.byte 	1     ; *** Load Float 9.472022 ***
>f217	f0 66 8d 97				.dword 	$978d66f0
>f21b	84 00					.byte 	$84,$0
>f21d	01					.byte 	1     ; *** Load Float -562.55 ***
>f21e	33 33 a3 8c				.dword 	$8ca33333
>f222	8a 80					.byte 	$8a,$80
>f224	7e					.byte 	$7e   ; *** Command ~ ***
>f225	01					.byte 	1     ; *** Load Float 1 ***
>f226	00 00 00 80				.dword 	$80000000
>f22a	81 00					.byte 	$81,$0
>f22c	3d					.byte 	$3d   ; *** Command = ***
>f22d	01					.byte 	1     ; *** Load Float 0.146929 ***
>f22e	47 8e 74 96				.dword 	$96748e47
>f232	7e 00					.byte 	$7e,$0
>f234	01					.byte 	1     ; *** Load Float 0.146929 ***
>f235	47 8e 74 96				.dword 	$96748e47
>f239	7e 00					.byte 	$7e,$0
>f23b	2f					.byte 	$2f   ; *** Command / ***
>f23c	01					.byte 	1     ; *** Load Float 1.0 ***
>f23d	00 00 00 80				.dword 	$80000000
>f241	81 00					.byte 	$81,$0
>f243	3d					.byte 	$3d   ; *** Command = ***
>f244	01					.byte 	1     ; *** Load Float -1.5862678992561995e-12 ***
>f245	fc 52 3f df				.dword 	$df3f52fc
>f249	59 80					.byte 	$59,$80
>f24b	01					.byte 	1     ; *** Load Float 8.251220703125e-06 ***
>f24c	1b b9 6e 8a				.dword 	$8a6eb91b
>f250	70 00					.byte 	$70,$0
>f252	2a					.byte 	$2a   ; *** Command * ***
>f253	01					.byte 	1     ; *** Load Float -1.3088646531045355e-17 ***
>f254	bc 62 71 f1				.dword 	$f17162bc
>f258	48 80					.byte 	$48,$80
>f25a	3d					.byte 	$3d   ; *** Command = ***
>f25b	01					.byte 	1     ; *** Load Float 3.99620532989502e-08 ***
>f25c	05 be a2 ab				.dword 	$aba2be05
>f260	68 00					.byte 	$68,$0
>f262	01					.byte 	1     ; *** Load Float -1.6426433546712359e-15 ***
>f263	d7 d7 ba ec				.dword 	$ecbad7d7
>f267	4f 80					.byte 	$4f,$80
>f269	2d					.byte 	$2d   ; *** Command - ***
>f26a	01					.byte 	1     ; *** Load Float 3.996205494159355e-08 ***
>f26b	7b be a2 ab				.dword 	$aba2be7b
>f26f	68 00					.byte 	$68,$0
>f271	3d					.byte 	$3d   ; *** Command = ***
>f272	01					.byte 	1     ; *** Load Float -67678484.037632 ***
>f273	81 22 16 81				.dword 	$81162281
>f277	9b 80					.byte 	$9b,$80
>f279	01					.byte 	1     ; *** Load Float -218.85 ***
>f27a	99 99 d9 da				.dword 	$dad99999
>f27e	88 80					.byte 	$88,$80
>f280	7e					.byte 	$7e   ; *** Command ~ ***
>f281	01					.byte 	1     ; *** Load Float -1 ***
>f282	00 00 00 80				.dword 	$80000000
>f286	81 80					.byte 	$81,$80
>f288	3d					.byte 	$3d   ; *** Command = ***
>f289	01					.byte 	1     ; *** Load Float -2.0 ***
>f28a	00 00 00 80				.dword 	$80000000
>f28e	82 80					.byte 	$82,$80
>f290	01					.byte 	1     ; *** Load Float 0.842156 ***
>f291	1e 89 97 d7				.dword 	$d797891e
>f295	80 00					.byte 	$80,$0
>f297	7e					.byte 	$7e   ; *** Command ~ ***
>f298	01					.byte 	1     ; *** Load Float -1 ***
>f299	00 00 00 80				.dword 	$80000000
>f29d	81 80					.byte 	$81,$80
>f29f	3d					.byte 	$3d   ; *** Command = ***
>f2a0	01					.byte 	1     ; *** Load Float 9.377422332763672e-07 ***
>f2a1	d4 27 b9 fb				.dword 	$fbb927d4
>f2a5	6c 00					.byte 	$6c,$0
>f2a7	01					.byte 	1     ; *** Load Float -19.0 ***
>f2a8	00 00 00 98				.dword 	$98000000
>f2ac	85 80					.byte 	$85,$80
>f2ae	2f					.byte 	$2f   ; *** Command / ***
>f2af	01					.byte 	1     ; *** Load Float -4.935485438296669e-08 ***
>f2b0	7c 3c fa d3				.dword 	$d3fa3c7c
>f2b4	68 80					.byte 	$68,$80
>f2b6	3d					.byte 	$3d   ; *** Command = ***
>f2b7	01					.byte 	1     ; *** Load Float -11561584668390.195 ***
>f2b8	5a 42 3e a8				.dword 	$a83e425a
>f2bc	ac 80					.byte 	$ac,$80
>f2be	01					.byte 	1     ; *** Load Float 2.7505798339843747e-06 ***
>f2bf	0a 9a 96 b8				.dword 	$b8969a0a
>f2c3	6e 00					.byte 	$6e,$0
>f2c5	2f					.byte 	$2f   ; *** Command / ***
>f2c6	01					.byte 	1     ; *** Load Float -4.203326340701978e+18 ***
>f2c7	25 dc 54 e9				.dword 	$e954dc25
>f2cb	be 80					.byte 	$be,$80
>f2cd	3d					.byte 	$3d   ; *** Command = ***
>f2ce	01					.byte 	1     ; *** Load Float 159.28 ***
>f2cf	14 ae 47 9f				.dword 	$9f47ae14
>f2d3	88 00					.byte 	$88,$0
>f2d5	01					.byte 	1     ; *** Load Float -886.3641600000001 ***
>f2d6	65 4e 97 dd				.dword 	$dd974e65
>f2da	8a 80					.byte 	$8a,$80
>f2dc	2f					.byte 	$2f   ; *** Command / ***
>f2dd	01					.byte 	1     ; *** Load Float -0.1797004066590418 ***
>f2de	26 62 03 b8				.dword 	$b8036226
>f2e2	7e 80					.byte 	$7e,$80
>f2e4	3d					.byte 	$3d   ; *** Command = ***
>f2e5	01					.byte 	1     ; *** Load Float 13.0 ***
>f2e6	00 00 00 d0				.dword 	$d0000000
>f2ea	84 00					.byte 	$84,$0
>f2ec	01					.byte 	1     ; *** Load Float 781.01 ***
>f2ed	d7 a3 40 c3				.dword 	$c340a3d7
>f2f1	8a 00					.byte 	$8a,$0
>f2f3	2d					.byte 	$2d   ; *** Command - ***
>f2f4	01					.byte 	1     ; *** Load Float -768.01 ***
>f2f5	d7 a3 00 c0				.dword 	$c000a3d7
>f2f9	8a 80					.byte 	$8a,$80
>f2fb	3d					.byte 	$3d   ; *** Command = ***
>f2fc	01					.byte 	1     ; *** Load Float 7.0 ***
>f2fd	00 00 00 e0				.dword 	$e0000000
>f301	83 00					.byte 	$83,$0
>f303	01					.byte 	1     ; *** Load Float -538.97 ***
>f304	7a 14 be 86				.dword 	$86be147a
>f308	8a 80					.byte 	$8a,$80
>f30a	2d					.byte 	$2d   ; *** Command - ***
>f30b	01					.byte 	1     ; *** Load Float 545.97 ***
>f30c	7a 14 7e 88				.dword 	$887e147a
>f310	8a 00					.byte 	$8a,$0
>f312	3d					.byte 	$3d   ; *** Command = ***
>f313	01					.byte 	1     ; *** Load Float 1.0 ***
>f314	00 00 00 80				.dword 	$80000000
>f318	81 00					.byte 	$81,$0
>f31a	01					.byte 	1     ; *** Load Float -78.44 ***
>f31b	ae 47 e1 9c				.dword 	$9ce147ae
>f31f	87 80					.byte 	$87,$80
>f321	2a					.byte 	$2a   ; *** Command * ***
>f322	01					.byte 	1     ; *** Load Float -78.44 ***
>f323	ae 47 e1 9c				.dword 	$9ce147ae
>f327	87 80					.byte 	$87,$80
>f329	3d					.byte 	$3d   ; *** Command = ***
>f32a	01					.byte 	1     ; *** Load Float -18.0 ***
>f32b	00 00 00 90				.dword 	$90000000
>f32f	85 80					.byte 	$85,$80
>f331	01					.byte 	1     ; *** Load Float -18.0 ***
>f332	00 00 00 90				.dword 	$90000000
>f336	85 80					.byte 	$85,$80
>f338	2f					.byte 	$2f   ; *** Command / ***
>f339	01					.byte 	1     ; *** Load Float 1.0 ***
>f33a	00 00 00 80				.dword 	$80000000
>f33e	81 00					.byte 	$81,$0
>f340	3d					.byte 	$3d   ; *** Command = ***
>f341	01					.byte 	1     ; *** Load Float 11686159335.817215 ***
>f342	f9 28 23 ae				.dword 	$ae2328f9
>f346	a2 00					.byte 	$a2,$0
>f348	01					.byte 	1     ; *** Load Float -186797954588.21326 ***
>f349	58 1a f8 ad				.dword 	$adf81a58
>f34d	a6 80					.byte 	$a6,$80
>f34f	2a					.byte 	$2a   ; *** Command * ***
>f350	01					.byte 	1     ; *** Load Float -2.1829506609226085e+21 ***
>f351	58 0d ad ec				.dword 	$ecad0d58
>f355	c7 80					.byte 	$c7,$80
>f357	3d					.byte 	$3d   ; *** Command = ***
>f358	01					.byte 	1     ; *** Load Float 8.136498 ***
>f359	86 18 2f 82				.dword 	$822f1886
>f35d	84 00					.byte 	$84,$0
>f35f	01					.byte 	1     ; *** Load Float -3.06498009194911e-14 ***
>f360	89 d0 08 8a				.dword 	$8a08d089
>f364	54 80					.byte 	$54,$80
>f366	2d					.byte 	$2d   ; *** Command - ***
>f367	01					.byte 	1     ; *** Load Float 8.13649800000003 ***
>f368	86 18 2f 82				.dword 	$822f1886
>f36c	84 00					.byte 	$84,$0
>f36e	3d					.byte 	$3d   ; *** Command = ***
>f36f	01					.byte 	1     ; *** Load Float -292.04 ***
>f370	b8 1e 05 92				.dword 	$92051eb8
>f374	89 80					.byte 	$89,$80
>f376	01					.byte 	1     ; *** Load Float -15.0 ***
>f377	00 00 00 f0				.dword 	$f0000000
>f37b	84 80					.byte 	$84,$80
>f37d	2a					.byte 	$2a   ; *** Command * ***
>f37e	01					.byte 	1     ; *** Load Float 4380.6 ***
>f37f	cc cc e4 88				.dword 	$88e4cccc
>f383	8d 00					.byte 	$8d,$0
>f385	3d					.byte 	$3d   ; *** Command = ***
>f386	01					.byte 	1     ; *** Load Float -9.131915867328643e-10 ***
>f387	28 25 04 fb				.dword 	$fb042528
>f38b	62 80					.byte 	$62,$80
>f38d	01					.byte 	1     ; *** Load Float 17.0 ***
>f38e	00 00 00 88				.dword 	$88000000
>f392	85 00					.byte 	$85,$0
>f394	2d					.byte 	$2d   ; *** Command - ***
>f395	01					.byte 	1     ; *** Load Float -17.000000000913193 ***
>f396	00 00 00 88				.dword 	$88000000
>f39a	85 80					.byte 	$85,$80
>f39c	3d					.byte 	$3d   ; *** Command = ***
>f39d	01					.byte 	1     ; *** Load Float -0.00033162207031249997 ***
>f39e	92 8f dd ad				.dword 	$addd8f92
>f3a2	75 80					.byte 	$75,$80
>f3a4	01					.byte 	1     ; *** Load Float -731.95 ***
>f3a5	cc cc fc b6				.dword 	$b6fccccc
>f3a9	8a 80					.byte 	$8a,$80
>f3ab	2f					.byte 	$2f   ; *** Command / ***
>f3ac	01					.byte 	1     ; *** Load Float 4.530665623505703e-07 ***
>f3ad	82 fe 3c f3				.dword 	$f33cfe82
>f3b1	6b 00					.byte 	$6b,$0
>f3b3	3d					.byte 	$3d   ; *** Command = ***
>f3b4	01					.byte 	1     ; *** Load Float -9.0 ***
>f3b5	00 00 00 90				.dword 	$90000000
>f3b9	84 80					.byte 	$84,$80
>f3bb	01					.byte 	1     ; *** Load Float 916.12 ***
>f3bc	14 ae 07 e5				.dword 	$e507ae14
>f3c0	8a 00					.byte 	$8a,$0
>f3c2	2d					.byte 	$2d   ; *** Command - ***
>f3c3	01					.byte 	1     ; *** Load Float -925.12 ***
>f3c4	14 ae 47 e7				.dword 	$e747ae14
>f3c8	8a 80					.byte 	$8a,$80
>f3ca	3d					.byte 	$3d   ; *** Command = ***
>f3cb	01					.byte 	1     ; *** Load Float 10.0 ***
>f3cc	00 00 00 a0				.dword 	$a0000000
>f3d0	84 00					.byte 	$84,$0
>f3d2	01					.byte 	1     ; *** Load Float -541.25 ***
>f3d3	00 00 50 87				.dword 	$87500000
>f3d7	8a 80					.byte 	$8a,$80
>f3d9	2a					.byte 	$2a   ; *** Command * ***
>f3da	01					.byte 	1     ; *** Load Float -5412.5 ***
>f3db	00 00 24 a9				.dword 	$a9240000
>f3df	8d 80					.byte 	$8d,$80
>f3e1	3d					.byte 	$3d   ; *** Command = ***
>f3e2	01					.byte 	1     ; *** Load Float 2.318931 ***
>f3e3	91 5d 69 94				.dword 	$94695d91
>f3e7	82 00					.byte 	$82,$0
>f3e9	01					.byte 	1     ; *** Load Float -692.98 ***
>f3ea	51 b8 3e ad				.dword 	$ad3eb851
>f3ee	8a 80					.byte 	$8a,$80
>f3f0	2f					.byte 	$2f   ; *** Command / ***
>f3f1	01					.byte 	1     ; *** Load Float -0.0033463173540361916 ***
>f3f2	98 e3 4d db				.dword 	$db4de398
>f3f6	78 80					.byte 	$78,$80
>f3f8	3d					.byte 	$3d   ; *** Command = ***
>f3f9	01					.byte 	1     ; *** Load Float -16.0 ***
>f3fa	00 00 00 80				.dword 	$80000000
>f3fe	85 80					.byte 	$85,$80
>f400	01					.byte 	1     ; *** Load Float -659.94 ***
>f401	f5 28 fc a4				.dword 	$a4fc28f5
>f405	8a 80					.byte 	$8a,$80
>f407	2f					.byte 	$2f   ; *** Command / ***
>f408	01					.byte 	1     ; *** Load Float 0.02424462829954238 ***
>f409	b4 ab 9c c6				.dword 	$c69cabb4
>f40d	7b 00					.byte 	$7b,$0
>f40f	3d					.byte 	$3d   ; *** Command = ***
>f410	01					.byte 	1     ; *** Load Float 25513384470263.1 ***
>f411	bf 61 a2 b9				.dword 	$b9a261bf
>f415	ad 00					.byte 	$ad,$0
>f417	01					.byte 	1     ; *** Load Float -64434.33984 ***
>f418	ff 56 b2 fb				.dword 	$fbb256ff
>f41c	90 80					.byte 	$90,$80
>f41e	7e					.byte 	$7e   ; *** Command ~ ***
>f41f	01					.byte 	1     ; *** Load Float 1 ***
>f420	00 00 00 80				.dword 	$80000000
>f424	81 00					.byte 	$81,$0
>f426	3d					.byte 	$3d   ; *** Command = ***
>f427	01					.byte 	1     ; *** Load Float 6.0 ***
>f428	00 00 00 c0				.dword 	$c0000000
>f42c	83 00					.byte 	$83,$0
>f42e	01					.byte 	1     ; *** Load Float 627.91 ***
>f42f	70 3d fa 9c				.dword 	$9cfa3d70
>f433	8a 00					.byte 	$8a,$0
>f435	2f					.byte 	$2f   ; *** Command / ***
>f436	01					.byte 	1     ; *** Load Float 0.009555509547546623 ***
>f437	40 b6 8e 9c				.dword 	$9c8eb640
>f43b	7a 00					.byte 	$7a,$0
>f43d	3d					.byte 	$3d   ; *** Command = ***
>f43e	01					.byte 	1     ; *** Load Float 978.72 ***
>f43f	7a 14 ae f4				.dword 	$f4ae147a
>f443	8a 00					.byte 	$8a,$0
>f445	01					.byte 	1     ; *** Load Float 10.0 ***
>f446	00 00 00 a0				.dword 	$a0000000
>f44a	84 00					.byte 	$84,$0
>f44c	2d					.byte 	$2d   ; *** Command - ***
>f44d	01					.byte 	1     ; *** Load Float 968.72 ***
>f44e	7a 14 2e f2				.dword 	$f22e147a
>f452	8a 00					.byte 	$8a,$0
>f454	3d					.byte 	$3d   ; *** Command = ***
>f455	01					.byte 	1     ; *** Load Float 7.936636 ***
>f456	0f ec f8 fd				.dword 	$fdf8ec0f
>f45a	83 00					.byte 	$83,$0
>f45c	01					.byte 	1     ; *** Load Float 5.989348 ***
>f45d	23 bd a8 bf				.dword 	$bfa8bd23
>f461	83 00					.byte 	$83,$0
>f463	2a					.byte 	$2a   ; *** Command * ***
>f464	01					.byte 	1     ; *** Load Float 47.535274953328 ***
>f465	1e 1f 24 be				.dword 	$be241f1e
>f469	86 00					.byte 	$86,$0
>f46b	3d					.byte 	$3d   ; *** Command = ***
>f46c	01					.byte 	1     ; *** Load Float -7.0 ***
>f46d	00 00 00 e0				.dword 	$e0000000
>f471	83 80					.byte 	$83,$80
>f473	01					.byte 	1     ; *** Load Float 220.47 ***
>f474	eb 51 78 dc				.dword 	$dc7851eb
>f478	88 00					.byte 	$88,$0
>f47a	2f					.byte 	$2f   ; *** Command / ***
>f47b	01					.byte 	1     ; *** Load Float -0.031750351521748994 ***
>f47c	16 a8 0c 82				.dword 	$820ca816
>f480	7c 80					.byte 	$7c,$80
>f482	3d					.byte 	$3d   ; *** Command = ***
>f483	01					.byte 	1     ; *** Load Float 9.708012 ***
>f484	64 04 54 9b				.dword 	$9b540464
>f488	84 00					.byte 	$84,$0
>f48a	01					.byte 	1     ; *** Load Float 766.15 ***
>f48b	99 99 89 bf				.dword 	$bf899999
>f48f	8a 00					.byte 	$8a,$0
>f491	2a					.byte 	$2a   ; *** Command * ***
>f492	01					.byte 	1     ; *** Load Float 7437.7933938 ***
>f493	de 58 6e e8				.dword 	$e86e58de
>f497	8d 00					.byte 	$8d,$0
>f499	3d					.byte 	$3d   ; *** Command = ***
>f49a	01					.byte 	1     ; *** Load Float 17.0 ***
>f49b	00 00 00 88				.dword 	$88000000
>f49f	85 00					.byte 	$85,$0
>f4a1	01					.byte 	1     ; *** Load Float 17.0 ***
>f4a2	00 00 00 88				.dword 	$88000000
>f4a6	85 00					.byte 	$85,$0
>f4a8	2b					.byte 	$2b   ; *** Command + ***
>f4a9	01					.byte 	1     ; *** Load Float 34.0 ***
>f4aa	00 00 00 88				.dword 	$88000000
>f4ae	86 00					.byte 	$86,$0
>f4b0	3d					.byte 	$3d   ; *** Command = ***
>f4b1	01					.byte 	1     ; *** Load Float 0.0 ***
>f4b2	00 00 00 00				.dword 	$0
>f4b6	80 40					.byte 	$80,$40
>f4b8	01					.byte 	1     ; *** Load Float 2.367767 ***
>f4b9	99 7e 89 97				.dword 	$97897e99
>f4bd	82 00					.byte 	$82,$0
>f4bf	7e					.byte 	$7e   ; *** Command ~ ***
>f4c0	01					.byte 	1     ; *** Load Float -1 ***
>f4c1	00 00 00 80				.dword 	$80000000
>f4c5	81 80					.byte 	$81,$80
>f4c7	3d					.byte 	$3d   ; *** Command = ***
>f4c8	01					.byte 	1     ; *** Load Float 7.380143 ***
>f4c9	a7 21 2a ec				.dword 	$ec2a21a7
>f4cd	83 00					.byte 	$83,$0
>f4cf	01					.byte 	1     ; *** Load Float 16.0 ***
>f4d0	00 00 00 80				.dword 	$80000000
>f4d4	85 00					.byte 	$85,$0
>f4d6	2d					.byte 	$2d   ; *** Command - ***
>f4d7	01					.byte 	1     ; *** Load Float -8.619857 ***
>f4d8	2c ef ea 89				.dword 	$89eaef2c
>f4dc	84 80					.byte 	$84,$80
>f4de	3d					.byte 	$3d   ; *** Command = ***
>f4df	01					.byte 	1     ; *** Load Float 17.0 ***
>f4e0	00 00 00 88				.dword 	$88000000
>f4e4	85 00					.byte 	$85,$0
>f4e6	01					.byte 	1     ; *** Load Float 943.25 ***
>f4e7	00 00 d0 eb				.dword 	$ebd00000
>f4eb	8a 00					.byte 	$8a,$0
>f4ed	2d					.byte 	$2d   ; *** Command - ***
>f4ee	01					.byte 	1     ; *** Load Float -926.25 ***
>f4ef	00 00 90 e7				.dword 	$e7900000
>f4f3	8a 80					.byte 	$8a,$80
>f4f5	3d					.byte 	$3d   ; *** Command = ***
>f4f6	01					.byte 	1     ; *** Load Float 582.65 ***
>f4f7	99 99 a9 91				.dword 	$91a99999
>f4fb	8a 00					.byte 	$8a,$0
>f4fd	01					.byte 	1     ; *** Load Float 987.5 ***
>f4fe	00 00 e0 f6				.dword 	$f6e00000
>f502	8a 00					.byte 	$8a,$0
>f504	2f					.byte 	$2f   ; *** Command / ***
>f505	01					.byte 	1     ; *** Load Float 0.5900253164556962 ***
>f506	2d e6 0b 97				.dword 	$970be62d
>f50a	80 00					.byte 	$80,$0
>f50c	3d					.byte 	$3d   ; *** Command = ***
>f50d	01					.byte 	1     ; *** Load Float -10.0 ***
>f50e	00 00 00 a0				.dword 	$a0000000
>f512	84 80					.byte 	$84,$80
>f514	01					.byte 	1     ; *** Load Float 7.526913 ***
>f515	a6 78 dc f0				.dword 	$f0dc78a6
>f519	83 00					.byte 	$83,$0
>f51b	2f					.byte 	$2f   ; *** Command / ***
>f51c	01					.byte 	1     ; *** Load Float -1.3285659074311076 ***
>f51d	99 72 0e aa				.dword 	$aa0e7299
>f521	81 80					.byte 	$81,$80
>f523	3d					.byte 	$3d   ; *** Command = ***
>f524	01					.byte 	1     ; *** Load Float 7.862801 ***
>f525	d7 10 9c fb				.dword 	$fb9c10d7
>f529	83 00					.byte 	$83,$0
>f52b	01					.byte 	1     ; *** Load Float 5.061793 ***
>f52c	50 35 fa a1				.dword 	$a1fa3550
>f530	83 00					.byte 	$83,$0
>f532	2f					.byte 	$2f   ; *** Command / ***
>f533	01					.byte 	1     ; *** Load Float 1.5533628103717398 ***
>f534	b2 97 d4 c6				.dword 	$c6d497b2
>f538	81 00					.byte 	$81,$0
>f53a	3d					.byte 	$3d   ; *** Command = ***
>f53b	01					.byte 	1     ; *** Load Float 8.849878 ***
>f53c	ac 19 99 8d				.dword 	$8d9919ac
>f540	84 00					.byte 	$84,$0
>f542	01					.byte 	1     ; *** Load Float -3.0 ***
>f543	00 00 00 c0				.dword 	$c0000000
>f547	82 80					.byte 	$82,$80
>f549	2f					.byte 	$2f   ; *** Command / ***
>f54a	01					.byte 	1     ; *** Load Float -2.9499593333333336 ***
>f54b	3b 22 cc bc				.dword 	$bccc223b
>f54f	82 80					.byte 	$82,$80
>f551	3d					.byte 	$3d   ; *** Command = ***
>f552	01					.byte 	1     ; *** Load Float -86.58 ***
>f553	c2 f5 28 ad				.dword 	$ad28f5c2
>f557	87 80					.byte 	$87,$80
>f559	01					.byte 	1     ; *** Load Float 265.33 ***
>f55a	70 3d aa 84				.dword 	$84aa3d70
>f55e	89 00					.byte 	$89,$0
>f560	2b					.byte 	$2b   ; *** Command + ***
>f561	01					.byte 	1     ; *** Load Float 178.75 ***
>f562	00 00 c0 b2				.dword 	$b2c00000
>f566	88 00					.byte 	$88,$0
>f568	3d					.byte 	$3d   ; *** Command = ***
>f569	01					.byte 	1     ; *** Load Float -523.17 ***
>f56a	47 e1 ca 82				.dword 	$82cae147
>f56e	8a 80					.byte 	$8a,$80
>f570	01					.byte 	1     ; *** Load Float 3.0663 ***
>f571	5a 42 3e c4				.dword 	$c43e425a
>f575	82 00					.byte 	$82,$0
>f577	7e					.byte 	$7e   ; *** Command ~ ***
>f578	01					.byte 	1     ; *** Load Float -1 ***
>f579	00 00 00 80				.dword 	$80000000
>f57d	81 80					.byte 	$81,$80
>f57f	3d					.byte 	$3d   ; *** Command = ***
>f580	01					.byte 	1     ; *** Load Float 0.0001014862060546875 ***
>f581	f3 fd d4 d4				.dword 	$d4d4fdf3
>f585	73 00					.byte 	$73,$0
>f587	01					.byte 	1     ; *** Load Float 5.405923 ***
>f588	3b 52 fd ac				.dword 	$acfd523b
>f58c	83 00					.byte 	$83,$0
>f58e	2f					.byte 	$2f   ; *** Command / ***
>f58f	01					.byte 	1     ; *** Load Float 1.877315049709134e-05 ***
>f590	a1 08 7b 9d				.dword 	$9d7b08a1
>f594	71 00					.byte 	$71,$0
>f596	3d					.byte 	$3d   ; *** Command = ***
>f597	01					.byte 	1     ; *** Load Float 5.88733 ***
>f598	e2 01 65 bc				.dword 	$bc6501e2
>f59c	83 00					.byte 	$83,$0
>f59e	01					.byte 	1     ; *** Load Float -0.594301 ***
>f59f	3e 1c 24 98				.dword 	$98241c3e
>f5a3	80 80					.byte 	$80,$80
>f5a5	2b					.byte 	$2b   ; *** Command + ***
>f5a6	01					.byte 	1     ; *** Load Float 5.293029000000001 ***
>f5a7	5a 7e 60 a9				.dword 	$a9607e5a
>f5ab	83 00					.byte 	$83,$0
>f5ad	3d					.byte 	$3d   ; *** Command = ***
>f5ae	01					.byte 	1     ; *** Load Float -814.95 ***
>f5af	cc cc bc cb				.dword 	$cbbccccc
>f5b3	8a 80					.byte 	$8a,$80
>f5b5	01					.byte 	1     ; *** Load Float 5.649132 ***
>f5b6	78 b0 c5 b4				.dword 	$b4c5b078
>f5ba	83 00					.byte 	$83,$0
>f5bc	7e					.byte 	$7e   ; *** Command ~ ***
>f5bd	01					.byte 	1     ; *** Load Float -1 ***
>f5be	00 00 00 80				.dword 	$80000000
>f5c2	81 80					.byte 	$81,$80
>f5c4	3d					.byte 	$3d   ; *** Command = ***
>f5c5	01					.byte 	1     ; *** Load Float 4.0 ***
>f5c6	00 00 00 80				.dword 	$80000000
>f5ca	83 00					.byte 	$83,$0
>f5cc	01					.byte 	1     ; *** Load Float -650.56 ***
>f5cd	0a d7 a3 a2				.dword 	$a2a3d70a
>f5d1	8a 80					.byte 	$8a,$80
>f5d3	2b					.byte 	$2b   ; *** Command + ***
>f5d4	01					.byte 	1     ; *** Load Float -646.56 ***
>f5d5	0a d7 a3 a1				.dword 	$a1a3d70a
>f5d9	8a 80					.byte 	$8a,$80
>f5db	3d					.byte 	$3d   ; *** Command = ***
>f5dc	01					.byte 	1     ; *** Load Float 5.142391 ***
>f5dd	92 77 8e a4				.dword 	$a48e7792
>f5e1	83 00					.byte 	$83,$0
>f5e3	01					.byte 	1     ; *** Load Float -116618460550945.31 ***
>f5e4	d4 b3 20 d4				.dword 	$d420b3d4
>f5e8	af 80					.byte 	$af,$80
>f5ea	2b					.byte 	$2b   ; *** Command + ***
>f5eb	01					.byte 	1     ; *** Load Float -116618460550940.17 ***
>f5ec	d4 b3 20 d4				.dword 	$d420b3d4
>f5f0	af 80					.byte 	$af,$80
>f5f2	3d					.byte 	$3d   ; *** Command = ***
>f5f3	01					.byte 	1     ; *** Load Float 459797.430272 ***
>f5f4	c4 ad 82 e0				.dword 	$e082adc4
>f5f8	93 00					.byte 	$93,$0
>f5fa	01					.byte 	1     ; *** Load Float 0.569829 ***
>f5fb	37 50 e0 91				.dword 	$91e05037
>f5ff	80 00					.byte 	$80,$0
>f601	2a					.byte 	$2a   ; *** Command * ***
>f602	01					.byte 	1     ; *** Load Float 262005.90989446352 ***
>f603	3b 7a dd ff				.dword 	$ffdd7a3b
>f607	92 00					.byte 	$92,$0
>f609	3d					.byte 	$3d   ; *** Command = ***
>f60a	01					.byte 	1     ; *** Load Float 1844246037640.7734 ***
>f60b	a2 d0 b2 d6				.dword 	$d6b2d0a2
>f60f	a9 00					.byte 	$a9,$0
>f611	01					.byte 	1     ; *** Load Float 3.820011 ***
>f612	6a 0f 7b f4				.dword 	$f47b0f6a
>f616	82 00					.byte 	$82,$0
>f618	2a					.byte 	$2a   ; *** Command * ***
>f619	01					.byte 	1     ; *** Load Float 7045040150494.169 ***
>f61a	b2 a3 09 cd				.dword 	$cd09a3b2
>f61e	ab 00					.byte 	$ab,$0
>f620	3d					.byte 	$3d   ; *** Command = ***
>f621	01					.byte 	1     ; *** Load Float -1157.697536 ***
>f622	37 52 b6 90				.dword 	$90b65237
>f626	8b 80					.byte 	$8b,$80
>f628	01					.byte 	1     ; *** Load Float -13.0 ***
>f629	00 00 00 d0				.dword 	$d0000000
>f62d	84 80					.byte 	$84,$80
>f62f	2a					.byte 	$2a   ; *** Command * ***
>f630	01					.byte 	1     ; *** Load Float 15050.067968 ***
>f631	99 45 28 eb				.dword 	$eb284599
>f635	8e 00					.byte 	$8e,$0
>f637	3d					.byte 	$3d   ; *** Command = ***
>f638	01					.byte 	1     ; *** Load Float -1.0 ***
>f639	00 00 00 80				.dword 	$80000000
>f63d	81 80					.byte 	$81,$80
>f63f	01					.byte 	1     ; *** Load Float -485951910592158.6 ***
>f640	81 3f fc dc				.dword 	$dcfc3f81
>f644	b1 80					.byte 	$b1,$80
>f646	2d					.byte 	$2d   ; *** Command - ***
>f647	01					.byte 	1     ; *** Load Float 485951910592157.6 ***
>f648	81 3f fc dc				.dword 	$dcfc3f81
>f64c	b1 00					.byte 	$b1,$0
>f64e	3d					.byte 	$3d   ; *** Command = ***
>f64f	01					.byte 	1     ; *** Load Float 5.843023 ***
>f650	5e 0b fa ba				.dword 	$bafa0b5e
>f654	83 00					.byte 	$83,$0
>f656	01					.byte 	1     ; *** Load Float 22333967378.153473 ***
>f657	82 a9 66 a6				.dword 	$a666a982
>f65b	a3 00					.byte 	$a3,$0
>f65d	2f					.byte 	$2f   ; *** Command / ***
>f65e	01					.byte 	1     ; *** Load Float 2.616204680998817e-10 ***
>f65f	bd ce d3 8f				.dword 	$8fd3cebd
>f663	61 00					.byte 	$61,$0
>f665	3d					.byte 	$3d   ; *** Command = ***
>f666	01					.byte 	1     ; *** Load Float -14.0 ***
>f667	00 00 00 e0				.dword 	$e0000000
>f66b	84 80					.byte 	$84,$80
>f66d	01					.byte 	1     ; *** Load Float 4.04758 ***
>f66e	7d c6 85 81				.dword 	$8185c67d
>f672	83 00					.byte 	$83,$0
>f674	2d					.byte 	$2d   ; *** Command - ***
>f675	01					.byte 	1     ; *** Load Float -18.04758 ***
>f676	9f 71 61 90				.dword 	$9061719f
>f67a	85 80					.byte 	$85,$80
>f67c	3d					.byte 	$3d   ; *** Command = ***
>f67d	01					.byte 	1     ; *** Load Float 8.317282 ***
>f67e	4a 96 13 85				.dword 	$8513964a
>f682	84 00					.byte 	$84,$0
>f684	01					.byte 	1     ; *** Load Float 8.317282 ***
>f685	4a 96 13 85				.dword 	$8513964a
>f689	84 00					.byte 	$84,$0
>f68b	2b					.byte 	$2b   ; *** Command + ***
>f68c	01					.byte 	1     ; *** Load Float 16.634564 ***
>f68d	4a 96 13 85				.dword 	$8513964a
>f691	85 00					.byte 	$85,$0
>f693	3d					.byte 	$3d   ; *** Command = ***
>f694	01					.byte 	1     ; *** Load Float 2.7710723876953124e-07 ***
>f695	32 54 c5 94				.dword 	$94c55432
>f699	6b 00					.byte 	$6b,$0
>f69b	01					.byte 	1     ; *** Load Float 658.45 ***
>f69c	cc cc 9c a4				.dword 	$a49ccccc
>f6a0	8a 00					.byte 	$8a,$0
>f6a2	2f					.byte 	$2f   ; *** Command / ***
>f6a3	01					.byte 	1     ; *** Load Float 4.2084780738025853e-10 ***
>f6a4	3a 10 5d e7				.dword 	$e75d103a
>f6a8	61 00					.byte 	$61,$0
>f6aa	3d					.byte 	$3d   ; *** Command = ***
>f6ab	01					.byte 	1     ; *** Load Float 7.372693 ***
>f6ac	de 19 ed eb				.dword 	$ebed19de
>f6b0	83 00					.byte 	$83,$0
>f6b2	01					.byte 	1     ; *** Load Float 15.0 ***
>f6b3	00 00 00 f0				.dword 	$f0000000
>f6b7	84 00					.byte 	$84,$0
>f6b9	7e					.byte 	$7e   ; *** Command ~ ***
>f6ba	01					.byte 	1     ; *** Load Float -1 ***
>f6bb	00 00 00 80				.dword 	$80000000
>f6bf	81 80					.byte 	$81,$80
>f6c1	3d					.byte 	$3d   ; *** Command = ***
>f6c2	01					.byte 	1     ; *** Load Float 0.0 ***
>f6c3	00 00 00 00				.dword 	$0
>f6c7	80 40					.byte 	$80,$40
>f6c9	01					.byte 	1     ; *** Load Float 3.341702 ***
>f6ca	10 72 de d5				.dword 	$d5de7210
>f6ce	82 00					.byte 	$82,$0
>f6d0	7e					.byte 	$7e   ; *** Command ~ ***
>f6d1	01					.byte 	1     ; *** Load Float -1 ***
>f6d2	00 00 00 80				.dword 	$80000000
>f6d6	81 80					.byte 	$81,$80
>f6d8	3d					.byte 	$3d   ; *** Command = ***
>f6d9	01					.byte 	1     ; *** Load Float 20.0 ***
>f6da	00 00 00 a0				.dword 	$a0000000
>f6de	85 00					.byte 	$85,$0
>f6e0	01					.byte 	1     ; *** Load Float 20.0 ***
>f6e1	00 00 00 a0				.dword 	$a0000000
>f6e5	85 00					.byte 	$85,$0
>f6e7	2a					.byte 	$2a   ; *** Command * ***
>f6e8	01					.byte 	1     ; *** Load Float 400.0 ***
>f6e9	00 00 00 c8				.dword 	$c8000000
>f6ed	89 00					.byte 	$89,$0
>f6ef	3d					.byte 	$3d   ; *** Command = ***
>f6f0	01					.byte 	1     ; *** Load Float 8.03969 ***
>f6f1	fb 91 a2 80				.dword 	$80a291fb
>f6f5	84 00					.byte 	$84,$0
>f6f7	01					.byte 	1     ; *** Load Float 8.03969 ***
>f6f8	fb 91 a2 80				.dword 	$80a291fb
>f6fc	84 00					.byte 	$84,$0
>f6fe	2a					.byte 	$2a   ; *** Command * ***
>f6ff	01					.byte 	1     ; *** Load Float 64.6366152961 ***
>f700	70 f2 45 81				.dword 	$8145f270
>f704	87 00					.byte 	$87,$0
>f706	3d					.byte 	$3d   ; *** Command = ***
>f707	01					.byte 	1     ; *** Load Float 17.0 ***
>f708	00 00 00 88				.dword 	$88000000
>f70c	85 00					.byte 	$85,$0
>f70e	01					.byte 	1     ; *** Load Float 112.78 ***
>f70f	28 5c 8f e1				.dword 	$e18f5c28
>f713	87 00					.byte 	$87,$0
>f715	2b					.byte 	$2b   ; *** Command + ***
>f716	01					.byte 	1     ; *** Load Float 129.78 ***
>f717	14 ae c7 81				.dword 	$81c7ae14
>f71b	88 00					.byte 	$88,$0
>f71d	3d					.byte 	$3d   ; *** Command = ***
>f71e	01					.byte 	1     ; *** Load Float 11.0 ***
>f71f	00 00 00 b0				.dword 	$b0000000
>f723	84 00					.byte 	$84,$0
>f725	01					.byte 	1     ; *** Load Float 22133308.653568 ***
>f726	53 1e dd a8				.dword 	$a8dd1e53
>f72a	99 00					.byte 	$99,$0
>f72c	2a					.byte 	$2a   ; *** Command * ***
>f72d	01					.byte 	1     ; *** Load Float 243466395.189248 ***
>f72e	b3 09 30 e8				.dword 	$e83009b3
>f732	9c 00					.byte 	$9c,$0
>f734	3d					.byte 	$3d   ; *** Command = ***
>f735	01					.byte 	1     ; *** Load Float 717.36 ***
>f736	3d 0a 57 b3				.dword 	$b3570a3d
>f73a	8a 00					.byte 	$8a,$0
>f73c	01					.byte 	1     ; *** Load Float 3.706693 ***
>f73d	46 75 3a ed				.dword 	$ed3a7546
>f741	82 00					.byte 	$82,$0
>f743	2f					.byte 	$2f   ; *** Command / ***
>f744	01					.byte 	1     ; *** Load Float 193.53099919523953 ***
>f745	90 ef 87 c1				.dword 	$c187ef90
>f749	88 00					.byte 	$88,$0
>f74b	3d					.byte 	$3d   ; *** Command = ***
>f74c	01					.byte 	1     ; *** Load Float -1825.644544 ***
>f74d	1a a0 34 e4				.dword 	$e434a01a
>f751	8b 80					.byte 	$8b,$80
>f753	01					.byte 	1     ; *** Load Float 117936748604369.66 ***
>f754	03 94 86 d6				.dword 	$d6869403
>f758	af 00					.byte 	$af,$0
>f75a	2b					.byte 	$2b   ; *** Command + ***
>f75b	01					.byte 	1     ; *** Load Float 117936748602544.02 ***
>f75c	03 94 86 d6				.dword 	$d6869403
>f760	af 00					.byte 	$af,$0
>f762	3d					.byte 	$3d   ; *** Command = ***
>f763	01					.byte 	1     ; *** Load Float 0.0 ***
>f764	00 00 00 00				.dword 	$0
>f768	80 40					.byte 	$80,$40
>f76a	01					.byte 	1     ; *** Load Float -193.43 ***
>f76b	7a 14 6e c1				.dword 	$c16e147a
>f76f	88 80					.byte 	$88,$80
>f771	2f					.byte 	$2f   ; *** Command / ***
>f772	01					.byte 	1     ; *** Load Float -0.0 ***
>f773	00 00 00 00				.dword 	$0
>f777	80 40					.byte 	$80,$40
>f779	3d					.byte 	$3d   ; *** Command = ***
>f77a	01					.byte 	1     ; *** Load Float -239708312291445.3 ***
>f77b	cd 70 03 da				.dword 	$da0370cd
>f77f	b0 80					.byte 	$b0,$80
>f781	01					.byte 	1     ; *** Load Float -431.0 ***
>f782	00 00 80 d7				.dword 	$d7800000
>f786	89 80					.byte 	$89,$80
>f788	2f					.byte 	$2f   ; *** Command / ***
>f789	01					.byte 	1     ; *** Load Float 556167777938.3882 ***
>f78a	ce 2e 7e 81				.dword 	$817e2ece
>f78e	a8 00					.byte 	$a8,$0
>f790	3d					.byte 	$3d   ; *** Command = ***
>f791	01					.byte 	1     ; *** Load Float 4.700172 ***
>f792	1c cf 67 96				.dword 	$9667cf1c
>f796	83 00					.byte 	$83,$0
>f798	01					.byte 	1     ; *** Load Float -3.681640625e-06 ***
>f799	b4 1a 12 f7				.dword 	$f7121ab4
>f79d	6e 80					.byte 	$6e,$80
>f79f	2a					.byte 	$2a   ; *** Command * ***
>f7a0	01					.byte 	1     ; *** Load Float -1.73043441796875e-05 ***
>f7a1	d1 cb 28 91				.dword 	$9128cbd1
>f7a5	71 80					.byte 	$71,$80
>f7a7	3d					.byte 	$3d   ; *** Command = ***
>f7a8	01					.byte 	1     ; *** Load Float 500.55 ***
>f7a9	66 66 46 fa				.dword 	$fa466666
>f7ad	89 00					.byte 	$89,$0
>f7af	01					.byte 	1     ; *** Load Float -1.0 ***
>f7b0	00 00 00 80				.dword 	$80000000
>f7b4	81 80					.byte 	$81,$80
>f7b6	2a					.byte 	$2a   ; *** Command * ***
>f7b7	01					.byte 	1     ; *** Load Float -500.55 ***
>f7b8	66 66 46 fa				.dword 	$fa466666
>f7bc	89 80					.byte 	$89,$80
>f7be	3d					.byte 	$3d   ; *** Command = ***
>f7bf	01					.byte 	1     ; *** Load Float -18.0 ***
>f7c0	00 00 00 90				.dword 	$90000000
>f7c4	85 80					.byte 	$85,$80
>f7c6	01					.byte 	1     ; *** Load Float 8.876309 ***
>f7c7	96 5c 05 8e				.dword 	$8e055c96
>f7cb	84 00					.byte 	$84,$0
>f7cd	2b					.byte 	$2b   ; *** Command + ***
>f7ce	01					.byte 	1     ; *** Load Float -9.123691 ***
>f7cf	69 a3 fa 91				.dword 	$91faa369
>f7d3	84 80					.byte 	$84,$80
>f7d5	3d					.byte 	$3d   ; *** Command = ***
>f7d6	01					.byte 	1     ; *** Load Float -5.0 ***
>f7d7	00 00 00 a0				.dword 	$a0000000
>f7db	83 80					.byte 	$83,$80
>f7dd	01					.byte 	1     ; *** Load Float 8.515029 ***
>f7de	0c 8f 3d 88				.dword 	$883d8f0c
>f7e2	84 00					.byte 	$84,$0
>f7e4	2f					.byte 	$2f   ; *** Command / ***
>f7e5	01					.byte 	1     ; *** Load Float -0.5871970606324417 ***
>f7e6	eb 8b 52 96				.dword 	$96528beb
>f7ea	80 80					.byte 	$80,$80
>f7ec	3d					.byte 	$3d   ; *** Command = ***
>f7ed	01					.byte 	1     ; *** Load Float 3.185197 ***
>f7ee	84 44 da cb				.dword 	$cbda4484
>f7f2	82 00					.byte 	$82,$0
>f7f4	01					.byte 	1     ; *** Load Float -24773096485.42106 ***
>f7f5	84 ee 92 b8				.dword 	$b892ee84
>f7f9	a3 80					.byte 	$a3,$80
>f7fb	7e					.byte 	$7e   ; *** Command ~ ***
>f7fc	01					.byte 	1     ; *** Load Float 1 ***
>f7fd	00 00 00 80				.dword 	$80000000
>f801	81 00					.byte 	$81,$0
>f803	3d					.byte 	$3d   ; *** Command = ***
>f804	01					.byte 	1     ; *** Load Float 4.0258782973978667e-13 ***
>f805	53 05 a3 e2				.dword 	$e2a30553
>f809	57 00					.byte 	$57,$0
>f80b	01					.byte 	1     ; *** Load Float -13.0 ***
>f80c	00 00 00 d0				.dword 	$d0000000
>f810	84 80					.byte 	$84,$80
>f812	2d					.byte 	$2d   ; *** Command - ***
>f813	01					.byte 	1     ; *** Load Float 13.000000000000403 ***
>f814	00 00 00 d0				.dword 	$d0000000
>f818	84 00					.byte 	$84,$0
>f81a	3d					.byte 	$3d   ; *** Command = ***
>f81b	01					.byte 	1     ; *** Load Float 7.0 ***
>f81c	00 00 00 e0				.dword 	$e0000000
>f820	83 00					.byte 	$83,$0
>f822	01					.byte 	1     ; *** Load Float 5.432867 ***
>f823	e5 0b da ad				.dword 	$adda0be5
>f827	83 00					.byte 	$83,$0
>f829	2a					.byte 	$2a   ; *** Command * ***
>f82a	01					.byte 	1     ; *** Load Float 38.030069 ***
>f82b	68 ca 1e 98				.dword 	$981eca68
>f82f	86 00					.byte 	$86,$0
>f831	3d					.byte 	$3d   ; *** Command = ***
>f832	01					.byte 	1     ; *** Load Float 7945758217.076736 ***
>f833	04 53 cd ec				.dword 	$eccd5304
>f837	a1 00					.byte 	$a1,$0
>f839	01					.byte 	1     ; *** Load Float 10.0 ***
>f83a	00 00 00 a0				.dword 	$a0000000
>f83e	84 00					.byte 	$84,$0
>f840	7e					.byte 	$7e   ; *** Command ~ ***
>f841	01					.byte 	1     ; *** Load Float 1 ***
>f842	00 00 00 80				.dword 	$80000000
>f846	81 00					.byte 	$81,$0
>f848	3d					.byte 	$3d   ; *** Command = ***
>f849	01					.byte 	1     ; *** Load Float 3.841627 ***
>f84a	7e 37 dd f5				.dword 	$f5dd377e
>f84e	82 00					.byte 	$82,$0
>f850	01					.byte 	1     ; *** Load Float 4.173103 ***
>f851	4d 0f 8a 85				.dword 	$858a0f4d
>f855	83 00					.byte 	$83,$0
>f857	2b					.byte 	$2b   ; *** Command + ***
>f858	01					.byte 	1     ; *** Load Float 8.01473 ***
>f859	86 55 3c 80				.dword 	$803c5586
>f85d	84 00					.byte 	$84,$0
>f85f	3d					.byte 	$3d   ; *** Command = ***
>f860	01					.byte 	1     ; *** Load Float 9.523449 ***
>f861	0f 0c 60 98				.dword 	$98600c0f
>f865	84 00					.byte 	$84,$0
>f867	01					.byte 	1     ; *** Load Float -1059.078144 ***
>f868	27 80 62 84				.dword 	$84628027
>f86c	8b 80					.byte 	$8b,$80
>f86e	2d					.byte 	$2d   ; *** Command - ***
>f86f	01					.byte 	1     ; *** Load Float 1068.601593 ***
>f870	3f 40 93 85				.dword 	$8593403f
>f874	8b 00					.byte 	$8b,$0
>f876	3d					.byte 	$3d   ; *** Command = ***
>f877	01					.byte 	1     ; *** Load Float -781252403.658752 ***
>f878	ce dc 43 ba				.dword 	$ba43dcce
>f87c	9e 80					.byte 	$9e,$80
>f87e	01					.byte 	1     ; *** Load Float 224.78 ***
>f87f	14 ae c7 e0				.dword 	$e0c7ae14
>f883	88 00					.byte 	$88,$0
>f885	2b					.byte 	$2b   ; *** Command + ***
>f886	01					.byte 	1     ; *** Load Float -781252178.878752 ***
>f887	4b d9 43 ba				.dword 	$ba43d94b
>f88b	9e 80					.byte 	$9e,$80
>f88d	3d					.byte 	$3d   ; *** Command = ***
>f88e	01					.byte 	1     ; *** Load Float -493.17 ***
>f88f	8f c2 95 f6				.dword 	$f695c28f
>f893	89 80					.byte 	$89,$80
>f895	01					.byte 	1     ; *** Load Float -13.0 ***
>f896	00 00 00 d0				.dword 	$d0000000
>f89a	84 80					.byte 	$84,$80
>f89c	2f					.byte 	$2f   ; *** Command / ***
>f89d	01					.byte 	1     ; *** Load Float 37.93615384615385 ***
>f89e	1d 9f be 97				.dword 	$97be9f1d
>f8a2	86 00					.byte 	$86,$0
>f8a4	3d					.byte 	$3d   ; *** Command = ***
>f8a5	01					.byte 	1     ; *** Load Float -74.02 ***
>f8a6	70 3d 0a 94				.dword 	$940a3d70
>f8aa	87 80					.byte 	$87,$80
>f8ac	01					.byte 	1     ; *** Load Float 4.290457 ***
>f8ad	7a 6c 4b 89				.dword 	$894b6c7a
>f8b1	83 00					.byte 	$83,$0
>f8b3	2f					.byte 	$2f   ; *** Command / ***
>f8b4	01					.byte 	1     ; *** Load Float -17.25224142789451 ***
>f8b5	27 97 04 8a				.dword 	$8a049727
>f8b9	85 80					.byte 	$85,$80
>f8bb	3d					.byte 	$3d   ; *** Command = ***
>f8bc	01					.byte 	1     ; *** Load Float 980.4 ***
>f8bd	99 99 19 f5				.dword 	$f5199999
>f8c1	8a 00					.byte 	$8a,$0
>f8c3	01					.byte 	1     ; *** Load Float 1.809861 ***
>f8c4	76 86 a9 e7				.dword 	$e7a98676
>f8c8	81 00					.byte 	$81,$0
>f8ca	7e					.byte 	$7e   ; *** Command ~ ***
>f8cb	01					.byte 	1     ; *** Load Float 1 ***
>f8cc	00 00 00 80				.dword 	$80000000
>f8d0	81 00					.byte 	$81,$0
>f8d2	3d					.byte 	$3d   ; *** Command = ***
>f8d3	01					.byte 	1     ; *** Load Float -2129611086490.501 ***
>f8d4	2d 5b eb f7				.dword 	$f7eb5b2d
>f8d8	a9 80					.byte 	$a9,$80
>f8da	01					.byte 	1     ; *** Load Float 0.0 ***
>f8db	00 00 00 00				.dword 	$0
>f8df	80 40					.byte 	$80,$40
>f8e1	2d					.byte 	$2d   ; *** Command - ***
>f8e2	01					.byte 	1     ; *** Load Float -2129611086490.501 ***
>f8e3	2d 5b eb f7				.dword 	$f7eb5b2d
>f8e7	a9 80					.byte 	$a9,$80
>f8e9	3d					.byte 	$3d   ; *** Command = ***
>f8ea	01					.byte 	1     ; *** Load Float 5.418243408203125e-07 ***
>f8eb	9b e2 71 91				.dword 	$9171e29b
>f8ef	6c 00					.byte 	$6c,$0
>f8f1	01					.byte 	1     ; *** Load Float -91500759529193.2 ***
>f8f2	89 5c 70 a6				.dword 	$a6705c89
>f8f6	af 80					.byte 	$af,$80
>f8f8	2b					.byte 	$2b   ; *** Command + ***
>f8f9	01					.byte 	1     ; *** Load Float -91500759529193.2 ***
>f8fa	89 5c 70 a6				.dword 	$a6705c89
>f8fe	af 80					.byte 	$af,$80
>f900	3d					.byte 	$3d   ; *** Command = ***
>f901	01					.byte 	1     ; *** Load Float 33130106411.024384 ***
>f902	c5 a9 d6 f6				.dword 	$f6d6a9c5
>f906	a3 00					.byte 	$a3,$0
>f908	01					.byte 	1     ; *** Load Float -8.205652236938477e-09 ***
>f909	16 d7 f8 8c				.dword 	$8cf8d716
>f90d	66 80					.byte 	$66,$80
>f90f	2a					.byte 	$2a   ; *** Command * ***
>f910	01					.byte 	1     ; *** Load Float -271.854131781632 ***
>f911	30 54 ed 87				.dword 	$87ed5430
>f915	89 80					.byte 	$89,$80
>f917	3d					.byte 	$3d   ; *** Command = ***
>f918	01					.byte 	1     ; *** Load Float 7.0 ***
>f919	00 00 00 e0				.dword 	$e0000000
>f91d	83 00					.byte 	$83,$0
>f91f	01					.byte 	1     ; *** Load Float -715.27 ***
>f920	ae 47 d1 b2				.dword 	$b2d147ae
>f924	8a 80					.byte 	$8a,$80
>f926	2a					.byte 	$2a   ; *** Command * ***
>f927	01					.byte 	1     ; *** Load Float -5006.889999999999 ***
>f928	b8 1e 77 9c				.dword 	$9c771eb8
>f92c	8d 80					.byte 	$8d,$80
>f92e	3d					.byte 	$3d   ; *** Command = ***
>f92f	01					.byte 	1     ; *** Load Float -0.000137855712890625 ***
>f930	74 5c 8d 90				.dword 	$908d5c74
>f934	74 80					.byte 	$74,$80
>f936	01					.byte 	1     ; *** Load Float -10.0 ***
>f937	00 00 00 a0				.dword 	$a0000000
>f93b	84 80					.byte 	$84,$80
>f93d	7e					.byte 	$7e   ; *** Command ~ ***
>f93e	01					.byte 	1     ; *** Load Float 1 ***
>f93f	00 00 00 80				.dword 	$80000000
>f943	81 00					.byte 	$81,$0
>f945	3d					.byte 	$3d   ; *** Command = ***
>f946	01					.byte 	1     ; *** Load Float -905.37 ***
>f947	14 ae 57 e2				.dword 	$e257ae14
>f94b	8a 80					.byte 	$8a,$80
>f94d	01					.byte 	1     ; *** Load Float 247.15 ***
>f94e	66 66 26 f7				.dword 	$f7266666
>f952	88 00					.byte 	$88,$0
>f954	2b					.byte 	$2b   ; *** Command + ***
>f955	01					.byte 	1     ; *** Load Float -658.22 ***
>f956	7a 14 8e a4				.dword 	$a48e147a
>f95a	8a 80					.byte 	$8a,$80
>f95c	3d					.byte 	$3d   ; *** Command = ***
>f95d	01					.byte 	1     ; *** Load Float -5.609937012195587e-09 ***
>f95e	1e 87 c1 c0				.dword 	$c0c1871e
>f962	65 80					.byte 	$65,$80
>f964	01					.byte 	1     ; *** Load Float 2.0 ***
>f965	00 00 00 80				.dword 	$80000000
>f969	82 00					.byte 	$82,$0
>f96b	2b					.byte 	$2b   ; *** Command + ***
>f96c	01					.byte 	1     ; *** Load Float 1.999999994390063 ***
>f96d	f3 ff ff ff				.dword 	$fffffff3
>f971	81 00					.byte 	$81,$0
>f973	3d					.byte 	$3d   ; *** Command = ***
>f974	01					.byte 	1     ; *** Load Float 877.18 ***
>f975	1e 85 4b db				.dword 	$db4b851e
>f979	8a 00					.byte 	$8a,$0
>f97b	01					.byte 	1     ; *** Load Float 5.714883 ***
>f97c	50 52 e0 b6				.dword 	$b6e05250
>f980	83 00					.byte 	$83,$0
>f982	7e					.byte 	$7e   ; *** Command ~ ***
>f983	01					.byte 	1     ; *** Load Float 1 ***
>f984	00 00 00 80				.dword 	$80000000
>f988	81 00					.byte 	$81,$0
>f98a	3d					.byte 	$3d   ; *** Command = ***
>f98b	01					.byte 	1     ; *** Load Float -4.0 ***
>f98c	00 00 00 80				.dword 	$80000000
>f990	83 80					.byte 	$83,$80
>f992	01					.byte 	1     ; *** Load Float -0.290852 ***
>f993	a7 8d ea 94				.dword 	$94ea8da7
>f997	7f 80					.byte 	$7f,$80
>f999	2b					.byte 	$2b   ; *** Command + ***
>f99a	01					.byte 	1     ; *** Load Float -4.290852 ***
>f99b	da a8 4e 89				.dword 	$894ea8da
>f99f	83 80					.byte 	$83,$80
>f9a1	3d					.byte 	$3d   ; *** Command = ***
>f9a2	01					.byte 	1     ; *** Load Float -19.0 ***
>f9a3	00 00 00 98				.dword 	$98000000
>f9a7	85 80					.byte 	$85,$80
>f9a9	01					.byte 	1     ; *** Load Float 3.0 ***
>f9aa	00 00 00 c0				.dword 	$c0000000
>f9ae	82 00					.byte 	$82,$0
>f9b0	2f					.byte 	$2f   ; *** Command / ***
>f9b1	01					.byte 	1     ; *** Load Float -6.333333333333333 ***
>f9b2	aa aa aa ca				.dword 	$caaaaaaa
>f9b6	83 80					.byte 	$83,$80
>f9b8	3d					.byte 	$3d   ; *** Command = ***
>f9b9	01					.byte 	1     ; *** Load Float 1483672.12544 ***
>f9ba	00 c1 1c b5				.dword 	$b51cc100
>f9be	95 00					.byte 	$95,$0
>f9c0	01					.byte 	1     ; *** Load Float 900.14 ***
>f9c1	c2 f5 08 e1				.dword 	$e108f5c2
>f9c5	8a 00					.byte 	$8a,$0
>f9c7	7e					.byte 	$7e   ; *** Command ~ ***
>f9c8	01					.byte 	1     ; *** Load Float 1 ***
>f9c9	00 00 00 80				.dword 	$80000000
>f9cd	81 00					.byte 	$81,$0
>f9cf	3d					.byte 	$3d   ; *** Command = ***
>f9d0	01					.byte 	1     ; *** Load Float 646.12 ***
>f9d1	14 ae 87 a1				.dword 	$a187ae14
>f9d5	8a 00					.byte 	$8a,$0
>f9d7	01					.byte 	1     ; *** Load Float -7.0 ***
>f9d8	00 00 00 e0				.dword 	$e0000000
>f9dc	83 80					.byte 	$83,$80
>f9de	2d					.byte 	$2d   ; *** Command - ***
>f9df	01					.byte 	1     ; *** Load Float 653.12 ***
>f9e0	14 ae 47 a3				.dword 	$a347ae14
>f9e4	8a 00					.byte 	$8a,$0
>f9e6	3d					.byte 	$3d   ; *** Command = ***
>f9e7	01					.byte 	1     ; *** Load Float -305.28 ***
>f9e8	0a d7 a3 98				.dword 	$98a3d70a
>f9ec	89 80					.byte 	$89,$80
>f9ee	01					.byte 	1     ; *** Load Float 168170303468.3392 ***
>f9ef	bf ec 9e 9c				.dword 	$9c9eecbf
>f9f3	a6 00					.byte 	$a6,$0
>f9f5	2b					.byte 	$2b   ; *** Command + ***
>f9f6	01					.byte 	1     ; *** Load Float 168170303163.0592 ***
>f9f7	ba ec 9e 9c				.dword 	$9c9eecba
>f9fb	a6 00					.byte 	$a6,$0
>f9fd	3d					.byte 	$3d   ; *** Command = ***
>f9fe	01					.byte 	1     ; *** Load Float -37.19 ***
>f9ff	5c 8f c2 94				.dword 	$94c28f5c
>fa03	86 80					.byte 	$86,$80
>fa05	01					.byte 	1     ; *** Load Float 10.0 ***
>fa06	00 00 00 a0				.dword 	$a0000000
>fa0a	84 00					.byte 	$84,$0
>fa0c	2a					.byte 	$2a   ; *** Command * ***
>fa0d	01					.byte 	1     ; *** Load Float -371.9 ***
>fa0e	33 33 f3 b9				.dword 	$b9f33333
>fa12	89 80					.byte 	$89,$80
>fa14	3d					.byte 	$3d   ; *** Command = ***
>fa15	01					.byte 	1     ; *** Load Float 0.0 ***
>fa16	00 00 00 00				.dword 	$0
>fa1a	80 40					.byte 	$80,$40
>fa1c	01					.byte 	1     ; *** Load Float 0.0 ***
>fa1d	00 00 00 00				.dword 	$0
>fa21	80 40					.byte 	$80,$40
>fa23	7e					.byte 	$7e   ; *** Command ~ ***
>fa24	01					.byte 	1     ; *** Load Float 0 ***
>fa25	00 00 00 00				.dword 	$0
>fa29	80 40					.byte 	$80,$40
>fa2b	3d					.byte 	$3d   ; *** Command = ***
>fa2c	01					.byte 	1     ; *** Load Float 1.3695498637389391e-12 ***
>fa2d	ea 3b bf c0				.dword 	$c0bf3bea
>fa31	59 00					.byte 	$59,$0
>fa33	01					.byte 	1     ; *** Load Float -101024.39936 ***
>fa34	1e 33 50 c5				.dword 	$c550331e
>fa38	91 80					.byte 	$91,$80
>fa3a	2f					.byte 	$2f   ; *** Command / ***
>fa3b	01					.byte 	1     ; *** Load Float -1.3556624661123242e-17 ***
>fa3c	94 59 13 fa				.dword 	$fa135994
>fa40	48 80					.byte 	$48,$80
>fa42	3d					.byte 	$3d   ; *** Command = ***
>fa43	01					.byte 	1     ; *** Load Float -147.45 ***
>fa44	33 33 73 93				.dword 	$93733333
>fa48	88 80					.byte 	$88,$80
>fa4a	01					.byte 	1     ; *** Load Float 4.458432085812092e-10 ***
>fa4b	76 da 1a f5				.dword 	$f51ada76
>fa4f	61 00					.byte 	$61,$0
>fa51	2f					.byte 	$2f   ; *** Command / ***
>fa52	01					.byte 	1     ; *** Load Float -330721646448.8151 ***
>fa53	ae 17 01 9a				.dword 	$9a0117ae
>fa57	a7 80					.byte 	$a7,$80
>fa59	3d					.byte 	$3d   ; *** Command = ***
>fa5a	01					.byte 	1     ; *** Load Float -89274292463411.92 ***
>fa5b	fa 94 63 a2				.dword 	$a26394fa
>fa5f	af 80					.byte 	$af,$80
>fa61	01					.byte 	1     ; *** Load Float 2.89799 ***
>fa62	0c ab 78 b9				.dword 	$b978ab0c
>fa66	82 00					.byte 	$82,$0
>fa68	2a					.byte 	$2a   ; *** Command * ***
>fa69	01					.byte 	1     ; *** Load Float -258716006816043.12 ***
>fa6a	af 03 4d eb				.dword 	$eb4d03af
>fa6e	b0 80					.byte 	$b0,$80
>fa70	3d					.byte 	$3d   ; *** Command = ***
>fa71	01					.byte 	1     ; *** Load Float 20877973464.80947 ***
>fa72	fb 92 8d 9b				.dword 	$9b8d92fb
>fa76	a3 00					.byte 	$a3,$0
>fa78	01					.byte 	1     ; *** Load Float 8.217516 ***
>fa79	0e f2 7a 83				.dword 	$837af20e
>fa7d	84 00					.byte 	$84,$0
>fa7f	2b					.byte 	$2b   ; *** Command + ***
>fa80	01					.byte 	1     ; *** Load Float 20877973473.02699 ***
>fa81	fc 92 8d 9b				.dword 	$9b8d92fc
>fa85	a3 00					.byte 	$a3,$0
>fa87	3d					.byte 	$3d   ; *** Command = ***
>fa88	01					.byte 	1     ; *** Load Float 5.756613 ***
>fa89	77 2c 36 b8				.dword 	$b8362c77
>fa8d	83 00					.byte 	$83,$0
>fa8f	01					.byte 	1     ; *** Load Float -274200.526848 ***
>fa90	db 10 e3 85				.dword 	$85e310db
>fa94	93 80					.byte 	$93,$80
>fa96	2a					.byte 	$2a   ; *** Command * ***
>fa97	01					.byte 	1     ; *** Load Float -1578466.317460046 ***
>fa98	8a 12 af c0				.dword 	$c0af128a
>fa9c	95 80					.byte 	$95,$80
>fa9e	3d					.byte 	$3d   ; *** Command = ***
>fa9f	01					.byte 	1     ; *** Load Float -13.0 ***
>faa0	00 00 00 d0				.dword 	$d0000000
>faa4	84 80					.byte 	$84,$80
>faa6	01					.byte 	1     ; *** Load Float 997.94 ***
>faa7	f5 28 7c f9				.dword 	$f97c28f5
>faab	8a 00					.byte 	$8a,$0
>faad	2d					.byte 	$2d   ; *** Command - ***
>faae	01					.byte 	1     ; *** Load Float -1010.94 ***
>faaf	f5 28 bc fc				.dword 	$fcbc28f5
>fab3	8a 80					.byte 	$8a,$80
>fab5	3d					.byte 	$3d   ; *** Command = ***
>fab6	01					.byte 	1     ; *** Load Float 4.140854 ***
>fab7	3f e0 81 84				.dword 	$8481e03f
>fabb	83 00					.byte 	$83,$0
>fabd	01					.byte 	1     ; *** Load Float 182.04 ***
>fabe	70 3d 0a b6				.dword 	$b60a3d70
>fac2	88 00					.byte 	$88,$0
>fac4	2d					.byte 	$2d   ; *** Command - ***
>fac5	01					.byte 	1     ; *** Load Float -177.899146 ***
>fac6	6e 2e e6 b1				.dword 	$b1e62e6e
>faca	88 80					.byte 	$88,$80
>facc	3d					.byte 	$3d   ; *** Command = ***
>facd	01					.byte 	1     ; *** Load Float -0.00075890625 ***
>face	19 56 f1 c6				.dword 	$c6f15619
>fad2	76 80					.byte 	$76,$80
>fad4	01					.byte 	1     ; *** Load Float -231281721146.86774 ***
>fad5	fc db 65 d7				.dword 	$d765dbfc
>fad9	a6 80					.byte 	$a6,$80
>fadb	7e					.byte 	$7e   ; *** Command ~ ***
>fadc	01					.byte 	1     ; *** Load Float 1 ***
>fadd	00 00 00 80				.dword 	$80000000
>fae1	81 00					.byte 	$81,$0
>fae3	3d					.byte 	$3d   ; *** Command = ***
>fae4	01					.byte 	1     ; *** Load Float 26256548777523.414 ***
>fae5	1a a2 0a bf				.dword 	$bf0aa21a
>fae9	ad 00					.byte 	$ad,$0
>faeb	01					.byte 	1     ; *** Load Float 8.0 ***
>faec	00 00 00 80				.dword 	$80000000
>faf0	84 00					.byte 	$84,$0
>faf2	2a					.byte 	$2a   ; *** Command * ***
>faf3	01					.byte 	1     ; *** Load Float 210052390220187.3 ***
>faf4	1a a2 0a bf				.dword 	$bf0aa21a
>faf8	b0 00					.byte 	$b0,$0
>fafa	3d					.byte 	$3d   ; *** Command = ***
>fafb	01					.byte 	1     ; *** Load Float 1.1981242664660387e-15 ***
>fafc	c1 fb aa ac				.dword 	$acaafbc1
>fb00	4f 00					.byte 	$4f,$0
>fb02	01					.byte 	1     ; *** Load Float -1.32906308181191e-15 ***
>fb03	e6 c5 89 bf				.dword 	$bf89c5e6
>fb07	4f 80					.byte 	$4f,$80
>fb09	2d					.byte 	$2d   ; *** Command - ***
>fb0a	01					.byte 	1     ; *** Load Float 2.5271873482779486e-15 ***
>fb0b	d4 60 1a b6				.dword 	$b61a60d4
>fb0f	50 00					.byte 	$50,$0
>fb11	3d					.byte 	$3d   ; *** Command = ***
>fb12	01					.byte 	1     ; *** Load Float 923.74 ***
>fb13	28 5c ef e6				.dword 	$e6ef5c28
>fb17	8a 00					.byte 	$8a,$0
>fb19	01					.byte 	1     ; *** Load Float 6.821513 ***
>fb1a	a1 d5 49 da				.dword 	$da49d5a1
>fb1e	83 00					.byte 	$83,$0
>fb20	7e					.byte 	$7e   ; *** Command ~ ***
>fb21	01					.byte 	1     ; *** Load Float 1 ***
>fb22	00 00 00 80				.dword 	$80000000
>fb26	81 00					.byte 	$81,$0
>fb28	3d					.byte 	$3d   ; *** Command = ***
>fb29	01					.byte 	1     ; *** Load Float 4.0 ***
>fb2a	00 00 00 80				.dword 	$80000000
>fb2e	83 00					.byte 	$83,$0
>fb30	01					.byte 	1     ; *** Load Float 1.288867 ***
>fb31	06 98 f9 a4				.dword 	$a4f99806
>fb35	81 00					.byte 	$81,$0
>fb37	2d					.byte 	$2d   ; *** Command - ***
>fb38	01					.byte 	1     ; *** Load Float 2.7111330000000002 ***
>fb39	fc 33 83 ad				.dword 	$ad8333fc
>fb3d	82 00					.byte 	$82,$0
>fb3f	3d					.byte 	$3d   ; *** Command = ***
>fb40	01					.byte 	1     ; *** Load Float 2.427579 ***
>fb41	4f 74 5d 9b				.dword 	$9b5d744f
>fb45	82 00					.byte 	$82,$0
>fb47	01					.byte 	1     ; *** Load Float 8.387874 ***
>fb48	5e bb 34 86				.dword 	$8634bb5e
>fb4c	84 00					.byte 	$84,$0
>fb4e	2f					.byte 	$2f   ; *** Command / ***
>fb4f	01					.byte 	1     ; *** Load Float 0.2894152916460119 ***
>fb50	b9 3d 2e 94				.dword 	$942e3db9
>fb54	7f 00					.byte 	$7f,$0
>fb56	3d					.byte 	$3d   ; *** Command = ***
>fb57	01					.byte 	1     ; *** Load Float 3.45528 ***
>fb58	b9 4e 23 dd				.dword 	$dd234eb9
>fb5c	82 00					.byte 	$82,$0
>fb5e	01					.byte 	1     ; *** Load Float 9.0 ***
>fb5f	00 00 00 90				.dword 	$90000000
>fb63	84 00					.byte 	$84,$0
>fb65	2d					.byte 	$2d   ; *** Command - ***
>fb66	01					.byte 	1     ; *** Load Float -5.54472 ***
>fb67	a3 58 6e b1				.dword 	$b16e58a3
>fb6b	83 80					.byte 	$83,$80
>fb6d	3d					.byte 	$3d   ; *** Command = ***
>fb6e	01					.byte 	1     ; *** Load Float -5.25252685546875e-05 ***
>fb6f	e1 93 4e dc				.dword 	$dc4e93e1
>fb73	72 80					.byte 	$72,$80
>fb75	01					.byte 	1     ; *** Load Float -517.13 ***
>fb76	eb 51 48 81				.dword 	$814851eb
>fb7a	8a 80					.byte 	$8a,$80
>fb7c	2b					.byte 	$2b   ; *** Command + ***
>fb7d	01					.byte 	1     ; *** Load Float -517.1300525252685 ***
>fb7e	c7 52 48 81				.dword 	$814852c7
>fb82	8a 80					.byte 	$8a,$80
>fb84	3d					.byte 	$3d   ; *** Command = ***
>fb85	01					.byte 	1     ; *** Load Float 0.0 ***
>fb86	00 00 00 00				.dword 	$0
>fb8a	80 40					.byte 	$80,$40
>fb8c	01					.byte 	1     ; *** Load Float -0.478786 ***
>fb8d	47 70 23 f5				.dword 	$f5237047
>fb91	7f 80					.byte 	$7f,$80
>fb93	2f					.byte 	$2f   ; *** Command / ***
>fb94	01					.byte 	1     ; *** Load Float -0.0 ***
>fb95	00 00 00 00				.dword 	$0
>fb99	80 40					.byte 	$80,$40
>fb9b	3d					.byte 	$3d   ; *** Command = ***
>fb9c	01					.byte 	1     ; *** Load Float 20.99 ***
>fb9d	1e 85 eb a7				.dword 	$a7eb851e
>fba1	85 00					.byte 	$85,$0
>fba3	01					.byte 	1     ; *** Load Float 724.96 ***
>fba4	a3 70 3d b5				.dword 	$b53d70a3
>fba8	8a 00					.byte 	$8a,$0
>fbaa	2d					.byte 	$2d   ; *** Command - ***
>fbab	01					.byte 	1     ; *** Load Float -703.97 ***
>fbac	7a 14 fe af				.dword 	$affe147a
>fbb0	8a 80					.byte 	$8a,$80
>fbb2	3d					.byte 	$3d   ; *** Command = ***
>fbb3	01					.byte 	1     ; *** Load Float 4.581062 ***
>fbb4	55 0f 98 92				.dword 	$92980f55
>fbb8	83 00					.byte 	$83,$0
>fbba	01					.byte 	1     ; *** Load Float -8275613.450239999 ***
>fbbb	e6 3a 8d fc				.dword 	$fc8d3ae6
>fbbf	97 80					.byte 	$97,$80
>fbc1	2b					.byte 	$2b   ; *** Command + ***
>fbc2	01					.byte 	1     ; *** Load Float -8275608.869177999 ***
>fbc3	bd 31 8d fc				.dword 	$fc8d31bd
>fbc7	97 80					.byte 	$97,$80
>fbc9	3d					.byte 	$3d   ; *** Command = ***
>fbca	01					.byte 	1     ; *** Load Float 4719244643902.947 ***
>fbcb	d1 1c 59 89				.dword 	$89591cd1
>fbcf	ab 00					.byte 	$ab,$0
>fbd1	01					.byte 	1     ; *** Load Float 4719244643902.947 ***
>fbd2	d1 1c 59 89				.dword 	$89591cd1
>fbd6	ab 00					.byte 	$ab,$0
>fbd8	2b					.byte 	$2b   ; *** Command + ***
>fbd9	01					.byte 	1     ; *** Load Float 9438489287805.895 ***
>fbda	d1 1c 59 89				.dword 	$89591cd1
>fbde	ac 00					.byte 	$ac,$0
>fbe0	3d					.byte 	$3d   ; *** Command = ***
>fbe1	01					.byte 	1     ; *** Load Float -1465855708011.43 ***
>fbe2	85 e7 a5 aa				.dword 	$aaa5e785
>fbe6	a9 80					.byte 	$a9,$80
>fbe8	01					.byte 	1     ; *** Load Float 967.59 ***
>fbe9	8f c2 e5 f1				.dword 	$f1e5c28f
>fbed	8a 00					.byte 	$8a,$0
>fbef	2d					.byte 	$2d   ; *** Command - ***
>fbf0	01					.byte 	1     ; *** Load Float -1465855708979.02 ***
>fbf1	87 e7 a5 aa				.dword 	$aaa5e787
>fbf5	a9 80					.byte 	$a9,$80
>fbf7	3d					.byte 	$3d   ; *** Command = ***
>fbf8	01					.byte 	1     ; *** Load Float 3.0 ***
>fbf9	00 00 00 c0				.dword 	$c0000000
>fbfd	82 00					.byte 	$82,$0
>fbff	01					.byte 	1     ; *** Load Float 3.0 ***
>fc00	00 00 00 c0				.dword 	$c0000000
>fc04	82 00					.byte 	$82,$0
>fc06	2f					.byte 	$2f   ; *** Command / ***
>fc07	01					.byte 	1     ; *** Load Float 1.0 ***
>fc08	00 00 00 80				.dword 	$80000000
>fc0c	81 00					.byte 	$81,$0
>fc0e	3d					.byte 	$3d   ; *** Command = ***
>fc0f	01					.byte 	1     ; *** Load Float 9.141832 ***
>fc10	a1 f1 44 92				.dword 	$9244f1a1
>fc14	84 00					.byte 	$84,$0
>fc16	01					.byte 	1     ; *** Load Float 9.141832 ***
>fc17	a1 f1 44 92				.dword 	$9244f1a1
>fc1b	84 00					.byte 	$84,$0
>fc1d	2d					.byte 	$2d   ; *** Command - ***
>fc1e	01					.byte 	1     ; *** Load Float 0.0 ***
>fc1f	00 00 00 00				.dword 	$0
>fc23	80 40					.byte 	$80,$40
>fc25	3d					.byte 	$3d   ; *** Command = ***
>fc26	01					.byte 	1     ; *** Load Float 6.0 ***
>fc27	00 00 00 c0				.dword 	$c0000000
>fc2b	83 00					.byte 	$83,$0
>fc2d	01					.byte 	1     ; *** Load Float 1.791649 ***
>fc2e	22 c1 54 e5				.dword 	$e554c122
>fc32	81 00					.byte 	$81,$0
>fc34	2d					.byte 	$2d   ; *** Command - ***
>fc35	01					.byte 	1     ; *** Load Float 4.208351 ***
>fc36	b7 cf aa 86				.dword 	$86aacfb7
>fc3a	83 00					.byte 	$83,$0
>fc3c	3d					.byte 	$3d   ; *** Command = ***
>fc3d	01					.byte 	1     ; *** Load Float 78251143037.19016 ***
>fc3e	7b 0d c1 91				.dword 	$91c10d7b
>fc42	a5 00					.byte 	$a5,$0
>fc44	01					.byte 	1     ; *** Load Float 14.0 ***
>fc45	00 00 00 e0				.dword 	$e0000000
>fc49	84 00					.byte 	$84,$0
>fc4b	2a					.byte 	$2a   ; *** Command * ***
>fc4c	01					.byte 	1     ; *** Load Float 1095516002520.6621 ***
>fc4d	98 d7 11 ff				.dword 	$ff11d798
>fc51	a8 00					.byte 	$a8,$0
>fc53	3d					.byte 	$3d   ; *** Command = ***
>fc54	01					.byte 	1     ; *** Load Float -20.0 ***
>fc55	00 00 00 a0				.dword 	$a0000000
>fc59	85 80					.byte 	$85,$80
>fc5b	01					.byte 	1     ; *** Load Float -9.263967370998217e-17 ***
>fc5c	ae cf 9c d5				.dword 	$d59ccfae
>fc60	4b 80					.byte 	$4b,$80
>fc62	2f					.byte 	$2f   ; *** Command / ***
>fc63	01					.byte 	1     ; *** Load Float 2.158902249873204e+17 ***
>fc64	02 c1 bf bf				.dword 	$bfbfc102
>fc68	ba 00					.byte 	$ba,$0
>fc6a	3d					.byte 	$3d   ; *** Command = ***
>fc6b	01					.byte 	1     ; *** Load Float 11.0 ***
>fc6c	00 00 00 b0				.dword 	$b0000000
>fc70	84 00					.byte 	$84,$0
>fc72	01					.byte 	1     ; *** Load Float -0.248834 ***
>fc73	10 57 ce fe				.dword 	$fece5710
>fc77	7e 80					.byte 	$7e,$80
>fc79	7e					.byte 	$7e   ; *** Command ~ ***
>fc7a	01					.byte 	1     ; *** Load Float 1 ***
>fc7b	00 00 00 80				.dword 	$80000000
>fc7f	81 00					.byte 	$81,$0
>fc81	3d					.byte 	$3d   ; *** Command = ***
>fc82	01					.byte 	1     ; *** Load Float 7.891129 ***
>fc83	f6 20 84 fc				.dword 	$fc8420f6
>fc87	83 00					.byte 	$83,$0
>fc89	01					.byte 	1     ; *** Load Float -9.0 ***
>fc8a	00 00 00 90				.dword 	$90000000
>fc8e	84 80					.byte 	$84,$80
>fc90	2b					.byte 	$2b   ; *** Command + ***
>fc91	01					.byte 	1     ; *** Load Float -1.1088709999999997 ***
>fc92	24 7c ef 8d				.dword 	$8def7c24
>fc96	81 80					.byte 	$81,$80
>fc98	3d					.byte 	$3d   ; *** Command = ***
>fc99	01					.byte 	1     ; *** Load Float -6858593.009664 ***
>fc9a	04 c2 4e d1				.dword 	$d14ec204
>fc9e	97 80					.byte 	$97,$80
>fca0	01					.byte 	1     ; *** Load Float 8.375873 ***
>fca1	68 93 03 86				.dword 	$86039368
>fca5	84 00					.byte 	$84,$0
>fca7	2f					.byte 	$2f   ; *** Command / ***
>fca8	01					.byte 	1     ; *** Load Float -818851.1227025529 ***
>fca9	f6 31 ea c7				.dword 	$c7ea31f6
>fcad	94 80					.byte 	$94,$80
>fcaf	3d					.byte 	$3d   ; *** Command = ***
>fcb0	01					.byte 	1     ; *** Load Float 8.397483825683594e-07 ***
>fcb1	c6 11 6b e1				.dword 	$e16b11c6
>fcb5	6c 00					.byte 	$6c,$0
>fcb7	01					.byte 	1     ; *** Load Float -8.589442586526276e-12 ***
>fcb8	12 69 1b 97				.dword 	$971b6912
>fcbc	5c 80					.byte 	$5c,$80
>fcbe	2f					.byte 	$2f   ; *** Command / ***
>fcbf	01					.byte 	1     ; *** Load Float -97765.17790404937 ***
>fcc0	c5 96 f2 be				.dword 	$bef296c5
>fcc4	91 80					.byte 	$91,$80
>fcc6	3d					.byte 	$3d   ; *** Command = ***
>fcc7	01					.byte 	1     ; *** Load Float 8.982943 ***
>fcc8	70 22 ba 8f				.dword 	$8fba2270
>fccc	84 00					.byte 	$84,$0
>fcce	01					.byte 	1     ; *** Load Float 4.824524 ***
>fccf	27 80 62 9a				.dword 	$9a628027
>fcd3	83 00					.byte 	$83,$0
>fcd5	2b					.byte 	$2b   ; *** Command + ***
>fcd6	01					.byte 	1     ; *** Load Float 13.807467 ***
>fcd7	84 62 eb dc				.dword 	$dceb6284
>fcdb	84 00					.byte 	$84,$0
>fcdd	3d					.byte 	$3d   ; *** Command = ***
>fcde	01					.byte 	1     ; *** Load Float -134646.071296 ***
>fcdf	90 84 7d 83				.dword 	$837d8490
>fce3	92 80					.byte 	$92,$80
>fce5	01					.byte 	1     ; *** Load Float -134646.071296 ***
>fce6	90 84 7d 83				.dword 	$837d8490
>fcea	92 80					.byte 	$92,$80
>fcec	2d					.byte 	$2d   ; *** Command - ***
>fced	01					.byte 	1     ; *** Load Float 0.0 ***
>fcee	00 00 00 00				.dword 	$0
>fcf2	80 40					.byte 	$80,$40
>fcf4	3d					.byte 	$3d   ; *** Command = ***
>fcf5	01					.byte 	1     ; *** Load Float 4.955309 ***
>fcf6	2e e4 91 9e				.dword 	$9e91e42e
>fcfa	83 00					.byte 	$83,$0
>fcfc	01					.byte 	1     ; *** Load Float -840.28 ***
>fcfd	85 eb 11 d2				.dword 	$d211eb85
>fd01	8a 80					.byte 	$8a,$80
>fd03	2a					.byte 	$2a   ; *** Command * ***
>fd04	01					.byte 	1     ; *** Load Float -4163.84704652 ***
>fd05	c0 c6 1e 82				.dword 	$821ec6c0
>fd09	8d 80					.byte 	$8d,$80
>fd0b	3d					.byte 	$3d   ; *** Command = ***
>fd0c	01					.byte 	1     ; *** Load Float 2.319111 ***
>fd0d	8b 50 6c 94				.dword 	$946c508b
>fd11	82 00					.byte 	$82,$0
>fd13	01					.byte 	1     ; *** Load Float 995.14 ***
>fd14	c2 f5 c8 f8				.dword 	$f8c8f5c2
>fd18	8a 00					.byte 	$8a,$0
>fd1a	2f					.byte 	$2f   ; *** Command / ***
>fd1b	01					.byte 	1     ; *** Load Float 0.002330436923447957 ***
>fd1c	5f 3e ba 98				.dword 	$98ba3e5f
>fd20	78 00					.byte 	$78,$0
>fd22	3d					.byte 	$3d   ; *** Command = ***
>fd23	01					.byte 	1     ; *** Load Float 0.0 ***
>fd24	00 00 00 00				.dword 	$0
>fd28	80 40					.byte 	$80,$40
>fd2a	01					.byte 	1     ; *** Load Float -8.0 ***
>fd2b	00 00 00 80				.dword 	$80000000
>fd2f	84 80					.byte 	$84,$80
>fd31	2f					.byte 	$2f   ; *** Command / ***
>fd32	01					.byte 	1     ; *** Load Float -0.0 ***
>fd33	00 00 00 00				.dword 	$0
>fd37	80 40					.byte 	$80,$40
>fd39	3d					.byte 	$3d   ; *** Command = ***
>fd3a	01					.byte 	1     ; *** Load Float 298665841010.9338 ***
>fd3b	22 be 13 8b				.dword 	$8b13be22
>fd3f	a7 00					.byte 	$a7,$0
>fd41	01					.byte 	1     ; *** Load Float 77138149.507072 ***
>fd42	b0 1c 21 93				.dword 	$93211cb0
>fd46	9b 00					.byte 	$9b,$0
>fd48	2a					.byte 	$2a   ; *** Command * ***
>fd49	01					.byte 	1     ; *** Load Float 2.3038530296556806e+19 ***
>fd4a	9e a6 dc 9f				.dword 	$9fdca69e
>fd4e	c1 00					.byte 	$c1,$0
>fd50	3d					.byte 	$3d   ; *** Command = ***
>fd51	01					.byte 	1     ; *** Load Float 30761414767.411198 ***
>fd52	0d be 30 e5				.dword 	$e530be0d
>fd56	a3 00					.byte 	$a3,$0
>fd58	01					.byte 	1     ; *** Load Float 9.184277 ***
>fd59	70 cc f2 92				.dword 	$92f2cc70
>fd5d	84 00					.byte 	$84,$0
>fd5f	7e					.byte 	$7e   ; *** Command ~ ***
>fd60	01					.byte 	1     ; *** Load Float 1 ***
>fd61	00 00 00 80				.dword 	$80000000
>fd65	81 00					.byte 	$81,$0
>fd67	3d					.byte 	$3d   ; *** Command = ***
>fd68	01					.byte 	1     ; *** Load Float -4.765948688145727e-12 ***
>fd69	76 d9 af a7				.dword 	$a7afd976
>fd6d	5b 80					.byte 	$5b,$80
>fd6f	01					.byte 	1     ; *** Load Float 127663195589.44357 ***
>fd70	2e 8e ca ed				.dword 	$edca8e2e
>fd74	a5 00					.byte 	$a5,$0
>fd76	2f					.byte 	$2f   ; *** Command / ***
>fd77	01					.byte 	1     ; *** Load Float -3.733220577896784e-23 ***
>fd78	44 08 87 b4				.dword 	$b4870844
>fd7c	36 80					.byte 	$36,$80
>fd7e	3d					.byte 	$3d   ; *** Command = ***
>fd7f	01					.byte 	1     ; *** Load Float 9.678669 ***
>fd80	06 d4 db 9a				.dword 	$9adbd406
>fd84	84 00					.byte 	$84,$0
>fd86	01					.byte 	1     ; *** Load Float -7386.6608639999995 ***
>fd87	73 49 d5 e6				.dword 	$e6d54973
>fd8b	8d 80					.byte 	$8d,$80
>fd8d	2b					.byte 	$2b   ; *** Command + ***
>fd8e	01					.byte 	1     ; *** Load Float -7376.982195 ***
>fd8f	89 db 87 e6				.dword 	$e687db89
>fd93	8d 80					.byte 	$8d,$80
>fd95	3d					.byte 	$3d   ; *** Command = ***
>fd96	01					.byte 	1     ; *** Load Float 9.272357 ***
>fd97	03 93 5b 94				.dword 	$945b9303
>fd9b	84 00					.byte 	$84,$0
>fd9d	01					.byte 	1     ; *** Load Float -0.970295 ***
>fd9e	cc 40 65 f8				.dword 	$f86540cc
>fda2	80 80					.byte 	$80,$80
>fda4	2f					.byte 	$2f   ; *** Command / ***
>fda5	01					.byte 	1     ; *** Load Float -9.55622465332708 ***
>fda6	d2 4b e6 98				.dword 	$98e64bd2
>fdaa	84 80					.byte 	$84,$80
>fdac	3d					.byte 	$3d   ; *** Command = ***
>fdad	01					.byte 	1     ; *** Load Float -691.85 ***
>fdae	66 66 f6 ac				.dword 	$acf66666
>fdb2	8a 80					.byte 	$8a,$80
>fdb4	01					.byte 	1     ; *** Load Float 592.29 ***
>fdb5	5c 8f 12 94				.dword 	$94128f5c
>fdb9	8a 00					.byte 	$8a,$0
>fdbb	2f					.byte 	$2f   ; *** Command / ***
>fdbc	01					.byte 	1     ; *** Load Float -1.1680933326579885 ***
>fdbd	13 15 84 95				.dword 	$95841513
>fdc1	81 80					.byte 	$81,$80
>fdc3	3d					.byte 	$3d   ; *** Command = ***
>fdc4	01					.byte 	1	; *** Load Integer 99999 ***
>fdc5	9f 86 01 00				.dword 	$1869f
>fdc9	00 01					.byte 	0,$01

;******  Return to file: testing/fptest.asm

>fdcb	00						.byte 	0

;******  Return to file: basic.asm

>fffa	0c eb						.word	NMIHandler
>fffc	fc ea						.word 	StartROM
>fffe	74 a1						.word 	TIM_BreakVector

;******  End of listing
