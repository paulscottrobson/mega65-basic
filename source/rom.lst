
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q --m4510 -D CPU=4510 -D INTERFACE=2 -b -L rom.lst -o rom.bin basic.asm
; Wed Aug 14 14:38:41 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=4510					CPU=4510
=2					INTERFACE=2

;******  Processing input file: basic.asm

.0000	ea		nop				nop

;******  Processing file: data.asm

>0010					A_Mantissa	.dword ?						; floating point registers
>0014					A_Exponent	.byte ?							; showab.py is dependent on these being at $10,$18
>0015					A_Sign 		.byte ?
>0016					A_Zero 		.byte ?
>0017					A_Type 		.byte ?
>0018					B_Mantissa	.dword ?
>001c					B_Exponent	.byte ?
>001d					B_Sign 		.byte ?
>001e					B_Zero 		.byte ?
>001f					B_Type 		.byte ?
=$00					Type_Integer = $00 							; type IDs, not tested directly.
=$80					Type_Float = $80
=$40					Type_String = $40
>0020					zTemp1:		.word ?							; temporary pointers
>0022					zTemp2:		.word ?
>0024					zTemp3:		.word ?
>0026					zLTemp1:	.dword ?						; long word (used in multiply)
>002a					zGenPtr:	.word ? 						; general pointer.
>0300					Num_Buffer:	.fill 	32						; Buffer for number -> ASCII conversion
>0320					NumBufX:	.byte 	?						; Index into buffer for number -> ASCII conversion.
>0321					NumSuppress:.byte 	? 						; Buffer zero suppression flag.
>0322					ExpTemp:	.byte ? 						; Byte used in ASCII->number conversion.
>0323					Tim_PC:		.word ?							; program counter on BRK (Hi/Lo order)
>0325					Tim_IRQ:	.word ?							; IRQ Vector (Hi/Lo order)
>0327					Tim_SR:		.byte ? 						; Processor Status
>0328					Tim_A:		.byte ? 						; Processor Registers
>0329					Tim_X:		.byte ?
>032a					Tim_Y:		.byte ?
>032b					Tim_Z:		.byte ?
>032c					Tim_SP:		.byte ?							; Stack Pointer

;******  Return to file: basic.asm


;******  Processing file: interface/interface_mega65.asm

=80					IF_Width 	= 80 							; characters across
=25					IF_Height 	= 25 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line
=6					IF_XPos 	= 6 							; current position, horizontal.
=8					IF_FarPtr 	= 8 							; far pointer (4 bytes)
=$1000					IF_Screen = $1000							; 2k screen RAM here
=$800					IF_CharSet = $800							; 2k character set (0-7F) here
.a000					IF_Home:
.a000	48		pha				pha 								; reset cursor position
.a001	a9 00		lda #$00			lda 	#IF_Screen & $FF
.a003	85 04		sta $04				sta 	IF_Pos
.a005	a9 10		lda #$10			lda 	#IF_Screen >> 8
.a007	85 05		sta $05				sta 	IF_Pos+1
.a009	a9 00		lda #$00			lda 	#0
.a00b	85 06		sta $06				sta 	IF_XPos
.a00d	68		pla				pla
.a00e	60		rts				rts
.a00f					IF_NewLine:
.a00f	48		pha				pha
.a010	a9 00		lda #$00			lda 	#0 							; back to start of line
.a012	85 06		sta $06				sta 	IF_XPos
.a014	18		clc				clc 								; down one line
.a015	a5 04		lda $04				lda 	IF_Pos
.a017	69 50		adc #$50			adc 	#80
.a019	85 04		sta $04				sta 	IF_Pos
.a01b	90 02		bcc $a01f			bcc 	_IF_NoCarry 				; carry through.
.a01d	e6 05		inc $05				inc 	IF_Pos+1
.a01f					_IF_NoCarry:
.a01f	68		pla				pla
.a020	60		rts				rts
.a021					IF_Read:
.a021	5a		phy				phy 								; save current Y
.a022	a4 06		ldy $06				ldy 	IF_XPos 					; read character at current position
.a024	b1 04		lda ($04),y			lda 	(IF_Pos),y
.a026	e6 06		inc $06				inc 	IF_XPos 					; step right.
.a028	7a		ply				ply									; restore Y
.a029	60		rts				rts
.a02a					IF_Write:
.a02a	5a		phy				phy 								; save current Y
.a02b	a4 06		ldy $06				ldy 	IF_XPos 					; write character at current position
.a02d	91 04		sta ($04),y			sta 	(IF_Pos),y
.a02f	e6 06		inc $06				inc 	IF_XPos 					; step right.
.a031	7a		ply				ply									; restore Y
.a032	60		rts				rts
.a033					IF_LeftOne:
.a033	c6 06		dec $06				dec 	IF_XPos
.a035	60		rts				rts
.a036					IF_CheckBreak:
.a036	db		phz				phz
.a037	20 7f a0	jsr $a07f			jsr 	IF_SetupKeyAddress 			; point to keyboard
.a03a	e6 08		inc $08				inc 	IF_FarPtr 					; point to modifiers.
.a03c	ea		nop				nop 								; read modifiers.
.a03d	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.a03f	fb		plz				plz 								; restore Z
.a040	29 05		and #$05			and 	#5							; break is LeftShift+Ctrl
.a042	c9 05		cmp #$05			cmp 	#5
.a044	f0 02		beq $a048			beq 	_IF_CBExit
.a046	a9 00		lda #$00			lda 	#0
.a048					_IF_CBExit:
.a048	c9 00		cmp #$00			cmp 	#0
.a04a	60		rts				rts
.a04b					IF_GetKey:
.a04b	db		phz				phz
.a04c	20 7f a0	jsr $a07f			jsr 	IF_SetupKeyAddress
.a04f	ea		nop				nop 								; read keyboard
.a050	b2 08		lda ($08),z			lda 	(IF_FarPtr),z
.a052	c9 14		cmp #$14			cmp 	#20
.a054	d0 02		bne $a058			bne 	_KMNo
.a056	a9 08		lda #$08			lda 	#"H"-64
.a058					_KMNo:
.a058	c9 91		cmp #$91			cmp 	#145
.a05a	d0 02		bne $a05e			bne 	_KMNo
.a05c	a9 17		lda #$17			lda 	#"W"-64
.a05e					_KMNo:
.a05e	c9 11		cmp #$11			cmp 	#17
.a060	d0 02		bne $a064			bne 	_KMNo
.a062	a9 13		lda #$13			lda 	#"S"-64
.a064					_KMNo:
.a064	c9 9d		cmp #$9d			cmp 	#157
.a066	d0 02		bne $a06a			bne 	_KMNo
.a068	a9 01		lda #$01			lda 	#"A"-64
.a06a					_KMNo:
.a06a	c9 1d		cmp #$1d			cmp 	#29
.a06c	d0 02		bne $a070			bne 	_KMNo
.a06e	a9 04		lda #$04			lda 	#"D"-64
.a070					_KMNo:
.a070	c9 00		cmp #$00			cmp 	#0
.a072	f0 07		beq $a07b			beq 	_IFGKEmpty
.a074	48		pha				pha
.a075	a9 00		lda #$00			lda 	#0
.a077	ea		nop				nop
.a078	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a07a	68		pla				pla
.a07b					_IFGKEmpty:
.a07b	fb		plz				plz
.a07c	c9 00		cmp #$00			cmp 	#0 							; set Z
.a07e	60		rts				rts
.a07f					IF_SetupKeyAddress:
.a07f	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to read keyboard.
.a081	85 0b		sta $0b				sta 	IF_FarPtr+3
.a083	a9 fd		lda #$fd			lda 	#$FD
.a085	85 0a		sta $0a				sta 	IF_FarPtr+2
.a087	a9 36		lda #$36			lda 	#$36
.a089	85 09		sta $09				sta 	IF_FarPtr+1
.a08b	a9 10		lda #$10			lda 	#$10
.a08d	85 08		sta $08				sta 	IF_FarPtr+0
.a08f	a3 00		ldz #$00			ldz 	#0
.a091	60		rts				rts
.a092					IF_Reset:
.a092	48		pha				pha 								; save registers
.a093	da		phx				phx
.a094	5a		phy				phy
.a095	a9 0f		lda #$0f			lda 	#$0F 						; set up to write to video system.
.a097	85 0b		sta $0b				sta 	IF_FarPtr+3
.a099	a9 fd		lda #$fd			lda 	#$FD
.a09b	85 0a		sta $0a				sta 	IF_FarPtr+2
.a09d	a9 30		lda #$30			lda 	#$30
.a09f	85 09		sta $09				sta 	IF_FarPtr+1
.a0a1	a9 00		lda #$00			lda 	#$00
.a0a3	85 08		sta $08				sta 	IF_FarPtr+0
.a0a5	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.a0a7	a9 47		lda #$47			lda 	#$47
.a0a9	ea		nop				nop
.a0aa	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0ac	a3 2f		ldz #$2f			ldz 	#$2F 						; address already set up
.a0ae	a9 53		lda #$53			lda 	#$53
.a0b0	ea		nop				nop
.a0b1	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0b3	a3 30		ldz #$30			ldz 	#$30 						; address already set up
.a0b5	a9 40		lda #$40			lda 	#$40
.a0b7	ea		nop				nop
.a0b8	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0ba	a3 31		ldz #$31			ldz 	#$31 						; address already set up
.a0bc	a9 c0		lda #$c0			lda 	#$80+$40
.a0be	ea		nop				nop
.a0bf	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0c1	a3 20		ldz #$20			ldz 	#$20 						; address already set up
.a0c3	a9 00		lda #$00			lda 	#0
.a0c5	ea		nop				nop
.a0c6	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0c8	a3 21		ldz #$21			ldz 	#$21 						; address already set up
.a0ca	a9 00		lda #$00			lda 	#0
.a0cc	ea		nop				nop
.a0cd	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0cf	a3 54		ldz #$54			ldz 	#$54 						; address already set up
.a0d1	a9 40		lda #$40			lda 	#$40
.a0d3	ea		nop				nop
.a0d4	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0d6	a3 01		ldz #$01			ldz 	#$01 						; address already set up
.a0d8	a9 ff		lda #$ff			lda 	#$FF
.a0da	ea		nop				nop
.a0db	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0dd	a3 00		ldz #$00			ldz 	#$00 						; address already set up
.a0df	a9 ff		lda #$ff			lda 	#$FF
.a0e1	ea		nop				nop
.a0e2	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0e4	a3 16		ldz #$16			ldz 	#$16 						; address already set up
.a0e6	a9 cc		lda #$cc			lda 	#$CC
.a0e8	ea		nop				nop
.a0e9	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0eb	a3 18		ldz #$18			ldz 	#$18 						; address already set up
.a0ed	a9 42		lda #$42			lda 	#$42
.a0ef	ea		nop				nop
.a0f0	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0f2	a3 11		ldz #$11			ldz 	#$11 						; address already set up
.a0f4	a9 1b		lda #$1b			lda 	#$1B
.a0f6	ea		nop				nop
.a0f7	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a0f9	a9 00		lda #$00			lda 	#$00						; colour RAM at $1F800-1FFFF (2kb)
.a0fb	85 0b		sta $0b				sta 	IF_FarPtr+3
.a0fd	a9 01		lda #$01			lda 	#$01
.a0ff	85 0a		sta $0a				sta 	IF_FarPtr+2
.a101	a9 f8		lda #$f8			lda 	#$F8
.a103	85 09		sta $09				sta 	IF_FarPtr+1
.a105	a9 00		lda #$00			lda 	#$00
.a107	85 08		sta $08				sta 	IF_FarPtr+0
.a109	a3 00		ldz #$00			ldz 	#0
.a10b					_EXTClearColorRam:
.a10b	a9 05		lda #$05			lda 	#5							; fill that with this colour.
.a10d	ea		nop				nop
.a10e	92 08		sta ($08),z			sta 	(IF_FarPtr),z
.a110	3b		dez				dez
.a111	d0 f8		bne $a10b			bne 	_EXTClearColorRam
.a113	e6 09		inc $09				inc 	IF_FarPtr+1
.a115	d0 f4		bne $a10b			bne 	_EXTClearColorRam
.a117	a2 00		ldx #$00			ldx 	#0 							; copy PET Font into memory.
.a119					_EXTCopyCBMFont:
.a119	bd 5a a1	lda $a15a,x			lda 	IF_CBMFont,x 				; +$800 uses the lower case c/set
.a11c	9d 00 08	sta $0800,x			sta 	IF_CharSet,x
.a11f	49 ff		eor #$ff			eor 	#$FF
.a121	9d 00 0c	sta $0c00,x			sta 	IF_CharSet+$400,x
.a124	bd 5a a2	lda $a25a,x			lda 	IF_CBMFont+$100,x
.a127	9d 00 09	sta $0900,x			sta 	IF_CharSet+$100,x
.a12a	49 ff		eor #$ff			eor 	#$FF
.a12c	9d 00 0d	sta $0d00,x			sta 	IF_CharSet+$500,x
.a12f	bd 5a a3	lda $a35a,x			lda 	IF_CBMFont+$200,x
.a132	9d 00 0a	sta $0a00,x			sta 	IF_CharSet+$200,x
.a135	49 ff		eor #$ff			eor 	#$FF
.a137	9d 00 0e	sta $0e00,x			sta 	IF_CharSet+$600,x
.a13a	bd 5a a4	lda $a45a,x			lda 	IF_CBMFont+$300,x
.a13d	9d 00 0b	sta $0b00,x			sta 	IF_CharSet+$300,x
.a140	49 ff		eor #$ff			eor 	#$FF
.a142	9d 00 0f	sta $0f00,x			sta 	IF_CharSet+$700,x
.a145	ca		dex				dex
.a146	d0 d1		bne $a119			bne 	_EXTCopyCBMFont
.a148	a9 3b		lda #$3b			lda 	#$3F-4  					; puts ROM back in the map (the -4)
.a14a	85 01		sta $01				sta 	$01
.a14c	a9 00		lda #$00			lda 	#$00						; do not map bytes 0000-7FFF
.a14e	a2 00		ldx #$00			ldx 	#$00
.a150	a0 00		ldy #$00			ldy 	#$00 						; 8000-FFFF offset by $2000
.a152	a3 f2		ldz #$f2			ldz 	#$F2
.a154	5c		map				map
.a155	ea		nop				eom
.a156	7a		ply				ply 								; restore and exit.
.a157	fa		plx				plx
.a158	68		pla				pla
.a159	60		rts				rts
.a15a					IF_CBMFont:
>a15a	1c 22 4a 56 4c 20 1e 00				.binary "pet-font.bin"
>a162	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>a172	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>a182	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a192	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>a1a2	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a1b2	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a1c2	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>a1d2	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>a1e2	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>a1f2	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a202	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>a212	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>a222	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>a232	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a242	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>a252	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>a262	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a272	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a282	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a292	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>a2a2	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>a2b2	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a2c2	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a2d2	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a2e2	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>a2f2	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>a302	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>a312	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a322	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>a332	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>a342	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a352	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>a362	08 1c 3e 7f 7f 1c 3e 00 10 10 10 10 10 10 10 10
>a372	00 00 00 ff 00 00 00 00 00 00 ff 00 00 00 00 00
>a382	00 ff 00 00 00 00 00 00 00 00 00 00 00 ff 00 00
>a392	20 20 20 20 20 20 20 20 04 04 04 04 04 04 04 04
>a3a2	00 00 00 00 e0 10 08 08 08 08 08 04 03 00 00 00
>a3b2	08 08 08 10 e0 00 00 00 80 80 80 80 80 80 80 ff
>a3c2	80 40 20 10 08 04 02 01 01 02 04 08 10 20 40 80
>a3d2	ff 80 80 80 80 80 80 80 ff 01 01 01 01 01 01 01
>a3e2	00 3c 7e 7e 7e 7e 3c 00 00 00 00 00 00 00 ff 00
>a3f2	36 7f 7f 7f 3e 1c 08 00 40 40 40 40 40 40 40 40
>a402	00 00 00 00 03 04 08 08 81 42 24 18 18 24 42 81
>a412	00 3c 42 42 42 42 3c 00 08 1c 2a 77 2a 08 08 00
>a422	02 02 02 02 02 02 02 02 08 1c 3e 7f 3e 1c 08 00
>a432	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>a442	08 08 08 08 08 08 08 08 00 00 01 3e 54 14 14 00
>a452	ff 7f 3f 1f 0f 07 03 01 00 00 00 00 00 00 00 00
>a462	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>a472	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>a482	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>a492	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>a4a2	ff fe fc f8 f0 e0 c0 80 03 03 03 03 03 03 03 03
>a4b2	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>a4c2	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>a4d2	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>a4e2	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>a4f2	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>a502	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>a512	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>a522	00 00 00 00 00 ff ff ff 01 01 01 01 01 01 01 ff
>a532	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>a542	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>a552	f0 f0 f0 f0 0f 0f 0f 0f 1c 22 4a 56 4c 20 1e 00
>a562	18 24 42 7e 42 42 42 00 7c 22 22 3c 22 22 7c 00
>a572	1c 22 40 40 40 22 1c 00 78 24 22 22 22 24 78 00
>a582	7e 40 40 78 40 40 7e 00 7e 40 40 78 40 40 40 00
>a592	1c 22 40 4e 42 22 1c 00 42 42 42 7e 42 42 42 00
>a5a2	1c 08 08 08 08 08 1c 00 0e 04 04 04 04 44 38 00
>a5b2	42 44 48 70 48 44 42 00 40 40 40 40 40 40 7e 00
>a5c2	42 66 5a 5a 42 42 42 00 42 62 52 4a 46 42 42 00
>a5d2	18 24 42 42 42 24 18 00 7c 42 42 7c 40 40 40 00
>a5e2	18 24 42 42 4a 24 1a 00 7c 42 42 7c 48 44 42 00
>a5f2	3c 42 40 3c 02 42 3c 00 3e 08 08 08 08 08 08 00
>a602	42 42 42 42 42 42 3c 00 42 42 42 24 24 18 18 00
>a612	42 42 42 5a 5a 66 42 00 42 42 24 18 24 42 42 00
>a622	22 22 22 1c 08 08 08 00 7e 02 04 18 20 40 7e 00
>a632	3c 20 20 20 20 20 3c 00 00 40 20 10 08 04 02 00
>a642	3c 04 04 04 04 04 3c 00 00 08 1c 2a 08 08 08 08
>a652	00 00 10 20 7f 20 10 00 00 00 00 00 00 00 00 00
>a662	08 08 08 08 00 00 08 00 24 24 24 00 00 00 00 00
>a672	24 24 7e 24 7e 24 24 00 08 1e 28 1c 0a 3c 08 00
>a682	00 62 64 08 10 26 46 00 30 48 48 30 4a 44 3a 00
>a692	04 08 10 00 00 00 00 00 04 08 10 10 10 08 04 00
>a6a2	20 10 08 08 08 10 20 00 08 2a 1c 3e 1c 2a 08 00
>a6b2	00 08 08 3e 08 08 00 00 00 00 00 00 00 08 08 10
>a6c2	00 00 00 7e 00 00 00 00 00 00 00 00 00 18 18 00
>a6d2	00 02 04 08 10 20 40 00 3c 42 46 5a 62 42 3c 00
>a6e2	08 18 28 08 08 08 3e 00 3c 42 02 0c 30 40 7e 00
>a6f2	3c 42 02 1c 02 42 3c 00 04 0c 14 24 7e 04 04 00
>a702	7e 40 78 04 02 44 38 00 1c 20 40 7c 42 42 3c 00
>a712	7e 42 04 08 10 10 10 00 3c 42 42 3c 42 42 3c 00
>a722	3c 42 42 3e 02 04 38 00 00 00 08 00 00 08 00 00
>a732	00 00 08 00 00 08 08 10 0e 18 30 60 30 18 0e 00
>a742	00 00 7e 00 7e 00 00 00 70 18 0c 06 0c 18 70 00
>a752	3c 42 02 0c 10 00 10 00 00 00 00 00 ff 00 00 00
>a762	00 00 38 04 3c 44 3a 00 40 40 5c 62 42 62 5c 00
>a772	00 00 3c 42 40 42 3c 00 02 02 3a 46 42 46 3a 00
>a782	00 00 3c 42 7e 40 3c 00 0c 12 10 7c 10 10 10 00
>a792	00 00 3a 46 46 3a 02 3c 40 40 5c 62 42 42 42 00
>a7a2	08 00 18 08 08 08 1c 00 04 00 0c 04 04 04 44 38
>a7b2	40 40 44 48 50 68 44 00 18 08 08 08 08 08 1c 00
>a7c2	00 00 76 49 49 49 49 00 00 00 5c 62 42 42 42 00
>a7d2	00 00 3c 42 42 42 3c 00 00 00 5c 62 62 5c 40 40
>a7e2	00 00 3a 46 46 3a 02 02 00 00 5c 62 40 40 40 00
>a7f2	00 00 3e 40 3c 02 7c 00 10 10 7c 10 10 12 0c 00
>a802	00 00 42 42 42 46 3a 00 00 00 42 42 42 24 18 00
>a812	00 00 41 49 49 49 36 00 00 00 42 24 18 24 42 00
>a822	00 00 42 42 46 3a 02 3c 00 00 7e 04 18 20 7e 00
>a832	08 08 08 08 ff 08 08 08 a0 50 a0 50 a0 50 a0 50
>a842	08 08 08 08 08 08 08 08 cc cc 33 33 cc cc 33 33
>a852	cc 66 33 99 cc 66 33 99 00 00 00 00 00 00 00 00
>a862	f0 f0 f0 f0 f0 f0 f0 f0 00 00 00 00 ff ff ff ff
>a872	ff 00 00 00 00 00 00 00 00 00 00 00 00 00 00 ff
>a882	80 80 80 80 80 80 80 80 aa 55 aa 55 aa 55 aa 55
>a892	01 01 01 01 01 01 01 01 00 00 00 00 aa 55 aa 55
>a8a2	99 33 66 cc 99 33 66 cc 03 03 03 03 03 03 03 03
>a8b2	08 08 08 08 0f 08 08 08 00 00 00 00 0f 0f 0f 0f
>a8c2	08 08 08 08 0f 00 00 00 00 00 00 00 f8 08 08 08
>a8d2	00 00 00 00 00 00 ff ff 00 00 00 00 0f 08 08 08
>a8e2	08 08 08 08 ff 00 00 00 00 00 00 00 ff 08 08 08
>a8f2	08 08 08 08 f8 08 08 08 c0 c0 c0 c0 c0 c0 c0 c0
>a902	e0 e0 e0 e0 e0 e0 e0 e0 07 07 07 07 07 07 07 07
>a912	ff ff 00 00 00 00 00 00 ff ff ff 00 00 00 00 00
>a922	00 00 00 00 00 ff ff ff 01 02 44 48 50 60 40 00
>a932	00 00 00 00 f0 f0 f0 f0 0f 0f 0f 0f 00 00 00 00
>a942	08 08 08 08 f8 00 00 00 f0 f0 f0 f0 00 00 00 00
>a952	f0 f0 f0 f0 0f 0f 0f 0f

;******  Return to file: basic.asm


;******  Processing file: interface/interface_tools.asm

=$200					IFT_XCursor = $200								; current logical position on screen
=$201					IFT_YCursor = $201
=$202					IFT_Buffer = $202 								; scroll copy buffer.
=$280					IFT_LineBuffer = $280 							; line input buffer.
.a95a					IFT_ClearScreen:
.a95a	48		pha				pha
.a95b	da		phx				phx
.a95c	5a		phy				phy
.a95d	20 00 a0	jsr $a000			jsr 	IF_Home 					; home cursor
.a960	a2 19		ldx #$19			ldx 	#IF_Height 					; this many lines.
.a962					_IFT_CS0:
.a962	a0 50		ldy #$50			ldy 	#IF_Width 					; this many chars/line
.a964					_IFT_CS1:
.a964	a9 20		lda #$20			lda 	#' '						; clear line.
.a966	20 2a a0	jsr $a02a			jsr 	IF_Write
.a969	88		dey				dey
.a96a	d0 f8		bne $a964			bne 	_IFT_CS1
.a96c	20 0f a0	jsr $a00f			jsr 	IF_NewLine 					; next line down
.a96f	ca		dex				dex
.a970	d0 f0		bne $a962			bne 	_IFT_CS0
.a972	7a		ply				ply
.a973	fa		plx				plx
.a974	68		pla				pla
.a975					IFT_HomeCursor:
.a975	48		pha				pha
.a976	20 00 a0	jsr $a000			jsr 	IF_Home
.a979	a9 00		lda #$00			lda 	#0
.a97b	8d 00 02	sta $0200			sta 	IFT_XCursor
.a97e	8d 01 02	sta $0201			sta 	IFT_YCursor
.a981	68		pla				pla
.a982	60		rts				rts
.a983					IFT_UpLine:
.a983	48		pha				pha
.a984	ad 01 02	lda $0201			lda  	IFT_YCursor 				; get Y
.a987	3a		dec a				dec 	a 							; line above
.a988	30 03		bmi $a98d			bmi 	_IFTULExit 					; too far, abort
.a98a	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos					; set to that line.
.a98d					_IFTULExit:
.a98d	68		pla				pla
.a98e	60		rts				rts
.a98f					IFT_PrintCharacter:
.a98f	c9 0d		cmp #$0d			cmp 	#13 						; handle newline.
.a991	f0 18		beq $a9ab			beq 	IFT_NewLine
.a993	48		pha				pha
.a994	20 c3 a9	jsr $a9c3			jsr 	IFT_UpperCase 				; make upper case
.a997	29 3f		and #$3f			and 	#63 						; make 6 bit PETSCII
.a999	20 2a a0	jsr $a02a			jsr 	IF_Write 					; write out.
.a99c	ee 00 02	inc $0200			inc 	IFT_XCursor 				; bump x cursor
.a99f	ad 00 02	lda $0200			lda 	IFT_XCursor 				; reached RHS ?
.a9a2	c9 50		cmp #$50			cmp 	#IF_Width
.a9a4	d0 03		bne $a9a9			bne 	_IFT_PCNotEOL
.a9a6	20 ab a9	jsr $a9ab			jsr 	IFT_NewLine 				; if so do new line.
.a9a9					_IFT_PCNotEOL:
.a9a9	68		pla				pla
.a9aa	60		rts				rts
.a9ab					IFT_NewLine:
.a9ab	48		pha				pha
.a9ac	20 0f a0	jsr $a00f			jsr 	IF_NewLine 					; new line on actual screen.
.a9af	a9 00		lda #$00			lda 	#0 							; reset x position
.a9b1	8d 00 02	sta $0200			sta 	IFT_XCursor
.a9b4	ee 01 02	inc $0201			inc 	IFT_YCursor 				; move down.
.a9b7	ad 01 02	lda $0201			lda 	IFT_YCursor
.a9ba	c9 19		cmp #$19			cmp 	#IF_Height 					; reached bottom.
.a9bc	d0 03		bne $a9c1			bne 	_IFT_NL_NotEOS
.a9be	20 ce a9	jsr $a9ce			jsr 	IFT_Scroll 					; scroll screen up.
.a9c1					_IFT_NL_NotEOS:
.a9c1	68		pla				pla
.a9c2	60		rts				rts
.a9c3					IFT_UpperCase:
.a9c3	c9 61		cmp #$61			cmp 	#"a"
.a9c5	90 06		bcc $a9cd			bcc 	_IFT_UCExit
.a9c7	c9 7b		cmp #$7b			cmp 	#"z"+1
.a9c9	b0 02		bcs $a9cd			bcs 	_IFT_UCExit
.a9cb	49 20		eor #$20			eor 	#$20
.a9cd					_IFT_UCExit:
.a9cd	60		rts				rts
.a9ce					IFT_Scroll:
.a9ce	48		pha				pha 								; save AXY
.a9cf	da		phx				phx
.a9d0	5a		phy				phy
.a9d1	a2 00		ldx #$00			ldx 	#0 							; start scrolling.
.a9d3					_IFT_SLoop:
.a9d3	20 f3 a9	jsr $a9f3			jsr 	_IFT_ScrollLine 			; scroll line X+1 => X
.a9d6	e8		inx				inx
.a9d7	e0 18		cpx #$18			cpx 	#IF_Height-1				; do whole screen
.a9d9	d0 f8		bne $a9d3			bne 	_IFT_SLoop
.a9db	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.a9dd	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.a9e0	a2 50		ldx #$50			ldx 	#IF_Width 					; blank line
.a9e2					_IFT_SBlank:
.a9e2	a9 20		lda #$20			lda 	#32
.a9e4	20 2a a0	jsr $a02a			jsr 	IF_Write
.a9e7	ca		dex				dex
.a9e8	d0 f8		bne $a9e2			bne 	_IFT_SBlank
.a9ea	a9 18		lda #$18			lda 	#IF_Height-1 				; move to X = 0,Y = A
.a9ec	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.a9ef	7a		ply				ply
.a9f0	fa		plx				plx
.a9f1	68		pla				pla
.a9f2	60		rts				rts
.a9f3					_IFT_ScrollLine:
.a9f3	da		phx				phx
.a9f4	da		phx				phx
.a9f5	8a		txa				txa 								; copy line into buffer.
.a9f6	1a		inc a				inc 	a 							; next line down.
.a9f7	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.a9fa	a2 00		ldx #$00			ldx 	#0
.a9fc					_IFTScrollCopy1:
.a9fc	20 21 a0	jsr $a021			jsr 	IF_Read
.a9ff	9d 02 02	sta $0202,x			sta 	IFT_Buffer,x
.aa02	e8		inx				inx
.aa03	e0 50		cpx #$50			cpx 	#IF_Width
.aa05	d0 f5		bne $a9fc			bne 	_IFTScrollCopy1
.aa07	68		pla				pla
.aa08	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.aa0b	a2 00		ldx #$00			ldx 	#0
.aa0d					_IFTScrollCopy2:
.aa0d	bd 02 02	lda $0202,x			lda 	IFT_Buffer,x
.aa10	20 2a a0	jsr $a02a			jsr 	IF_Write
.aa13	e8		inx				inx
.aa14	e0 50		cpx #$50			cpx 	#IF_Width
.aa16	d0 f5		bne $aa0d			bne 	_IFTScrollCopy2
.aa18	fa		plx				plx
.aa19	60		rts				rts
.aa1a					IFT_SetYPos:
.aa1a	48		pha				pha
.aa1b	da		phx				phx
.aa1c	aa		tax				tax
.aa1d	20 75 a9	jsr $a975			jsr 	IFT_HomeCursor
.aa20	e0 00		cpx #$00			cpx 	#0
.aa22	f0 09		beq $aa2d			beq 	_IFT_MOAExit
.aa24					_IFT_MOALoop:
.aa24	20 0f a0	jsr $a00f			jsr 	IF_NewLine
.aa27	ee 01 02	inc $0201			inc 	IFT_YCursor
.aa2a	ca		dex				dex
.aa2b	d0 f7		bne $aa24			bne		_IFT_MOALoop
.aa2d					_IFT_MOAExit:
.aa2d	fa		plx				plx
.aa2e	68		pla				pla
.aa2f	60		rts				rts
.aa30					IFT_GetKeyCursor:
.aa30	20 38 aa	jsr $aa38			jsr 	_IFT_FlipCursor 			; reverse current
.aa33					_IFT_GKCWait:
.aa33	20 4b a0	jsr $a04b			jsr 	IF_GetKey 					; get key
.aa36	f0 fb		beq $aa33			beq 	_IFT_GKCWait
.aa38					_IFT_FlipCursor:
.aa38	48		pha				pha 								; save
.aa39	20 21 a0	jsr $a021			jsr 	IF_Read 					; read
.aa3c	20 33 a0	jsr $a033			jsr 	IF_LeftOne
.aa3f	49 80		eor #$80			eor 	#$80 						; reverse
.aa41	20 2a a0	jsr $a02a			jsr 	IF_Write 					; write
.aa44	20 33 a0	jsr $a033			jsr 	IF_LeftOne
.aa47	68		pla				pla
.aa48	60		rts				rts
.aa49					IFT_ReadLine:
.aa49	48		pha				pha
.aa4a					_IFT_RLLoop:
.aa4a	20 30 aa	jsr $aa30			jsr 	IFT_GetKeyCursor 			; get keystroke
.aa4d	c9 0d		cmp #$0d			cmp 	#13							; return
.aa4f	f0 7d		beq $aace			beq 	_IFT_RLExit
.aa51	c9 20		cmp #$20			cmp 	#32 						; control character
.aa53	90 05		bcc $aa5a			bcc 	_IFT_Control
.aa55	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.aa58	80 f0		bra $aa4a			bra 	_IFT_RLLoop
.aa5a					_IFT_Control:
.aa5a	c9 01		cmp #$01			cmp 	#"A"-64
.aa5c	f0 26		beq $aa84			beq 	_IFT_Left
.aa5e	c9 04		cmp #$04			cmp 	#"D"-64
.aa60	f0 2e		beq $aa90			beq 	_IFT_Right
.aa62	c9 17		cmp #$17			cmp 	#"W"-64
.aa64	f0 36		beq $aa9c			beq 	_IFT_Up
.aa66	c9 13		cmp #$13			cmp 	#"S"-64
.aa68	f0 3e		beq $aaa8			beq 	_IFT_Down
.aa6a	c9 08		cmp #$08			cmp 	#"H"-64
.aa6c	f0 09		beq $aa77			beq 	_IFT_Backspace
.aa6e	c9 1a		cmp #$1a			cmp 	#"Z"-64
.aa70	d0 d8		bne $aa4a			bne 	_IFT_RLLoop
.aa72	20 5a a9	jsr $a95a			jsr 	IFT_ClearScreen				; clear CTL-Z
.aa75	80 d3		bra $aa4a			bra 	_IFT_RLLoop
.aa77					_IFT_Backspace:
.aa77	ad 00 02	lda $0200			lda 	IFT_XCursor 				; check not start of line.
.aa7a	f0 ce		beq $aa4a			beq 	_IFT_RLLoop
.aa7c	20 33 a0	jsr $a033			jsr 	IF_LeftOne
.aa7f	a9 20		lda #$20			lda 	#" "						; overwrite with space, drop through to left
.aa81	20 2a a0	jsr $a02a			jsr 	IF_Write
.aa84					_IFT_Left:
.aa84	ce 00 02	dec $0200			dec 	IFT_XCursor 				; left CTL-W
.aa87	10 29		bpl $aab2			bpl 	_IFT_Reposition
.aa89	a9 4f		lda #$4f			lda 	#IF_Width-1
.aa8b					_IFT_SetX:
.aa8b	8d 00 02	sta $0200			sta 	IFT_XCursor
.aa8e	80 22		bra $aab2			bra 	_IFT_Reposition
.aa90					_IFT_Right:
.aa90	ee 00 02	inc $0200			inc 	IFT_XCursor
.aa93	ad 00 02	lda $0200			lda 	IFT_XCursor
.aa96	49 50		eor #$50			eor 	#IF_Width
.aa98	f0 f1		beq $aa8b			beq 	_IFT_SetX
.aa9a	80 16		bra $aab2			bra 	_IFT_Reposition
.aa9c					_IFT_Up:
.aa9c	ce 01 02	dec $0201			dec 	IFT_YCursor
.aa9f	10 11		bpl $aab2			bpl 	_IFT_Reposition
.aaa1	a9 18		lda #$18			lda 	#IF_Height-1
.aaa3					_IFT_SetY:
.aaa3	8d 01 02	sta $0201			sta 	IFT_YCursor
.aaa6	80 0a		bra $aab2			bra 	_IFT_Reposition
.aaa8					_IFT_Down:
.aaa8	ee 01 02	inc $0201			inc 	IFT_YCursor
.aaab	ad 01 02	lda $0201			lda 	IFT_YCursor
.aaae	49 19		eor #$19			eor 	#IF_Height
.aab0	f0 f1		beq $aaa3			beq 	_IFT_SetY
.aab2					_IFT_Reposition:
.aab2	ad 00 02	lda $0200			lda 	IFT_XCursor 				; put cursor at xCursor,yCursor
.aab5	48		pha				pha
.aab6	ad 01 02	lda $0201			lda 	IFT_YCursor
.aab9	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.aabc	68		pla				pla
.aabd	aa		tax				tax
.aabe	e0 00		cpx #$00			cpx 	#0
.aac0	f0 88		beq $aa4a			beq 	_IFT_RLLoop
.aac2					_IFT_MoveRight:
.aac2	20 21 a0	jsr $a021			jsr 	IF_Read
.aac5	ee 00 02	inc $0200			inc 	IFT_XCursor
.aac8	ca		dex				dex
.aac9	d0 f7		bne $aac2			bne 	_IFT_MoveRight
.aacb	4c 4a aa	jmp $aa4a			jmp 	_IFT_RLLoop
.aace					_IFT_RLExit:
.aace	ad 01 02	lda $0201			lda 	IFT_YCursor 				; go to start of line.
.aad1	20 1a aa	jsr $aa1a			jsr 	IFT_SetYPos
.aad4	a2 00		ldx #$00			ldx 	#0 							; read text into line.
.aad6					_IFT_RLRead:
.aad6	20 21 a0	jsr $a021			jsr 	IF_Read
.aad9	18		clc				clc 								; convert back to ASCII.
.aada	49 20		eor #$20			eor 	#$20
.aadc	69 20		adc #$20			adc 	#$20
.aade	9d 80 02	sta $0280,x			sta 	IFT_LineBuffer,x
.aae1	e8		inx				inx
.aae2	e0 50		cpx #$50			cpx 	#IF_Width
.aae4	d0 f0		bne $aad6			bne 	_IFT_RLRead
.aae6					_IFT_RL_Trim:
.aae6	ca		dex				dex 	 							; previous char
.aae7	30 07		bmi $aaf0			bmi 	_IFT_Found 					; gone too far
.aae9	bd 80 02	lda $0280,x			lda 	IFT_LineBuffer,x			; go back if space
.aaec	c9 20		cmp #$20			cmp 	#" "
.aaee	f0 f6		beq $aae6			beq 	_IFT_RL_Trim
.aaf0					_IFT_Found:
.aaf0	e8		inx				inx 								; forward to non-space
.aaf1	a9 00		lda #$00			lda 	#0							; make it ASCIIZ
.aaf3	9d 80 02	sta $0280,x			sta 	IFT_LineBuffer,x
.aaf6	68		pla				pla
.aaf7	a2 80		ldx #$80			ldx 	#IFT_LineBuffer & $FF 		; put address in YX
.aaf9	a0 02		ldy #$02			ldy 	#IFT_LineBuffer >> 8
.aafb	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: utility/tim.asm

.aafc					TIM_Error:
.aafc	20 83 a9	jsr $a983			jsr 	IFT_UpLine 					; go up one line.
.aaff	a9 3f		lda #$3f			lda 	#"?"						; ? prompt
.ab01	80 02		bra $ab05			bra 	TIM_ShowPrompt
.ab03					TIM_NewCommand:
.ab03	a9 2e		lda #$2e			lda 	#"."						; dot prompt
.ab05					TIM_ShowPrompt:
.ab05	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter			; display . or ? prompt.
.ab08	20 49 aa	jsr $aa49			jsr 	IFT_ReadLine	 			; get character, go to next line
.ab0b	20 ab a9	jsr $a9ab			jsr 	IFT_NewLine					; go to next line.
.ab0e	86 20		stx $20				stx 	zTemp1 						; save line read address
.ab10	84 21		sty $21				sty 	zTemp1+1
.ab12	a0 01		ldy #$01			ldy 	#1 							; get first character after the prompt.
.ab14	b1 20		lda ($20),y			lda 	(zTemp1),y
.ab16	c9 52		cmp #$52			cmp 	#"R"						; show registers
.ab18	f0 6e		beq $ab88			beq 	TIM_ShowRegisters
.ab1a	c9 4d		cmp #$4d			cmp 	#"M" 						; show memory
.ab1c	f0 12		beq $ab30			beq 	TIM_ShowMemory
.ab1e	c9 47		cmp #$47			cmp 	#"G"						; execute
.ab20	f0 49		beq $ab6b			beq 	TIM_Execute
.ab22	c9 3a		cmp #$3a			cmp 	#":"						; load memory
.ab24	f0 07		beq $ab2d			beq 	TIM_GoLoadMemory
.ab26	c9 3b		cmp #$3b			cmp 	#";" 						; load registers
.ab28	d0 d2		bne $aafc			bne 	TIM_Error
.ab2a	4c ac ac	jmp $acac			jmp 	TIM_UpdateRegisters
.ab2d					TIM_GoLoadMemory:
.ab2d	4c d7 ac	jmp $acd7			jmp 	TIM_LoadMemory
.ab30					TIM_ShowMemory:
.ab30	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.ab33	b0 c7		bcs $aafc			bcs 	TIM_Error
.ab35	a5 24		lda $24				lda 	zTemp3 						; copy zTemp3 => zTemp2
.ab37	85 22		sta $22				sta 	zTemp2
.ab39	a5 25		lda $25				lda 	zTemp3+1
.ab3b	85 23		sta $23				sta 	zTemp2+1
.ab3d	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; get a hex value out => zTemp3
.ab40	90 08		bcc $ab4a			bcc 	_TIMSM_Start 				; okay, display zTemp2 ... zTemp3 as value ok
.ab42	a5 22		lda $22				lda 	zTemp2 						; single value set zTemp2 => zTemp3 so just one line.
.ab44	85 24		sta $24				sta 	zTemp3
.ab46	a5 23		lda $23				lda 	zTemp2+1
.ab48	85 25		sta $25				sta 	zTemp3+1
.ab4a					_TIMSM_Start:
.ab4a	20 fd ab	jsr $abfd			jsr 	TIM_WriteLine 				; write one line of hex out
.ab4d	a5 22		lda $22				lda 	zTemp2 						; bump ZTemp2 by 16
.ab4f	18		clc				clc
.ab50	69 10		adc #$10			adc 	#16
.ab52	85 22		sta $22				sta 	zTemp2
.ab54	90 02		bcc $ab58			bcc 	_TIMSM_NoCarry
.ab56	e6 23		inc $23				inc 	zTemp2+1
.ab58					_TIMSM_NoCarry:
.ab58	20 36 a0	jsr $a036			jsr 	IF_CheckBreak 				; check CTL+C
.ab5b	d0 0b		bne $ab68			bne 	_TIMSM_Ends 				; if pressed break out.
.ab5d	38		sec				sec 								; check past the end address in zTemp3
.ab5e	a5 24		lda $24				lda 	zTemp3
.ab60	e5 22		sbc $22				sbc 	zTemp2
.ab62	a5 25		lda $25				lda 	zTemp3+1
.ab64	e5 23		sbc $23				sbc 	zTemp2+1
.ab66	10 e2		bpl $ab4a			bpl 	_TIMSM_Start
.ab68					_TIMSM_Ends:
.ab68	4c 03 ab	jmp $ab03			jmp 	TIM_NewCommand
.ab6b					TIM_Execute:
.ab6b	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; get the execute address
.ab6e	b0 8c		bcs $aafc			bcs 	TIM_Error 					; not legitimate
.ab70	ae 2c 03	ldx $032c			ldx 	TIM_SP 						; set up SP
.ab73	9a		txs				txs
.ab74	ad 27 03	lda $0327			lda 	TIM_SR 						; Status for PLP
.ab77	48		pha				pha
.ab78	ad 28 03	lda $0328			lda 	TIM_A 						; restore AXYZ
.ab7b	ae 29 03	ldx $0329			ldx 	TIM_X
.ab7e	ac 2a 03	ldy $032a			ldy 	TIM_Y
.ab81	ab 2b 03	ldz $032b			ldz 	TIM_Z
.ab84	28		plp				plp 								; and PS Byte.
.ab85	6c 24 00	jmp ($0024)			jmp 	(zTemp3)					; go execute
.ab88					TIM_Start:
.ab88					TIM_ShowRegisters:
.ab88	ad fe ff	lda $fffe			lda 	$FFFE 						; copy IRQx which is in ROM.
.ab8b	8d 26 03	sta $0326			sta 	TIM_IRQ+1
.ab8e	ad ff ff	lda $ffff			lda 	$FFFF
.ab91	8d 25 03	sta $0325			sta 	TIM_IRQ
.ab94	a2 00		ldx #$00			ldx 	#0 							; display register prompt
.ab96					_TIMSR_Text:
.ab96	bd c1 ab	lda $abc1,x			lda 	_TIMSR_Label,x
.ab99	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.ab9c	e8		inx				inx
.ab9d	e0 23		cpx #$23			cpx 	#_TIMSR_LabelEnd-_TIMSR_Label
.ab9f	d0 f5		bne $ab96			bne 	_TIMSR_Text
.aba1	a2 00		ldx #$00			ldx 	#0 							; output Register Line.
.aba3					_TIMSR_LoopSpace:
.aba3	e0 04		cpx #$04			cpx 	#4 							; this checks if we need a space to
.aba5	b0 04		bcs $abab			bcs 	_TIMSR_Space 				; batten the 16 bit registers together.
.aba7	8a		txa				txa
.aba8	4a		lsr a				lsr 	a
.aba9	b0 05		bcs $abb0			bcs 	_TIMSR_NoSpace
.abab					_TIMSR_Space:
.abab	a9 20		lda #$20			lda 	#" "
.abad	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.abb0					_TIMSR_NoSpace:
.abb0	bd 23 03	lda $0323,x			lda 	TIM_PC,x 					; output hex value.
.abb3	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.abb6	e8		inx				inx
.abb7	e0 0a		cpx #$0a			cpx 	#TIM_SP-TIM_PC+1
.abb9	d0 e8		bne $aba3			bne 	_TimSR_LoopSpace
.abbb	20 ab a9	jsr $a9ab			jsr 	IFT_NewLine 				; new line
.abbe	4c 03 ab	jmp $ab03			jmp	 	TIM_NewCommand 				; new command.
.abc1					_TIMSR_Label:
>abc1	20 20 20 20 50 43 20 20				.text 	"    PC   IRQ  SR AC XR YR ZR SP",13,".; "
>abc9	20 49 52 51 20 20 53 52 20 41 43 20 58 52 20 59
>abd9	52 20 5a 52 20 53 50 0d 2e 3b 20
.abe4					_TIMSR_LabelEnd:
.abe4					TIM_WriteHex:
.abe4	48		pha				pha 								; save A
.abe5	4a		lsr a				lsr 	a 							; shift MSB->LSB
.abe6	4a		lsr a				lsr 	a
.abe7	4a		lsr a				lsr 	a
.abe8	4a		lsr a				lsr 	a
.abe9	20 ed ab	jsr $abed			jsr 	_TIMWH_Nibble 				; print MSB
.abec	68		pla				pla 								; restore and print LSB
.abed					_TIMWH_Nibble:
.abed	48		pha				pha
.abee	29 0f		and #$0f			and 	#15 						; mask out
.abf0	c9 0a		cmp #$0a			cmp 	#10 						; convert to ASCII
.abf2	90 02		bcc $abf6			bcc 	_TIMWHNoLetter
.abf4	69 06		adc #$06			adc 	#6
.abf6					_TIMWHNoLetter:
.abf6	69 30		adc #$30			adc 	#48
.abf8	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter 			; print it out.
.abfb	68		pla				pla
.abfc	60		rts				rts
.abfd					TIM_WriteLine:
.abfd	a9 2e		lda #$2e			lda 	#"." 						; prompt
.abff	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.ac02	a9 3a		lda #$3a			lda 	#":" 						; input line command so we can edit it
.ac04	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.ac07	a5 23		lda $23				lda 	zTemp2+1 					; write address
.ac09	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.ac0c	a5 22		lda $22				lda 	zTemp2
.ac0e	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.ac11	a0 00		ldy #$00			ldy 	#0							; write 16 bytes of data from (zTemp2)
.ac13					_TIMWL_Loop:
.ac13	a9 20		lda #$20			lda 	#" "
.ac15	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.ac18	b1 22		lda ($22),y			lda 	(zTemp2),y
.ac1a	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.ac1d	c8		iny				iny
.ac1e	c0 10		cpy #$10			cpy 	#16
.ac20	d0 f1		bne $ac13			bne 	_TIMWL_Loop
.ac22	4c ab a9	jmp $a9ab			jmp 	IFT_NewLine 				; new line and exit
.ac25					TIM_GetHex:
.ac25	c8		iny				iny
.ac26	b1 20		lda ($20),y			lda 	(zTemp1),y 					; skip over spaces.
.ac28	c9 20		cmp #$20			cmp 	#32
.ac2a	f0 f9		beq $ac25			beq 	TIM_GetHex
.ac2c	c9 2c		cmp #$2c			cmp 	#"," 						; skip over commas
.ac2e	f0 f5		beq $ac25			beq 	TIM_GetHex
.ac30	20 59 ac	jsr $ac59			jsr 	TIM_GetHexCharacter 		; extract one hex character.
.ac33	b0 23		bcs $ac58			bcs 	_TIMGH_Exit					; if first bad then exit now.
.ac35	a9 00		lda #$00			lda 	#0 							; zero result
.ac37	85 24		sta $24				sta 	zTemp3
.ac39	85 25		sta $25				sta 	zTemp3+1
.ac3b					_TIM_GHLoop:
.ac3b	20 59 ac	jsr $ac59			jsr 	TIM_GetHexCharacter 		; get next character
.ac3e	b0 17		bcs $ac57			bcs 	_TIMGH_Okay 				; if bad, exit as we have one good one.
.ac40	c8		iny				iny 								; skip over it.
.ac41	06 24		asl $24				asl 	zTemp3 						; x zTemp3 by 16
.ac43	26 25		rol $25				rol 	zTemp3+1
.ac45	06 24		asl $24				asl 	zTemp3 						; now x 2
.ac47	26 25		rol $25				rol 	zTemp3+1
.ac49	06 24		asl $24				asl 	zTemp3						; now x 4
.ac4b	26 25		rol $25				rol 	zTemp3+1
.ac4d	06 24		asl $24				asl 	zTemp3 						; now x 8
.ac4f	26 25		rol $25				rol 	zTemp3+1
.ac51	05 24		ora $24				ora 	zTemp3 						; OR result in
.ac53	85 24		sta $24				sta 	zTemp3
.ac55	80 e4		bra $ac3b			bra 	_TIM_GHLoop 				; loop round again.
.ac57					_TIMGH_Okay:
.ac57	18		clc				clc
.ac58					_TIMGH_Exit:
.ac58	60		rts				rts
.ac59					TIM_GetHexCharacter:
.ac59	b1 20		lda ($20),y			lda 	(zTemp1),y
.ac5b	38		sec				sec
.ac5c	e9 30		sbc #$30			sbc 	#"0" 						; < 0 exit with CS
.ac5e	90 0e		bcc $ac6e			bcc 	_TIM_GHCFail
.ac60	c9 0a		cmp #$0a			cmp 	#10 						; 0-9 exit with CC
.ac62	90 0b		bcc $ac6f			bcc 	_TIM_GHCExit
.ac64	c9 11		cmp #$11			cmp 	#65-48						; < A
.ac66	90 06		bcc $ac6e			bcc		_TIM_GHCFail
.ac68	e9 07		sbc #$07			sbc 	#7 							; adjust for gap from 9-A
.ac6a	c9 10		cmp #$10			cmp 	#16 						; result in range okay.
.ac6c	90 01		bcc $ac6f			bcc		_TIM_GHCExit
.ac6e					_TIM_GHCFail:
.ac6e	38		sec				sec
.ac6f					_TIM_GHCExit:
.ac6f	60		rts				rts
.ac70					TIM_BreakVector:
.ac70	da		phx				phx									; save X/A on stack
.ac71	48		pha				pha
.ac72	ba		tsx				tsx 								; X points to S
.ac73	bd 03 01	lda $0103,x			lda 	$0103,x 					; PSW saved on stack, this retrieves it
.ac76	29 10		and #$10			and 	#$10 						; check stacked B Flag - only set on the stacked reg
.ac78	d0 03		bne $ac7d			bne 	_TIMBreak					; if set, it's BRK
.ac7a	68		pla				pla 								; abandon routine.
.ac7b	fa		plx				plx
.ac7c	40		rti				rti
.ac7d					_TIMBreak:
.ac7d	68		pla				pla 								; save A X Y and maybe Z
.ac7e	8d 28 03	sta $0328			sta 	TIM_A
.ac81	fa		plx				plx
.ac82	8e 29 03	stx $0329			stx 	TIM_X
.ac85	8c 2a 03	sty $032a			sty 	TIM_Y
.ac88	9c 2b 03	stz $032b			stz 	TIM_Z
.ac8b	68		pla				pla 								; get Status Register
.ac8c	8d 27 03	sta $0327			sta 	TIM_SR
.ac8f	68		pla				pla
.ac90	8d 24 03	sta $0324			sta 	TIM_PC+1 					; save calling address
.ac93	68		pla				pla
.ac94	8d 23 03	sta $0323			sta 	TIM_PC 						; high byte
.ac97	ad 24 03	lda $0324			lda 	TIM_PC+1 					; dec PC to point right.
.ac9a	d0 03		bne $ac9f			bne 	_TIMDecrement 				; brk bumps it.
.ac9c	ce 23 03	dec $0323			dec 	TIM_PC
.ac9f					_TIMDecrement:
.ac9f	ce 24 03	dec $0324			dec 	TIM_PC+1
.aca2	ba		tsx				tsx 								; and copy SP
.aca3	8e 2c 03	stx $032c			stx 	TIM_SP
.aca6	a2 ff		ldx #$ff			ldx 	#$FF 						; reset SP
.aca8	9a		txs				txs
.aca9	4c 88 ab	jmp $ab88			jmp 	TIM_Start 					; and start up TIM monitor.
.acac					TIM_UpdateRegisters:
.acac	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; PC
.acaf	b0 23		bcs $acd4			bcs 	_TIMURFail
.acb1	a5 24		lda $24				lda 	zTemp3
.acb3	8d 24 03	sta $0324			sta 	Tim_PC+1
.acb6	a5 25		lda $25				lda 	zTemp3+1
.acb8	8d 23 03	sta $0323			sta 	Tim_PC
.acbb	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; ignore IRQ
.acbe	b0 14		bcs $acd4			bcs 	_TIMURFail
.acc0	a2 00		ldx #$00			ldx 	#0
.acc2					_TIM_URLoop:
.acc2	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; registers
.acc5	b0 0d		bcs $acd4			bcs 	_TIMURFail
.acc7	a5 24		lda $24				lda 	zTemp3
.acc9	9d 27 03	sta $0327,x			sta 	Tim_SR,x
.accc	e8		inx				inx
.accd	e0 06		cpx #$06			cpx 	#Tim_SP-Tim_SR+1
.accf	d0 f1		bne $acc2			bne 	_TIM_URLoop
.acd1	4c 03 ab	jmp $ab03			jmp 	TIM_NewCommand
.acd4					_TIMURFail:
.acd4	4c fc aa	jmp $aafc			jmp 	TIM_Error
.acd7					TIM_LoadMemory:
.acd7	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; target address => zTemp2
.acda	a5 24		lda $24				lda 	zTemp3
.acdc	85 22		sta $22				sta 	zTemp2
.acde	a5 25		lda $25				lda 	zTemp3+1
.ace0	85 23		sta $23				sta 	zTemp2+1
.ace2					_TIM_LMLoop:
.ace2	20 25 ac	jsr $ac25			jsr 	TIM_GetHex 					; next byte ?
.ace5	b0 0e		bcs $acf5			bcs 	_TIMLMDone 					; no more
.ace7	a2 00		ldx #$00			ldx 	#0							; write out.
.ace9	a5 24		lda $24				lda 	zTemp3
.aceb	81 22		sta ($22,x)			sta 	(zTemp2,x)
.aced	e6 22		inc $22				inc 	zTemp2 						; bump address
.acef	d0 f1		bne $ace2			bne 	_TIM_LMLoop
.acf1	e6 23		inc $23				inc 	zTemp2+1
.acf3	80 ed		bra $ace2			bra 	_TIM_LMLoop
.acf5					_TIMLMDone:
.acf5	4c 03 ab	jmp $ab03			jmp 	TIM_NewCommand

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpmacros.asm


;******  Return to file: basic.asm


;******  Processing file: arithmetic/fputils.asm

.acf8					FPUSetAFromXY:
.acf8	48		pha				pha
.acf9	86 10		stx $10				stx 	A_Mantissa 					; set the lower 2 bytes
.acfb	84 11		sty $11				sty 	A_Mantissa+1
.acfd	98		tya				tya
.acfe	0a		asl a				asl 	a 							; CS if MSB set.
.acff	a9 00		lda #$00			lda 	#0 							; 0 if CC,$FF if CS
.ad01	90 01		bcc $ad04			bcc 	_FPUSB1
.ad03	3a		dec a				dec 	a
.ad04	85 12		sta $12		_FPUSB1:sta 	A_Mantissa+2 				; these are the two ms bytes
.ad06	85 13		sta $13				sta 	A_Mantissa+3
.ad08	a9 00		lda #$00			lda 	#Type_Integer 				; type is integer.
.ad0a	85 17		sta $17				sta 	A_Type
.ad0c	68		pla				pla
.ad0d	60		rts				rts
.ad0e					FPUSetBFromXY:
.ad0e	48		pha				pha
.ad0f	86 18		stx $18				stx 	B_Mantissa 					; set the lower 2 bytes
.ad11	84 19		sty $19				sty 	B_Mantissa+1
.ad13	98		tya				tya
.ad14	0a		asl a				asl 	a 							; CS if MSB set.
.ad15	a9 00		lda #$00			lda 	#0 							; 0 if CC,$FF if CS
.ad17	90 01		bcc $ad1a			bcc 	_FPUSB1
.ad19	3a		dec a				dec 	a
.ad1a	85 1a		sta $1a		_FPUSB1:sta 	B_Mantissa+2 				; these are the two ms bytes
.ad1c	85 1b		sta $1b				sta 	B_Mantissa+3
.ad1e	a9 00		lda #$00			lda 	#Type_Integer 				; type is integer.
.ad20	85 1f		sta $1f				sta 	B_Type
.ad22	68		pla				pla
.ad23	60		rts				rts
.ad24					FPUCopyAToB:
.ad24	48		pha				pha 								; copy the 8 byte format across.
.ad25	da		phx				phx
.ad26	a2 07		ldx #$07			ldx 	#7
.ad28					_FPUCopy2:
.ad28	b5 10		lda $10,x			lda 	A_Mantissa,x
.ad2a	95 18		sta $18,x			sta 	B_Mantissa,x
.ad2c	ca		dex				dex
.ad2d	10 f9		bpl $ad28			bpl 	_FPUCopy2
.ad2f	fa		plx				plx
.ad30	68		pla				pla
.ad31	60		rts				rts
.ad32					FPUCopyBToA:
.ad32	48		pha				pha 								; copy the 8 byte format across.
.ad33	da		phx				phx
.ad34	a2 07		ldx #$07			ldx 	#7
.ad36					_FPUCopy1:
.ad36	b5 18		lda $18,x			lda 	B_Mantissa,x
.ad38	95 10		sta $10,x			sta 	A_Mantissa,x
.ad3a	ca		dex				dex
.ad3b	10 f9		bpl $ad36			bpl 	_FPUCopy1
.ad3d	fa		plx				plx
.ad3e	68		pla				pla
.ad3f	60		rts				rts
.ad40					FPUToFloatX:
.ad40	48		pha				pha
.ad41	b5 17		lda $17,x			lda 	A_Type,x					; exit if already float.
.ad43	30 26		bmi $ad6b			bmi 	_FPUBExit
.ad45	a9 80		lda #$80			lda 	#Type_Float 				; set float type
.ad47	95 17		sta $17,x			sta 	A_Type,x
.ad49	a9 20		lda #$20			lda 	#32 						; and the exponent to 32, makes it * 2^32
.ad4b	95 14		sta $14,x			sta 	A_Exponent,x
.ad4d	a9 00		lda #$00			lda 	#0 							; clear sign/zero bytes
.ad4f	95 15		sta $15,x			sta 	A_Sign,x
.ad51	95 16		sta $16,x			sta		A_Zero,x
.ad53	b5 13		lda $13,x			lda 	A_Mantissa+3,x 				; signed integer ?
.ad55	10 05		bpl $ad5c			bpl		_FPUBPositive
.ad57	20 34 ae	jsr $ae34			jsr 	FPUIntegerNegateX 			; do B = -B in integer, so +ve mantissa
.ad5a	d6 15		dec $15,x			dec 	A_Sign,x 					; set the sign byte to $FF
.ad5c					_FPUBPositive:
.ad5c	b5 10		lda $10,x			lda 	A_Mantissa,x 				; mantissa is zero ?
.ad5e	15 11		ora $11,x			ora 	A_Mantissa+1,x
.ad60	15 12		ora $12,x			ora 	A_Mantissa+2,x
.ad62	15 13		ora $13,x			ora 	A_Mantissa+3,x
.ad64	d0 02		bne $ad68			bne 	_FPUBNonZero
.ad66	d6 16		dec $16,x			dec 	A_Zero,x 					; set the zero byte to $FF
.ad68					_FPUBNonZero:
.ad68	20 17 ae	jsr $ae17			jsr 	FPUNormaliseX
.ad6b					_FPUBExit:
.ad6b	68		pla				pla
.ad6c	60		rts				rts
.ad6d					FPUAToInteger:
.ad6d	48		pha				pha
.ad6e	a5 17		lda $17				lda 	A_Type 						; if already integer, exit
.ad70	f0 39		beq $adab			beq 	_FPUATOI_Exit
.ad72	a9 00		lda #$00			lda 	#Type_Integer 				; make type zero (integer)
.ad74	85 17		sta $17				sta 	A_Type
.ad76	a5 16		lda $16				lda 	A_Zero						; if zero, return zero.
.ad78	d0 27		bne $ada1			bne 	_FPUATOI_Zero
.ad7a	a5 14		lda $14				lda 	A_Exponent 					; check -ve exponent or < 32
.ad7c	30 04		bmi $ad82			bmi 	_FPUAToIOk
.ad7e	c9 20		cmp #$20			cmp 	#32 						; sign exponent >= 32, overflow.
.ad80	b0 2b		bcs $adad			bcs 	FP_Overflow
.ad82					_FPUAToIOk:
.ad82					_FPUAToIToInteger:
.ad82	a5 14		lda $14				lda 	A_Exponent 					; reached ^32
.ad84	c9 20		cmp #$20			cmp 	#32
.ad86	f0 0c		beq $ad94			beq 	_FPUAtoICheckSign 			; check sign needs fixing up.
.ad88	e6 14		inc $14				inc 	A_Exponent 					; increment Exponent
.ad8a	46 13		lsr $13				lsr 	3+A_Mantissa
.ad8c	66 12		ror $12				ror 	2+A_Mantissa
.ad8e	66 11		ror $11				ror 	1+A_Mantissa
.ad90	66 10		ror $10				ror 	0+A_Mantissa
.ad92	80 ee		bra $ad82			bra 	_FPUAToIToInteger 			; keep going.
.ad94					_FPUAtoICheckSign:
.ad94	a5 15		lda $15				lda 	A_Sign 						; check sign
.ad96	f0 13		beq $adab			beq 	_FPUAToI_Exit 				; exit if unsigned.
.ad98	da		phx				phx
.ad99	a2 00		ldx #$00			ldx 	#0
.ad9b	20 34 ae	jsr $ae34			jsr 	FPUIntegerNegateX 			; otherwise negate the shifted mantissa
.ad9e	fa		plx				plx
.ad9f	80 0a		bra $adab			bra 	_FPUATOI_Exit
.ada1					_FPUATOI_Zero:
.ada1	a9 00		lda #$00			lda 	#0 							; return zero integer.
.ada3	85 10		sta $10				sta 	A_Mantissa+0
.ada5	85 11		sta $11				sta 	A_Mantissa+1
.ada7	85 12		sta $12				sta 	A_Mantissa+2
.ada9	85 13		sta $13				sta 	A_Mantissa+3
.adab					_FPUATOI_Exit:
.adab	68		pla				pla
.adac	60		rts				rts
.adad					FP_Overflow:
.adad	20 ad e4	jsr $e4ad			jsr 	ERR_Handler
>adb0	46 6c 6f 61 74 69 6e 67				.text 	"Floating Point overflow",0
>adb8	20 50 6f 69 6e 74 20 6f 76 65 72 66 6c 6f 77 00
.adc8					FPUTimes10X:
.adc8	b5 10		lda $10,x			lda 	A_Mantissa+0,x 				; copy mantissa to ZLTemp1
.adca	85 26		sta $26				sta 	ZLTemp1+0
.adcc	b5 11		lda $11,x			lda 	A_Mantissa+1,x
.adce	85 27		sta $27				sta 	ZLTemp1+1
.add0	b5 12		lda $12,x			lda 	A_Mantissa+2,x
.add2	85 28		sta $28				sta 	ZLTemp1+2
.add4	b5 13		lda $13,x			lda 	A_Mantissa+3,x
.add6	85 29		sta $29				sta 	ZLTemp1+3
.add8	46 29		lsr $29				lsr 	3+ZLTemp1
.adda	66 28		ror $28				ror 	2+ZLTemp1
.addc	66 27		ror $27				ror 	1+ZLTemp1
.adde	66 26		ror $26				ror 	0+ZLTemp1
.ade0	46 29		lsr $29				lsr 	3+ZLTemp1
.ade2	66 28		ror $28				ror 	2+ZLTemp1
.ade4	66 27		ror $27				ror 	1+ZLTemp1
.ade6	66 26		ror $26				ror 	0+ZLTemp1
.ade8	18		clc				clc
.ade9	b5 10		lda $10,x			lda 	A_Mantissa+0,x
.adeb	65 26		adc $26				adc 	ZLTemp1+0
.aded	95 10		sta $10,x			sta 	A_Mantissa+0,x
.adef	b5 11		lda $11,x			lda 	A_Mantissa+1,x
.adf1	65 27		adc $27				adc 	ZLTemp1+1
.adf3	95 11		sta $11,x			sta 	A_Mantissa+1,x
.adf5	b5 12		lda $12,x			lda 	A_Mantissa+2,x
.adf7	65 28		adc $28				adc 	ZLTemp1+2
.adf9	95 12		sta $12,x			sta 	A_Mantissa+2,x
.adfb	b5 13		lda $13,x			lda 	A_Mantissa+3,x
.adfd	65 29		adc $29				adc 	ZLTemp1+3
.adff	95 13		sta $13,x			sta 	A_Mantissa+3,x
.ae01	90 0a		bcc $ae0d			bcc 	_FPUTimes10
.ae03	76 13		ror $13,x			ror 	3+A_Mantissa,x
.ae05	76 12		ror $12,x			ror 	2+A_Mantissa,x
.ae07	76 11		ror $11,x			ror 	1+A_Mantissa,x
.ae09	76 10		ror $10,x			ror 	0+A_Mantissa,x
.ae0b	f6 14		inc $14,x			inc 	A_Exponent,x				; fix exponent
.ae0d					_FPUTimes10:
.ae0d	b5 14		lda $14,x			lda 	A_Exponent,x 				; fix up x 2^3
.ae0f	18		clc				clc
.ae10	69 03		adc #$03			adc 	#3
.ae12	95 14		sta $14,x			sta 	A_Exponent,x
.ae14	70 97		bvs $adad			bvs 	FP_Overflow 				; error
.ae16	60		rts				rts
.ae17					FPUNormaliseX:
.ae17	48		pha				pha
.ae18	b5 16		lda $16,x			lda 	A_Zero,x 					; if float-zero, don't need to normalise it.
.ae1a	d0 16		bne $ae32			bne 	_FPUNExit
.ae1c					_FPULoop:
.ae1c	b5 13		lda $13,x			lda 	A_Mantissa+3,x 				; bit 31 of mantissa set.
.ae1e	30 12		bmi $ae32			bmi 	_FPUNExit 					; if so, we are normalised.
.ae20	16 10		asl $10,x			asl 	0+A_Mantissa+0,x
.ae22	36 11		rol $11,x			rol 	1+A_Mantissa+0,x
.ae24	36 12		rol $12,x			rol 	2+A_Mantissa+0,x
.ae26	36 13		rol $13,x			rol 	3+A_Mantissa+0,x
.ae28	d6 14		dec $14,x			dec 	A_Exponent,x 				; decrement exponent
.ae2a	b5 14		lda $14,x			lda 	A_Exponent,x 				; if exponent not $7F (e.g. gone < -$80)
.ae2c	c9 7f		cmp #$7f			cmp 	#$7F
.ae2e	d0 ec		bne $ae1c			bne 	_FPULoop
.ae30	d6 16		dec $16,x			dec 	A_Zero,x 					; the result is now zero.
.ae32					_FPUNExit:
.ae32	68		pla				pla
.ae33	60		rts				rts
.ae34					FPUIntegerNegateX:
.ae34	48		pha				pha
.ae35	38		sec				sec
.ae36	a9 00		lda #$00			lda 	#0
.ae38	f5 10		sbc $10,x			sbc 	A_Mantissa+0,x
.ae3a	95 10		sta $10,x			sta 	A_Mantissa+0,x
.ae3c	a9 00		lda #$00			lda 	#0
.ae3e	f5 11		sbc $11,x			sbc 	A_Mantissa+1,x
.ae40	95 11		sta $11,x			sta 	A_Mantissa+1,x
.ae42	a9 00		lda #$00			lda 	#0
.ae44	f5 12		sbc $12,x			sbc 	A_Mantissa+2,x
.ae46	95 12		sta $12,x			sta 	A_Mantissa+2,x
.ae48	a9 00		lda #$00			lda 	#0
.ae4a	f5 13		sbc $13,x			sbc 	A_Mantissa+3,x
.ae4c	95 13		sta $13,x			sta 	A_Mantissa+3,X
.ae4e	68		pla				pla
.ae4f	60		rts				rts
.ae50					FPCompare:
.ae50	a5 14		lda $14				lda 	A_Exponent 					; save the exponents on the stack
.ae52	48		pha				pha
.ae53	a5 1c		lda $1c				lda 	B_Exponent
.ae55	48		pha				pha
.ae56	20 94 ae	jsr $ae94			jsr 	FPSubtract 					; calculate A-B
.ae59	a5 16		lda $16				lda 	A_Zero 						; is the result zero ?
.ae5b	d0 32		bne $ae8f			bne 	_FPCPullZero 				; if so, then return zero throwing saved exp
.ae5d	68		pla				pla
.ae5e	85 18		sta $18				sta 	B_Mantissa 					; BM+0 is BX
.ae60	68		pla				pla
.ae61	85 19		sta $19				sta 	B_Mantissa+1 				; BM+1 is AX
.ae63	38		sec				sec
.ae64	e5 18		sbc $18				sbc 	B_Mantissa 					; AX-BX
.ae66	70 1f		bvs $ae87			bvs 	_FPCNotEqual				; overflow, can't be equal.
.ae68	1a		inc a				inc 	a 							; map -1,0,1 to 0,1,2
.ae69	c9 03		cmp #$03			cmp 	#3 							; if >= 3 e.g. abs difference > 1
.ae6b	b0 1a		bcs $ae87			bcs 	_FPCNotEqual
.ae6d	18		clc				clc
.ae6e	a5 18		lda $18				lda 	B_Mantissa 					; mean of exponents
.ae70	65 19		adc $19				adc 	B_Mantissa+1
.ae72	6a		ror a				ror 	a 							; shift carry out back in.
.ae73	38		sec				sec
.ae74	e9 0c		sbc #$0c			sbc 	#12 						; allow for 2^12 error, relatively, about 4 DP ish.
.ae76	50 02		bvc $ae7a			bvc 	_FPCNotRange 				; keep in range.
.ae78	a9 80		lda #$80			lda 	#$80
.ae7a					_FPCNotRange:
.ae7a	38		sec				sec
.ae7b	e5 14		sbc $14				sbc 	A_Exponent  				; if exponent of difference more than this.
.ae7d	50 02		bvc $ae81			bvc 	_FPCNotOverflow 			; signed comparison
.ae7f	49 80		eor #$80			eor 	#$80
.ae81					_FPCNotOverflow:
.ae81	30 04		bmi $ae87			bmi 	_FPCNotEqual 				; then error is too large, so return -1 or 1
.ae83	a9 00		lda #$00			lda 	#0 							; "approximately equal" allowing for rounding
.ae85	80 0c		bra $ae93			bra 	_FPCExit 					; errors.
.ae87					_FPCNotEqual:
.ae87	a5 15		lda $15				lda 	A_Sign 						; if sign is -ve , will be $FF, so return $FF
.ae89	d0 08		bne $ae93			bne 	_FPCExit
.ae8b	a9 01		lda #$01			lda 	#1 							; otherwise return $01 as not zero.
.ae8d	80 04		bra $ae93			bra 	_FPCExit
.ae8f					_FPCPullZero:
.ae8f	68		pla				pla 								; throw saved exponents
.ae90	68		pla				pla
.ae91	a9 00		lda #$00			lda 	#0 							; and return zero
.ae93					_FPCExit:
.ae93	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpadd.asm

.ae94					FPSubtract:
.ae94	48		pha				pha
.ae95	a5 1d		lda $1d				lda 	B_Sign 						; flip the sign of B and add
.ae97	49 ff		eor #$ff			eor 	#$FF
.ae99	85 1d		sta $1d				sta 	B_Sign
.ae9b	68		pla				pla
.ae9c					FPAdd:
.ae9c	48		pha				pha
.ae9d	da		phx				phx
.ae9e	a5 15		lda $15				lda 	A_Sign 						; if A is -ve, specialised code
.aea0	d0 06		bne $aea8			bne 	_FPA_NegativeLHS
.aea2	20 c0 ae	jsr $aec0			jsr 	FPAdd_Worker 				; if +ve use standard worker unchanged.
.aea5	fa		plx				plx
.aea6	68		pla				pla
.aea7	60		rts				rts
.aea8					_FPA_NegativeLHS:
.aea8	a5 15		lda $15				lda 	A_Sign 						; flip A and B signs
.aeaa	49 ff		eor #$ff			eor 	#$FF
.aeac	85 15		sta $15				sta 	A_Sign
.aeae	a5 1d		lda $1d				lda 	B_Sign
.aeb0	49 ff		eor #$ff			eor 	#$FF
.aeb2	85 1d		sta $1d				sta 	B_Sign 						; so now it's A +- B
.aeb4	20 c0 ae	jsr $aec0			jsr 	FPAdd_Worker
.aeb7	a5 15		lda $15				lda 	A_Sign 						; and flip the result sign
.aeb9	49 ff		eor #$ff			eor 	#$FF
.aebb	85 15		sta $15				sta 	A_Sign
.aebd	fa		plx				plx
.aebe	68		pla				pla
.aebf	60		rts				rts
.aec0					FPAdd_Worker:
.aec0	a5 1e		lda $1e				lda 	B_Zero 						; if B is zero (e.g. adding zero)
.aec2	d0 78		bne $af3c			bne 	_FPAWExit 					; no change.
.aec4	a5 16		lda $16				lda 	A_Zero 						; if A is zero (e.g. 0 + B)
.aec6	d0 71		bne $af39			bne 	_FPAWReturnB 				; then return B.
.aec8					_FPAWMakeSame:
.aec8	a2 00		ldx #$00			ldx 	#0 							; shift offset, this is to shift A.
.aeca	a5 14		lda $14				lda 	A_Exponent 					; check if exponents are the same.
.aecc	38		sec				sec
.aecd	e5 1c		sbc $1c				sbc	 	B_Exponent
.aecf	f0 14		beq $aee5			beq 	_FPAW_DoArithmetic 			; if they are,
.aed1	50 02		bvc $aed5			bvc 	_FPAWNoOverflow 			; make it a signed comparison.
.aed3	49 80		eor #$80			eor 	#$80
.aed5					_FPAWNoOverflow:
.aed5	30 02		bmi $aed9			bmi 	_FPAWShiftA 				; if eA < eB then shift A
.aed7	a2 08		ldx #$08			ldx 	#B_Mantissa-A_Mantissa 		; if eA > eB then shift B
.aed9					_FPAWShiftA:
.aed9	f6 14		inc $14,x			inc 	A_Exponent,x 				; so shift exponent up.
.aedb	56 13		lsr $13,x			lsr 	3+A_Mantissa,x
.aedd	76 12		ror $12,x			ror 	2+A_Mantissa,x
.aedf	76 11		ror $11,x			ror 	1+A_Mantissa,x
.aee1	76 10		ror $10,x			ror 	0+A_Mantissa,x
.aee3	80 e3		bra $aec8			bra 	_FPAWMakeSame 				; keep going till exponents are the same.
.aee5					_FPAW_DoArithmetic:
.aee5	a5 1d		lda $1d				lda 	B_Sign 						; is it adding a negative to a positive
.aee7	d0 28		bne $af11			bne 	_FPAW_BNegative
.aee9	18		clc				clc
.aeea	a5 10		lda $10				lda 	A_Mantissa+0
.aeec	65 18		adc $18				adc 	B_Mantissa+0
.aeee	85 10		sta $10				sta 	A_Mantissa+0
.aef0	a5 11		lda $11				lda 	A_Mantissa+1
.aef2	65 19		adc $19				adc 	B_Mantissa+1
.aef4	85 11		sta $11				sta 	A_Mantissa+1
.aef6	a5 12		lda $12				lda 	A_Mantissa+2
.aef8	65 1a		adc $1a				adc 	B_Mantissa+2
.aefa	85 12		sta $12				sta 	A_Mantissa+2
.aefc	a5 13		lda $13				lda 	A_Mantissa+3
.aefe	65 1b		adc $1b				adc 	B_Mantissa+3
.af00	85 13		sta $13				sta 	A_Mantissa+3
.af02	90 38		bcc $af3c			bcc 	_FPAWExit 					; no carry.
.af04	e6 14		inc $14				inc 	A_Exponent 					; so shift exponent up.
.af06	38		sec				sec
.af07	66 13		ror $13				ror 	3+A_Mantissa
.af09	66 12		ror $12				ror 	2+A_Mantissa
.af0b	66 11		ror $11				ror 	1+A_Mantissa
.af0d	66 10		ror $10				ror 	0+A_Mantissa
.af0f	80 2b		bra $af3c			bra 	_FPAWExit
.af11					_FPAW_BNegative:
.af11	38		sec				sec
.af12	a5 10		lda $10				lda 	A_Mantissa+0
.af14	e5 18		sbc $18				sbc 	B_Mantissa+0
.af16	85 10		sta $10				sta 	A_Mantissa+0
.af18	a5 11		lda $11				lda 	A_Mantissa+1
.af1a	e5 19		sbc $19				sbc 	B_Mantissa+1
.af1c	85 11		sta $11				sta 	A_Mantissa+1
.af1e	a5 12		lda $12				lda 	A_Mantissa+2
.af20	e5 1a		sbc $1a				sbc 	B_Mantissa+2
.af22	85 12		sta $12				sta 	A_Mantissa+2
.af24	a5 13		lda $13				lda 	A_Mantissa+3
.af26	e5 1b		sbc $1b				sbc 	B_Mantissa+3
.af28	85 13		sta $13				sta 	A_Mantissa+3
.af2a	b0 10		bcs $af3c			bcs		_FPAWExit 					; no borrow.
.af2c	a2 00		ldx #$00			ldx 	#0  						; negate the mantissa
.af2e	20 34 ae	jsr $ae34			jsr 	FPUIntegerNegateX
.af31	a5 15		lda $15				lda 	A_Sign 						; flip result sign
.af33	49 ff		eor #$ff			eor 	#$FF
.af35	85 15		sta $15				sta 	A_Sign
.af37	80 03		bra $af3c			bra 	_FPAWExit
.af39					_FPAWReturnB:
.af39	20 32 ad	jsr $ad32			jsr 	FPUCopyBToA 				; copy B into A
.af3c					_FPAWExit:
.af3c	a2 00		ldx #$00			ldx 	#0 							; normalise A
.af3e	20 17 ae	jsr $ae17			jsr 	FPUNormaliseX
.af41	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpmultiply.asm

.af42					FPMultiply:
.af42	48		pha				pha
.af43	da		phx				phx
.af44	a5 1e		lda $1e				lda		B_Zero 						; if B = 0, return B unchanged
.af46	d0 6e		bne $afb6			bne 	_FPM_ReturnB
.af48	a5 16		lda $16				lda 	A_Zero 						; if A = 0, return A
.af4a	d0 6d		bne $afb9			bne 	_FPM_Exit
.af4c	a5 14		lda $14				lda 	A_Exponent					; add their exponents
.af4e	18		clc				clc
.af4f	65 1c		adc $1c				adc 	B_Exponent
.af51	85 14		sta $14				sta 	A_Exponent 					; exponent of result.
.af53	10 05		bpl $af5a			bpl 	_FPM_NoOverflow 			; error if -ve result and overflow.
.af55	50 03		bvc $af5a			bvc 	_FPM_NoOverflow
.af57	4c ad ad	jmp $adad			jmp 	FP_Overflow
.af5a					_FPM_NoOverflow:
.af5a	a9 00		lda #$00			lda 	#0
.af5c	85 26		sta $26				sta 	zLTemp1+0 					; clear the long temp which is upper word of
.af5e	85 27		sta $27				sta 	zLTemp1+1 					; long product. lower word is mantissa-A
.af60	85 28		sta $28				sta 	zLTemp1+2 					; multiplicand is mantissa-B
.af62	85 29		sta $29				sta 	zLTemp1+3
.af64	a2 20		ldx #$20			ldx 	#32							; X is loop counter
.af66					_FPM_Loop:
.af66	a5 10		lda $10				lda 	A_Mantissa					; check LSB of long product
.af68	29 01		and #$01			and 	#1
.af6a	18		clc				clc 								; clear carry for the long rotate.
.af6b	f0 19		beq $af86			beq 	_FPM_NoAddition
.af6d	18		clc				clc
.af6e	a5 26		lda $26				lda 	zLTemp1+0
.af70	65 18		adc $18				adc 	B_Mantissa+0
.af72	85 26		sta $26				sta 	zLTemp1+0
.af74	a5 27		lda $27				lda 	zLTemp1+1
.af76	65 19		adc $19				adc 	B_Mantissa+1
.af78	85 27		sta $27				sta 	zLTemp1+1
.af7a	a5 28		lda $28				lda 	zLTemp1+2
.af7c	65 1a		adc $1a				adc 	B_Mantissa+2
.af7e	85 28		sta $28				sta 	zLTemp1+2
.af80	a5 29		lda $29				lda 	zLTemp1+3
.af82	65 1b		adc $1b				adc 	B_Mantissa+3
.af84	85 29		sta $29				sta 	zLTemp1+3
.af86					_FPM_NoAddition:
.af86	66 29		ror $29				ror 	3+zLTemp1
.af88	66 28		ror $28				ror 	2+zLTemp1
.af8a	66 27		ror $27				ror 	1+zLTemp1
.af8c	66 26		ror $26				ror 	0+zLTemp1
.af8e	66 13		ror $13				ror 	3+A_Mantissa
.af90	66 12		ror $12				ror 	2+A_Mantissa
.af92	66 11		ror $11				ror 	1+A_Mantissa
.af94	66 10		ror $10				ror 	0+A_Mantissa
.af96	ca		dex				dex
.af97	d0 cd		bne $af66			bne 	_FPM_Loop 					; do this 32 times.
.af99	a5 26		lda $26				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.af9b	85 10		sta $10				sta 	A_Mantissa+0
.af9d	a5 27		lda $27				lda 	zLTemp1+1
.af9f	85 11		sta $11				sta 	A_Mantissa+1
.afa1	a5 28		lda $28				lda 	zLTemp1+2
.afa3	85 12		sta $12				sta 	A_Mantissa+2
.afa5	a5 29		lda $29				lda 	zLTemp1+3
.afa7	85 13		sta $13				sta 	A_Mantissa+3
.afa9	a5 15		lda $15				lda 	A_Sign 						; sign is xor of signs
.afab	45 1d		eor $1d				eor 	B_Sign
.afad	85 15		sta $15				sta 	A_Sign
.afaf	a2 00		ldx #$00			ldx 	#0 							; normalise the result
.afb1	20 17 ae	jsr $ae17			jsr 	FPUNormaliseX
.afb4	80 03		bra $afb9			bra		_FPM_Exit
.afb6					_FPM_ReturnB:
.afb6	20 32 ad	jsr $ad32			jsr 	FPUCopyBToA
.afb9					_FPM_Exit:
.afb9	fa		plx				plx
.afba	68		pla				pla
.afbb	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpdivide.asm

.afbc					FPD_IsDivZero:
.afbc	20 ad e4	jsr $e4ad			jsr 		ERR_Handler
>afbf	44 69 76 69 73 69 6f 6e				.text 		"Division by zero",0
>afc7	20 62 79 20 7a 65 72 6f 00
.afd0					FPDivide:
.afd0	48		pha				pha
.afd1	da		phx				phx
.afd2	a5 1e		lda $1e				lda 	B_Zero 						; check if division by zero
.afd4	d0 e6		bne $afbc			bne 	FPD_IsDivZero
.afd6	a5 16		lda $16				lda 	A_Zero 						; if 0/X (X is not zero) return 0
.afd8	d0 7d		bne $b057			bne 	_FPD_Exit
.afda	a5 14		lda $14				lda 	A_Exponent 					; calculate new exponent
.afdc	38		sec				sec
.afdd	e5 1c		sbc $1c				sbc 	B_Exponent
.afdf	10 05		bpl $afe6			bpl 	_FPD_NoOverflow 			; check for overflow.
.afe1	50 03		bvc $afe6			bvc 	_FPD_NoOverflow
.afe3					_FPD_Overflow:
.afe3	4c ad ad	jmp $adad			jmp 	FP_Overflow
.afe6					_FPD_NoOverflow:
.afe6	18		clc				clc 	 							; x 2, overflow if -ve
.afe7	69 01		adc #$01			adc 	#1
.afe9	70 f8		bvs $afe3			bvs 	_FPD_Overflow
.afeb	85 14		sta $14				sta 	A_Exponent
.afed	a9 00		lda #$00			lda 	#0 							; clear result (kept in zLTemp1)
.afef	85 26		sta $26				sta 	zLTemp1+0
.aff1	85 27		sta $27				sta 	zLTemp1+1
.aff3	85 28		sta $28				sta 	zLTemp1+2
.aff5	85 29		sta $29				sta 	zLTemp1+3
.aff7	a2 20		ldx #$20			ldx 	#32 						; times round.
.aff9					_FPD_Loop:
.aff9	38		sec				sec 								; calculate A-B stacking result.
.affa	a5 10		lda $10				lda 	A_Mantissa+0
.affc	e5 18		sbc $18				sbc 	B_Mantissa+0
.affe	48		pha				pha
.afff	a5 11		lda $11				lda 	A_Mantissa+1
.b001	e5 19		sbc $19				sbc 	B_Mantissa+1
.b003	48		pha				pha
.b004	a5 12		lda $12				lda 	A_Mantissa+2
.b006	e5 1a		sbc $1a				sbc 	B_Mantissa+2
.b008	48		pha				pha
.b009	a5 13		lda $13				lda 	A_Mantissa+3
.b00b	e5 1b		sbc $1b				sbc 	B_Mantissa+3
.b00d	90 13		bcc $b022			bcc		_FPD_NoSubtract 			; if CC couldn't subtract
.b00f	85 13		sta $13				sta 	A_Mantissa+3 				; save results out to A
.b011	68		pla				pla
.b012	85 12		sta $12				sta 	A_Mantissa+2
.b014	68		pla				pla
.b015	85 11		sta $11				sta 	A_Mantissa+1
.b017	68		pla				pla
.b018	85 10		sta $10				sta 	A_Mantissa+0
.b01a	a5 29		lda $29				lda 	zLTemp1+3 					; set high bit of result
.b01c	09 80		ora #$80			ora 	#$80
.b01e	85 29		sta $29				sta 	zLTemp1+3
.b020	80 03		bra $b025			bra 	_FPD_Rotates
.b022					_FPD_NoSubtract:
.b022	68		pla				pla 								; throw away unwanted results
.b023	68		pla				pla
.b024	68		pla				pla
.b025					_FPD_Rotates:
.b025	46 1b		lsr $1b				lsr 	3+B_Mantissa
.b027	66 1a		ror $1a				ror 	2+B_Mantissa
.b029	66 19		ror $19				ror 	1+B_Mantissa
.b02b	66 18		ror $18				ror 	0+B_Mantissa
.b02d	06 26		asl $26				asl 	0+zLTemp1
.b02f	26 27		rol $27				rol 	1+zLTemp1
.b031	26 28		rol $28				rol 	2+zLTemp1
.b033	26 29		rol $29				rol 	3+zLTemp1
.b035	90 02		bcc $b039			bcc 	_FPD_NoCarry
.b037	e6 26		inc $26				inc 	zLTemp1 					; if rotated out, set LSB.
.b039					_FPD_NoCarry:
.b039	ca		dex				dex 								; do 32 times
.b03a	d0 bd		bne $aff9			bne 	_FPD_Loop
.b03c	a5 26		lda $26				lda 	zLTemp1+0 					; copy the left product into Mantissa A.
.b03e	85 10		sta $10				sta 	A_Mantissa+0
.b040	a5 27		lda $27				lda 	zLTemp1+1
.b042	85 11		sta $11				sta 	A_Mantissa+1
.b044	a5 28		lda $28				lda 	zLTemp1+2
.b046	85 12		sta $12				sta 	A_Mantissa+2
.b048	a5 29		lda $29				lda 	zLTemp1+3
.b04a	85 13		sta $13				sta 	A_Mantissa+3
.b04c	a5 15		lda $15				lda 	A_Sign 						; sign is xor of signs
.b04e	45 1d		eor $1d				eor 	B_Sign
.b050	85 15		sta $15				sta 	A_Sign
.b052	a2 00		ldx #$00			ldx 	#0 							; normalise the result
.b054	20 17 ae	jsr $ae17			jsr 	FPUNormaliseX
.b057					_FPD_Exit:
.b057	fa		plx				plx
.b058	68		pla				pla
.b059	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpparts.asm

.b05a					FPFractionalPart:
.b05a	a5 14		lda $14				lda 	A_Exponent 					; if exponent -ve then then unchanged
.b05c	38		sec				sec 								; this flag tells us to keep the fractional part
.b05d	10 0d		bpl $b06c			bpl 	FPGetPart
.b05f	60		rts				rts
.b060					FPIntegerPart:
.b060	a5 14		lda $14				lda 	A_Exponent 					; if exponent -ve then the result is zero.
.b062	18		clc				clc 								; this flag says keep the integer part.
.b063	10 07		bpl $b06c			bpl 	FPGetPart
.b065	48		pha				pha
.b066	a9 ff		lda #$ff			lda 	#$FF 						; set the Zero Flag
.b068	85 16		sta $16				sta 	A_Zero
.b06a	68		pla				pla
.b06b	60		rts				rts
.b06c					FPGetPart:
.b06c	48		pha				pha
.b06d	da		phx				phx 								; save X
.b06e	a5 16		lda $16				lda 	A_Zero 						; if zero, return zero
.b070	d0 4d		bne $b0bf			bne 	_FPGP_Exit 					; then do nothing.
.b072	08		php				php 								; save the action flag on the stack.
.b073	a9 ff		lda #$ff			lda 	#$FF 						; set the mask long to -1
.b075	85 26		sta $26				sta 	zLTemp1+0
.b077	85 27		sta $27				sta 	zLTemp1+1
.b079	85 28		sta $28				sta 	zLTemp1+2
.b07b	85 29		sta $29				sta 	zLTemp1+3
.b07d	a6 14		ldx $14				ldx 	A_Exponent 					; the number of shifts.
.b07f	f0 11		beq $b092			beq 	_FPGP_NoShift 				; ... if any
.b081	e0 20		cpx #$20			cpx 	#32
.b083	90 02		bcc $b087			bcc 	_FPGP_NotMax
.b085	a2 20		ldx #$20			ldx 	#32 						; max of 32.
.b087					_FPGP_NotMax:
.b087	46 29		lsr $29				lsr 	3+zLTemp1
.b089	66 28		ror $28				ror 	2+zLTemp1
.b08b	66 27		ror $27				ror 	1+zLTemp1
.b08d	66 26		ror $26				ror 	0+zLTemp1
.b08f	ca		dex				dex
.b090	d0 f5		bne $b087			bne 	_FPGP_NotMax
.b092					_FPGP_NoShift:
.b092	a2 03		ldx #$03			ldx 	#3 							; now mask each part in turn.
.b094					_FPGP_MaskLoop:
.b094	b5 26		lda $26,x			lda 	zlTemp1,x 					; get mask.
.b096	28		plp				plp 								; if CC we keep the top part, so we
.b097	08		php				php		 							; flip the mask.
.b098	b0 02		bcs $b09c			bcs		_FPGP_NoFlip
.b09a	49 ff		eor #$ff			eor 	#$FF
.b09c					_FPGP_NoFlip:
.b09c	35 10		and $10,x			and 	A_Mantissa,x
.b09e	95 10		sta $10,x			sta 	A_Mantissa,x
.b0a0	ca		dex				dex
.b0a1	10 f1		bpl $b094			bpl 	_FPGP_MaskLoop
.b0a3	28		plp				plp 								; get action flag on the stack
.b0a4	90 04		bcc $b0aa			bcc 	_FPGP_NotFractional 		; if fractional part always return +ve.
.b0a6	a9 00		lda #$00			lda 	#0
.b0a8	85 15		sta $15				sta 	A_Sign
.b0aa					_FPGP_NotFractional:
.b0aa	a5 10		lda $10				lda 	A_Mantissa 							; check if \1 zero
.b0ac	05 11		ora $11				ora 	A_Mantissa+1
.b0ae	05 12		ora $12				ora 	A_Mantissa+2
.b0b0	05 13		ora $13				ora 	A_Mantissa+3
.b0b2	f0 07		beq $b0bb			beq 	_FPGP_Zero 					; if zero, return zero
.b0b4	a2 00		ldx #$00			ldx 	#0							; otherwise normalise
.b0b6	20 17 ae	jsr $ae17			jsr 	FPUNormaliseX
.b0b9	80 04		bra $b0bf			bra 	_FPGP_Exit 					; and exit
.b0bb					_FPGP_Zero:
.b0bb	a9 ff		lda #$ff			lda 	#$FF 						; set zero flag
.b0bd	85 16		sta $16				sta 	A_Zero
.b0bf					_FPGP_Exit:
.b0bf	fa		plx				plx
.b0c0	68		pla				pla
.b0c1	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/inttostr.asm

.b0c2					INTToString:
.b0c2	48		pha				pha
.b0c3	da		phx				phx
.b0c4	5a		phy				phy
.b0c5	a5 13		lda $13				lda 		A_Mantissa+3 			; check -ve
.b0c7	10 0a		bpl $b0d3			bpl 		_ITSNotMinus
.b0c9	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.b0cb	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b0ce	a2 00		ldx #$00			ldx 		#0
.b0d0	20 34 ae	jsr $ae34			jsr 		FPUIntegerNegateX
.b0d3					_ITSNotMinus:
.b0d3	a2 00		ldx #$00			ldx 		#0 						; X is offset in table.
.b0d5	8e 21 03	stx $0321			stx 		NumSuppress 			; clear the suppression flag.
.b0d8					_ITSNextSubtractor:
.b0d8	a0 00		ldy #$00			ldy 		#0 						; Y is count.
.b0da					_ITSSubtract:
.b0da	38		sec				sec
.b0db	a5 10		lda $10				lda 		A_Mantissa 				; subtract number and push on stack
.b0dd	fd 2a b1	sbc $b12a,x			sbc 		_ITSSubtractors+0,x
.b0e0	48		pha				pha
.b0e1	a5 11		lda $11				lda 		A_Mantissa+1
.b0e3	fd 2b b1	sbc $b12b,x			sbc 		_ITSSubtractors+1,x
.b0e6	48		pha				pha
.b0e7	a5 12		lda $12				lda 		A_Mantissa+2
.b0e9	fd 2c b1	sbc $b12c,x			sbc 		_ITSSubtractors+2,x
.b0ec	48		pha				pha
.b0ed	a5 13		lda $13				lda 		A_Mantissa+3
.b0ef	fd 2d b1	sbc $b12d,x			sbc 		_ITSSubtractors+3,x
.b0f2	90 0e		bcc $b102			bcc 		_ITSCantSubtract 		; if CC, then gone too far.
.b0f4	85 13		sta $13				sta 		A_Mantissa+3 			; save subtract off stack
.b0f6	68		pla				pla
.b0f7	85 12		sta $12				sta 		A_Mantissa+2
.b0f9	68		pla				pla
.b0fa	85 11		sta $11				sta 		A_Mantissa+1
.b0fc	68		pla				pla
.b0fd	85 10		sta $10				sta 		A_Mantissa+0
.b0ff	c8		iny				iny 								; bump count.
.b100	80 d8		bra $b0da			bra 		_ITSSubtract 			; go round again.
.b102					_ITSCantSubtract:
.b102	68		pla				pla 								; throw away interim answers
.b103	68		pla				pla
.b104	68		pla				pla
.b105	c0 00		cpy #$00			cpy 		#0 						; if not zero then no suppression check
.b107	d0 05		bne $b10e			bne 		_ITSOutputDigit
.b109	2c 21 03	bit $0321			bit 		NumSuppress 			; if suppression check +ve (e.g. zero)
.b10c	10 09		bpl $b117			bpl 		_ITSGoNextSubtractor
.b10e					_ITSOutputDigit:
.b10e	ce 21 03	dec $0321			dec 		NumSuppress 			; suppression check will be -ve.
.b111	98		tya				tya 								; count of subtractions
.b112	09 30		ora #$30			ora 		#"0"					; make ASCII
.b114	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter 		; output it.
.b117					_ITSGoNextSubtractor:
.b117	e8		inx				inx 								; next dword
.b118	e8		inx				inx
.b119	e8		inx				inx
.b11a	e8		inx				inx
.b11b	e0 24		cpx #$24			cpx 		#_ITSSubtractorsEnd-_ITSSubtractors
.b11d	d0 b9		bne $b0d8			bne 		_ITSNextSubtractor 		; do all the subtractors.
.b11f	a5 10		lda $10				lda 		A_Mantissa 				; and the last digit is left.
.b121	09 30		ora #$30			ora 		#"0"
.b123	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b126	7a		ply				ply 								; and exit
.b127	fa		plx				plx
.b128	68		pla				pla
.b129	60		rts				rts
.b12a					_ITSSubtractors:
>b12a	00 ca 9a 3b					.dword 		1000000000
>b12e	00 e1 f5 05					.dword 		100000000
>b132	80 96 98 00					.dword 		10000000
>b136	40 42 0f 00					.dword 		1000000
>b13a	a0 86 01 00					.dword 		100000
>b13e	10 27 00 00					.dword 		10000
>b142	e8 03 00 00					.dword 		1000
>b146	64 00 00 00					.dword 		100
>b14a	0a 00 00 00					.dword 		10
.b14e					_ITSSubtractorsEnd:
.b14e					ITSOutputCharacter:
.b14e	48		pha				pha
.b14f	da		phx				phx
.b150	ae 20 03	ldx $0320			ldx 	NumBufX 					; save digit
.b153	9d 00 03	sta $0300,x			sta 	Num_Buffer,x
.b156	a9 00		lda #$00			lda		#0 							; follow by trailing NULL
.b158	9d 01 03	sta $0301,x			sta 	Num_Buffer+1,x
.b15b	ee 20 03	inc $0320			inc 	NumBufX						; bump pointer.
.b15e	fa		plx				plx
.b15f	68		pla				pla
.b160	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fptostr.asm

.b161					FPToString:
.b161	48		pha				pha
.b162	da		phx				phx
.b163	5a		phy				phy
.b164	a9 00		lda #$00			lda 		#0	 					; reset the index.
.b166	8d 20 03	sta $0320			sta 		NumBufX
.b169	a5 17		lda $17				lda 		A_Type
.b16b	d0 0e		bne $b17b			bne 		_FPTSIsFloat 			; if zero, go to floating point code.
.b16d	20 c2 b0	jsr $b0c2			jsr 		INTToString 			; convert it as a simple int, it's an integer.
.b170					_FPTSExit:
.b170	7a		ply				ply
.b171	fa		plx				plx
.b172	68		pla				pla
.b173	60		rts				rts
.b174					_FPTSZero:
.b174	a9 30		lda #$30			lda 		#"0"
.b176	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b179	80 f5		bra $b170			bra 		_FPTSExit
.b17b					_FPTSIsFloat:
.b17b	a5 16		lda $16				lda 		A_Zero 					; is it zero ?
.b17d	d0 f5		bne $b174			bne 		_FPTSZero 				; output a zero ?
.b17f	a5 15		lda $15				lda 		A_Sign 					; is it signed ?
.b181	f0 09		beq $b18c			beq 		_FPTSNotSigned
.b183	a9 00		lda #$00			lda 		#0 						; clear sign flag
.b185	85 15		sta $15				sta 		A_Sign
.b187	a9 2d		lda #$2d			lda 		#"-"					; output a minus
.b189	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b18c					_FPTSNotSigned:
.b18c	a5 14		lda $14				lda 		A_Exponent
.b18e	c9 14		cmp #$14			cmp 		#20 					; 0-20 as standard
.b190	90 04		bcc $b196			bcc 		_FPTSStandard
.b192	c9 f0		cmp #$f0			cmp 		#240 					; -16..-1 as standard
.b194	90 05		bcc $b19b			bcc 		_FPTSExponent 			;
.b196					_FPTSStandard:
.b196	20 ec b1	jsr $b1ec			jsr 		FPTOutputBody 			; output the body.
.b199	80 d5		bra $b170			bra 		_FPTSExit
.b19b					_FPTSExponent:
.b19b	a2 00		ldx #$00			ldx 		#0 						; this is the exponent count.
.b19d					_FPTSExponentLoop:
.b19d	a5 14		lda $14				lda 		A_Exponent 				; exponent < 0, x by 10
.b19f	30 0c		bmi $b1ad			bmi 		_FPTSTimes
.b1a1	c9 05		cmp #$05			cmp 		#5 						; exit when in range 0..4
.b1a3	90 10		bcc $b1b5			bcc 		_FPTSScaledToExp
.b1a5	a9 ff		lda #$ff			lda 		#-1 					; divide by 10.
.b1a7	20 6a b3	jsr $b36a			jsr 		FPScaleABy10PowerAC
.b1aa	e8		inx				inx
.b1ab	80 f0		bra $b19d			bra 		_FPTSExponentLoop
.b1ad					_FPTSTimes:
.b1ad	a9 01		lda #$01			lda 		#1
.b1af	20 6a b3	jsr $b36a			jsr 		FPScaleABy10PowerAC
.b1b2	ca		dex				dex
.b1b3	80 e8		bra $b19d			bra 		_FPTSExponentLoop
.b1b5					_FPTSScaledToExp:
.b1b5	da		phx				phx 								; save exponent
.b1b6	20 ec b1	jsr $b1ec			jsr 		FPTOutputBody 			; output the body.
.b1b9	a9 45		lda #$45			lda 		#"E"					; output E
.b1bb	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b1be	fa		plx				plx
.b1bf	da		phx				phx
.b1c0	10 0a		bpl $b1cc			bpl 		_FPTSOutExponent
.b1c2	a9 2d		lda #$2d			lda 		#"-" 					; output - ?
.b1c4	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b1c7	68		pla				pla 								; negate the exponent.
.b1c8	49 ff		eor #$ff			eor 		#$FF
.b1ca	1a		inc a				inc 		a
.b1cb	48		pha				pha
.b1cc					_FPTSOutExponent:
.b1cc	fa		plx				plx
.b1cd	e0 0a		cpx #$0a			cpx 		#10
.b1cf	90 12		bcc $b1e3			bcc 		_FPTSNoTens
.b1d1	a0 00		ldy #$00			ldy 		#0 						; high digit.
.b1d3					_FPTSHighLoop:
.b1d3	c8		iny				iny 								; / 10, keep subtracting 10.
.b1d4	8a		txa				txa
.b1d5	38		sec				sec
.b1d6	e9 0a		sbc #$0a			sbc 		#10
.b1d8	aa		tax				tax
.b1d9	e0 0a		cpx #$0a			cpx 		#10
.b1db	b0 f6		bcs $b1d3			bcs 		_FPTSHighLoop
.b1dd	98		tya				tya
.b1de	09 30		ora #$30			ora 		#"0"
.b1e0	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b1e3					_FPTSNoTens:
.b1e3	8a		txa				txa
.b1e4	09 30		ora #$30			ora 		#"0"
.b1e6	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b1e9	80 85		bra $b170			bra			_FPTSExit
.b1eb	ea		nop				nop
.b1ec					_FPTSScaled:
.b1ec					FPTOutputBody:
.b1ec	20 24 ad	jsr $ad24			jsr 		FPUCopyAtoB 			; save in B
.b1ef	a2 00		ldx #$00			ldx 		#0
.b1f1	20 6d ad	jsr $ad6d			jsr 		FPUAToInteger 			; convert A to integer
.b1f4	20 c2 b0	jsr $b0c2			jsr 		INTToString  			; output integer part as string.
.b1f7	20 32 ad	jsr $ad32			jsr 		FPUCopyBToA 			; get back.
.b1fa	20 5a b0	jsr $b05a			jsr 		FPFractionalPart 		; get the fractional part.
.b1fd	a5 16		lda $16				lda 		A_Zero 					; any fractional part ?
.b1ff	d0 40		bne $b241			bne 		_FPTOExit 				; exit if so.
.b201	a9 2e		lda #$2e			lda 		#"."					; output a decimal place
.b203	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b206					_FPDecimalLoop:
.b206	a5 16		lda $16				lda 		A_Zero 					; zeroed out A
.b208	d0 21		bne $b22b			bne 		_FPTOExit2
.b20a	ad 20 03	lda $0320			lda 		NumBufX 				; too many characters out.
.b20d	c9 0b		cmp #$0b			cmp			#11
.b20f	b0 1a		bcs $b22b			bcs 		_FPToExit2
.b211	a2 00		ldx #$00			ldx 		#0						; multiply A by 10
.b213	20 c8 ad	jsr $adc8			jsr 		FPUTimes10X
.b216	20 24 ad	jsr $ad24			jsr 		FPUCopyAToB 			; copy to B
.b219	20 6d ad	jsr $ad6d			jsr 		FPUAToInteger 			; make integer
.b21c	a5 10		lda $10				lda 		A_Mantissa 				; output digit
.b21e	09 30		ora #$30			ora 		#"0"
.b220	20 4e b1	jsr $b14e			jsr 		ITSOutputCharacter
.b223	20 32 ad	jsr $ad32			jsr 		FPUCopyBToA 			; get it back.
.b226	20 5a b0	jsr $b05a			jsr 		FPFractionalPart 		; get fractional part
.b229	80 db		bra $b206			bra 		_FPDecimalLoop
.b22b					_FPTOExit2:
.b22b	ae 20 03	ldx $0320			ldx 		NumBufX 				; strip trailing DPs.
.b22e					_FPStrip:
.b22e	ca		dex				dex 								; back one.
.b22f	30 10		bmi $b241			bmi 		_FPToExit 				; too far
.b231	bd 00 03	lda $0300,x			lda 		Num_Buffer,x 			; 0 ?
.b234	c9 30		cmp #$30			cmp 		#"0"
.b236	f0 f6		beq $b22e			beq 		_FPStrip
.b238	e8		inx				inx 								; first zero.
.b239	8e 20 03	stx $0320			stx 		NumBufX 				; save position
.b23c	a9 00		lda #$00			lda 		#0 						; trim
.b23e	9d 00 03	sta $0300,x			sta 		Num_Buffer,X
.b241					_FPTOExit:
.b241	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/intfromstr.asm

.b242					IntFromString:
.b242	a0 00		ldy #$00			ldy 	#0
.b244					IntFromStringY:
.b244	48		pha				pha
.b245	a9 00		lda #$00			lda 	#0 							; clear the mantissa
.b247	85 10		sta $10				sta 	A_Mantissa
.b249	85 11		sta $11				sta 	A_Mantissa+1
.b24b	85 12		sta $12				sta 	A_Mantissa+2
.b24d	85 13		sta $13				sta 	A_Mantissa+3
.b24f	a9 00		lda #$00			lda 	#Type_Integer
.b251	85 17		sta $17				sta 	A_Type
.b253					_IFSLoop:
.b253	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; get next
.b255	c9 30		cmp #$30			cmp 	#"0"						; validate it.
.b257	90 4b		bcc $b2a4			bcc 	_IFSExit
.b259	c9 3a		cmp #$3a			cmp 	#"9"+1
.b25b	b0 47		bcs $b2a4			bcs 	_IFSExit
.b25d	a5 13		lda $13				lda 	A_Mantissa+3 				; is High Byte > $7F/10
.b25f	c9 0c		cmp #$0c			cmp 	#12
.b261	b0 48		bcs $b2ab			bcs 	_IFSOverflow
.b263	a5 13		lda $13				lda 	A_Mantissa+3 				; push mantissa on stack backwards
.b265	48		pha				pha
.b266	a5 12		lda $12				lda 	A_Mantissa+2
.b268	48		pha				pha
.b269	a5 11		lda $11				lda 	A_Mantissa+1
.b26b	48		pha				pha
.b26c	a5 10		lda $10				lda 	A_Mantissa+0
.b26e	48		pha				pha
.b26f	20 c0 b2	jsr $b2c0			jsr 	IFSAShiftLeft 				; double
.b272	20 c0 b2	jsr $b2c0			jsr 	IFSAShiftLeft 				; x 4
.b275	18		clc				clc 								; add saved value x 5
.b276	68		pla				pla
.b277	65 10		adc $10				adc 	A_Mantissa+0
.b279	85 10		sta $10				sta 	A_Mantissa+0
.b27b	68		pla				pla
.b27c	65 11		adc $11				adc 	A_Mantissa+1
.b27e	85 11		sta $11				sta 	A_Mantissa+1
.b280	68		pla				pla
.b281	65 12		adc $12				adc 	A_Mantissa+2
.b283	85 12		sta $12				sta 	A_Mantissa+2
.b285	68		pla				pla
.b286	65 13		adc $13				adc 	A_Mantissa+3
.b288	85 13		sta $13				sta 	A_Mantissa+3
.b28a	20 c0 b2	jsr $b2c0			jsr 	IFSAShiftLeft 				; x 10
.b28d	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; add digit
.b28f	29 0f		and #$0f			and 	#15
.b291	c8		iny				iny
.b292	65 10		adc $10				adc 	A_Mantissa
.b294	85 10		sta $10				sta 	A_Mantissa
.b296	90 bb		bcc $b253			bcc 	_IFSLoop
.b298	e6 11		inc $11				inc 	A_Mantissa+1 				; propogate carry round.
.b29a	d0 b7		bne $b253			bne 	_IFSLoop
.b29c	e6 12		inc $12				inc 	A_Mantissa+2
.b29e	d0 b3		bne $b253			bne 	_IFSLoop
.b2a0	e6 13		inc $13				inc 	A_Mantissa+3
.b2a2	80 af		bra $b253			bra 	_IFSLoop
.b2a4					_IFSExit:
.b2a4	98		tya				tya 								; get offset
.b2a5	18		clc				clc
.b2a6	d0 01		bne $b2a9			bne 	_IFSOkay 					; if was non zero, conversion was okay
.b2a8	38		sec				sec 								; else no integer found.
.b2a9					_IFSOkay:
.b2a9	68		pla				pla 								; and exit.
.b2aa	60		rts				rts
.b2ab					_IFSOverflow:
.b2ab	20 ad e4	jsr $e4ad			jsr 	ERR_Handler
>b2ae	43 6f 6e 73 74 61 6e 74				.text 	"Constant overflow",0
>b2b6	20 6f 76 65 72 66 6c 6f 77 00
.b2c0					IFSAShiftLeft:
.b2c0	06 10		asl $10				asl 	0+A_Mantissa
.b2c2	26 11		rol $11				rol 	1+A_Mantissa
.b2c4	26 12		rol $12				rol 	2+A_Mantissa
.b2c6	26 13		rol $13				rol 	3+A_Mantissa
.b2c8	60		rts				rts

;******  Return to file: basic.asm


;******  Processing file: arithmetic/fpfromstr.asm

.b2c9					FPFromString:
.b2c9	48		pha				pha 								; push AX
.b2ca	da		phx				phx
.b2cb	b1 2a		lda ($2a),y			lda		(zGenPtr),y					; followed by a DP.
.b2cd	c9 2e		cmp #$2e			cmp 	#"."
.b2cf	f0 03		beq $b2d4			beq	 	_FPFIsDecimal
.b2d1	4c 55 b3	jmp $b355			jmp 	_FPFNotDecimal
.b2d4					_FPFIsDecimal:
.b2d4	c8		iny				iny 								; consume the decimal.
.b2d5	a2 00		ldx #$00			ldx 	#0
.b2d7	b5 18		lda $18,x	_F1:	lda 	B_Mantissa,x
.b2d9	48		pha				pha
.b2da	e8		inx				inx
.b2db	e0 08		cpx #$08			cpx 	#8
.b2dd	d0 f8		bne $b2d7			bne 	_F1
.b2df	5a		phy				phy
.b2e0	b1 2a		lda ($2a),y			lda		(zGenPtr),y					; followed by a DP.
.b2e2	a2 00		ldx #$00			ldx 	#0 							; convert A to float.
.b2e4	20 40 ad	jsr $ad40			jsr 	FPUToFloatX
.b2e7	20 24 ad	jsr $ad24			jsr 	FPUCopyAToB 				; put the integer (as float) part in B.
.b2ea	20 44 b2	jsr $b244			jsr 	INTFromStringY 				; get the part after the DP.
.b2ed	a2 00		ldx #$00			ldx 	#0							; convert that to a Float
.b2ef	20 40 ad	jsr $ad40			jsr 	FPUToFloatX
.b2f2	68		pla				pla 								; calculate - chars consumed.
.b2f3	8c 22 03	sty $0322			sty 	ExpTemp
.b2f6	38		sec				sec
.b2f7	ed 22 03	sbc $0322			sbc 	ExpTemp 					; this is the shift amount
.b2fa	20 6a b3	jsr $b36a			jsr 	FPScaleABy10PowerAC 		; scale it by that.
.b2fd	20 9c ae	jsr $ae9c			jsr 	FPAdd 						; Add B to A giving the fractional bit.
.b300	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; exponent ?
.b302	c9 45		cmp #$45			cmp 	#"E"
.b304	f0 04		beq $b30a			beq 	_FPFExponent
.b306	c9 65		cmp #$65			cmp 	#"e"
.b308	d0 43		bne $b34d			bne 	_FPFEndTranslate
.b30a					_FPFExponent:
.b30a	a9 00		lda #$00			lda 	#0 							; zero exponent
.b30c	8d 22 03	sta $0322			sta 	ExpTemp
.b30f	c8		iny				iny 								; skip E
.b310	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; get next char, + - or a constant should be.
.b312	48		pha				pha 								; save for later.
.b313	c9 2b		cmp #$2b			cmp 	#"+" 						; if + or - then skip it.
.b315	f0 04		beq $b31b			beq 	_FPFSkipFetch
.b317	c9 2d		cmp #$2d			cmp 	#"-"
.b319	d0 01		bne $b31c			bne 	_FPFExpLoop
.b31b					_FPFSkipFetch:
.b31b	c8		iny				iny
.b31c					_FPFExpLoop:
.b31c	b1 2a		lda ($2a),y			lda 	(zGenPtr),y 				; get character
.b31e	c9 30		cmp #$30			cmp 	#"0" 						; check 0-9
.b320	90 1d		bcc $b33f			bcc 	_FPFDoExponent
.b322	c9 3a		cmp #$3a			cmp 	#"9"+1
.b324	b0 19		bcs $b33f			bcs 	_FPFDoExponent
.b326	ad 22 03	lda $0322			lda 	ExpTemp 					; exponent too much ?
.b329	c9 03		cmp #$03			cmp 	#3
.b32b	b0 2b		bcs $b358			bcs 	_FPFExpOverflow
.b32d	0a		asl a				asl 	a 							; x old exponent by 10
.b32e	0a		asl a				asl 	a
.b32f	6d 22 03	adc $0322			adc 	ExpTemp
.b332	0a		asl a				asl 	a
.b333	18		clc				clc
.b334	71 2a		adc ($2a),y			adc 	(zGenPtr),y 				; add digit
.b336	38		sec				sec
.b337	e9 30		sbc #$30			sbc 	#"0"						; fix up.
.b339	8d 22 03	sta $0322			sta 	ExpTemp
.b33c	c8		iny				iny 								; consume character
.b33d	80 dd		bra $b31c			bra 	_FPFExpLoop
.b33f					_FPFDoExponent:
.b33f	ad 22 03	lda $0322			lda 	ExpTemp
.b342	fa		plx				plx 								; get the next char
.b343	e0 2d		cpx #$2d			cpx 	#"-" 						; if it was -
.b345	d0 03		bne $b34a			bne 	_FPFNoNegExponent
.b347	49 ff		eor #$ff			eor 	#$FF
.b349	1a		inc a				inc 	a
.b34a					_FPFNoNegExponent:
.b34a	20 6a b3	jsr $b36a			jsr 	FPScaleABy10PowerAC 		; scale by the exponent.
.b34d					_FPFEndTranslate:
.b34d	a2 07		ldx #$07			ldx 	#7
.b34f	68		pla		_F2:	pla
.b350	95 18		sta $18,x			sta 	B_Mantissa,x
.b352	ca		dex				dex
.b353	10 fa		bpl $b34f			bpl		_F2
.b355					_FPFNotDecimal:
.b355	fa		plx				plx
.b356	68		pla				pla
.b357	60		rts				rts
.b358					_FPFExpOverflow:
.b358	20 ad e4	jsr $e4ad			jsr 	ERR_Handler
>b35b	45 78 70 6f 6e 65 6e 74				.text 	"Exponent Range",0
>b363	20 52 61 6e 67 65 00
.b36a					FPScaleABy10PowerAC:
.b36a	48		pha				pha
.b36b	da		phx				phx
.b36c	5a		phy				phy
.b36d	a8		tay				tay
.b36e	f0 3b		beq $b3ab			beq 	_FPSAExit 					; zero, do nothing.
.b370	a2 00		ldx #$00			ldx 	#0
.b372	b5 18		lda $18,x	_F1:	lda 	B_Mantissa,x
.b374	48		pha				pha
.b375	e8		inx				inx
.b376	e0 08		cpx #$08			cpx 	#8
.b378	d0 f8		bne $b372			bne 	_F1
.b37a	5a		phy				phy 								; save actual count.
.b37b	c0 00		cpy #$00			cpy 	#0 							; put |Y| in Y
.b37d	10 05		bpl $b384			bpl 	_FPSAAbs
.b37f	98		tya				tya
.b380	49 ff		eor #$ff			eor 	#$FF
.b382	1a		inc a				inc 	a
.b383	a8		tay				tay
.b384					_FPSAAbs:
.b384	5a		phy				phy 								; rest
.b385	a2 01		ldx #$01			ldx 	#1
.b387	a0 00		ldy #$00			ldy 	#0
.b389	20 0e ad	jsr $ad0e			jsr 	FPUSetBFromXY
.b38c	a2 08		ldx #$08			ldx 	#B_Mantissa-A_Mantissa
.b38e	20 40 ad	jsr $ad40			jsr 	FPUToFloatX 				; B is now 1.0 float
.b391	7a		ply				ply
.b392					_FPSATimes10:
.b392	20 c8 ad	jsr $adc8			jsr 	FPUTimes10X
.b395	88		dey				dey
.b396	d0 fa		bne $b392			bne 	_FPSATimes10
.b398	68		pla				pla 								; restore actual count
.b399	10 05		bpl $b3a0			bpl 	_FPSAMultiply
.b39b	20 d0 af	jsr $afd0			jsr 	FPDivide 					; use to decide whether x or / scalar
.b39e	80 03		bra $b3a3			bra 	_FPSAPopExit
.b3a0					_FPSAMultiply:
.b3a0	20 42 af	jsr $af42			jsr 	FPMultiply
.b3a3					_FPSAPopExit:
.b3a3	a2 07		ldx #$07			ldx 	#7
.b3a5	68		pla		_F2:	pla
.b3a6	95 18		sta $18,x			sta 	B_Mantissa,x
.b3a8	ca		dex				dex
.b3a9	10 fa		bpl $b3a5			bpl		_F2
.b3ab					_FPSAExit:
.b3ab	7a		ply				ply
.b3ac	fa		plx				plx
.b3ad	68		pla				pla
.b3ae	60		rts				rts

;******  Return to file: basic.asm

.b3af					StartROM:
.b3af	a2 ff		ldx #$ff			ldx 		#$FF 					; empty stack
.b3b1	9a		txs				txs
.b3b2	20 92 a0	jsr $a092			jsr 		IF_Reset 				; reset external interface
.b3b5	20 5a a9	jsr $a95a			jsr 		IFT_ClearScreen

;******  Processing file: testing/fptest.asm

.b3b8					FPTTest:
.b3b8	a9 88		lda #$88			lda 	#FPTTestData & $FF 			; set zGenPtr to data.
.b3ba	85 2a		sta $2a				sta 	zGenPtr
.b3bc	a9 b4		lda #$b4			lda 	#FPTTestData >> 8
.b3be	85 2b		sta $2b				sta 	zGenPtr+1
.b3c0	a9 00		lda #$00			lda 	#0
.b3c2	8d 25 03	sta $0325			sta	 	TIM_Irq
.b3c5	8d 26 03	sta $0326			sta 	TIM_Irq+1
.b3c8					FPTNextLine:
.b3c8	ad 26 03	lda $0326			lda 	TIM_Irq+1
.b3cb	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.b3ce	ad 25 03	lda $0325			lda 	TIM_Irq
.b3d1	20 e4 ab	jsr $abe4			jsr 	TIM_WriteHex
.b3d4	a9 2e		lda #$2e			lda 	#"."
.b3d6	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
.b3d9	ee 25 03	inc $0325			inc 	TIM_Irq
.b3dc	d0 03		bne $b3e1			bne 	FPTLoop
.b3de	ee 26 03	inc $0326			inc 	TIM_Irq+1
.b3e1					FPTLoop:
.b3e1	20 79 b4	jsr $b479			jsr 	FPTGet 						; get next
.b3e4	c9 4c		cmp #$4c			cmp 	#"L"						; Load [xxxx]
.b3e6	f0 77		beq $b45f			beq 	FPT_Load
.b3e8	c9 51		cmp #$51			cmp 	#"Q" 						; Quit
.b3ea	f0 66		beq $b452			beq 	FPT_Exit
.b3ec	c9 00		cmp #$00			cmp 	#0 							; Null Quit too.
.b3ee	f0 62		beq $b452			beq 	FPT_Exit
.b3f0	c9 43		cmp #$43			cmp 	#"C"						; Copy
.b3f2	f0 66		beq $b45a			beq 	FPT_Copy
.b3f4	c9 25		cmp #$25			cmp 	#"%"						; Ignore new line (%)
.b3f6	f0 d0		beq $b3c8			beq 	FPTNextLine
.b3f8	c9 21		cmp #$21			cmp 	#" "+1 						; Ignore control
.b3fa	90 e5		bcc $b3e1			bcc 	FPTLoop
.b3fc	c9 3d		cmp #$3d			cmp 	#"="						; = Checks A = B as floats (e.g. almost ....)
.b3fe	f0 49		beq $b449			beq		FPT_Equals
.b400	c9 2b		cmp #$2b			cmp 	#"+"						; Maths operations
.b402	f0 16		beq $b41a			beq 	FPT_Add
.b404	c9 2d		cmp #$2d			cmp 	#"-"
.b406	f0 17		beq $b41f			beq 	FPT_Subtract
.b408	c9 2a		cmp #$2a			cmp 	#"*"
.b40a	f0 18		beq $b424			beq 	FPT_Multiply
.b40c	c9 2f		cmp #$2f			cmp 	#"/"
.b40e	f0 19		beq $b429			beq 	FPT_Divide
.b410	c9 7e		cmp #$7e			cmp 	#"~"
.b412	f0 22		beq $b436			beq 	FPT_Compare
.b414	c9 21		cmp #$21			cmp 	#"!"
.b416	f0 16		beq $b42e			beq 	FPT_Negate
.b418					FPT_Error:
.b418	80 fe		bra $b418			bra 	FPT_Error
.b41a					FPT_Add:
.b41a	20 9c ae	jsr $ae9c			jsr 	FPAdd
.b41d	80 c2		bra $b3e1			bra 	FPTLoop
.b41f					FPT_Subtract:
.b41f	20 94 ae	jsr $ae94			jsr 	FPSubtract
.b422	80 bd		bra $b3e1			bra 	FPTLoop
.b424					FPT_Multiply:
.b424	20 42 af	jsr $af42			jsr 	FPMultiply
.b427	80 b8		bra $b3e1			bra 	FPTLoop
.b429					FPT_Divide:
.b429	20 d0 af	jsr $afd0			jsr 	FPDivide
.b42c	80 b3		bra $b3e1			bra 	FPTLoop
.b42e					FPT_Negate:
.b42e	a5 15		lda $15				lda 	A_Sign
.b430	49 ff		eor #$ff			eor 	#$FF
.b432	85 15		sta $15				sta 	A_Sign
.b434	80 ab		bra $b3e1			bra 	FPTLoop
.b436					FPT_Compare:
.b436	20 50 ae	jsr $ae50			jsr 	FPCompare
.b439	a0 00		ldy #$00			ldy 	#0
.b43b	aa		tax				tax
.b43c	10 01		bpl $b43f			bpl 	_FPTNotNeg
.b43e	88		dey				dey
.b43f					_FPTNotNeg:
.b43f	20 f8 ac	jsr $acf8			jsr 	FPUSetAFromXY
.b442	a2 00		ldx #$00			ldx 	#0
.b444	20 40 ad	jsr $ad40			jsr 	FPUToFloatX
.b447	80 98		bra $b3e1			bra 	FPTLoop
.b449					FPT_Equals:
.b449	20 50 ae	jsr $ae50			jsr 	FPCompare
.b44c	c9 00		cmp #$00			cmp 	#0
.b44e	d0 c8		bne $b418			bne 	FPT_Error
.b450	80 8f		bra $b3e1			bra 	FPTLoop
.b452					FPT_Exit:
.b452	a9 2a		lda #$2a			lda 	#"*"
.b454	20 8f a9	jsr $a98f			jsr 	IFT_PrintCharacter
>b457	5c						.byte 	$5C
.b458	80 fe		bra $b458	FPT_Stop:bra 	FPT_Stop
.b45a					FPT_Copy:
.b45a	20 24 ad	jsr $ad24			jsr 	FPUCopyAToB
.b45d	80 82		bra $b3e1			bra 	FPTLoop
.b45f					FPT_Load:
.b45f	20 79 b4	jsr $b479			jsr 	FPTGet 						; get the [ character
.b462	20 42 b2	jsr $b242			jsr 	INTFromString
.b465	b0 b1		bcs $b418			bcs 	FPT_Error
.b467	20 c9 b2	jsr $b2c9			jsr 	FPFromString
.b46a	a2 00		ldx #$00			ldx 	#0							; make it float
.b46c	20 40 ad	jsr $ad40			jsr 	FPUToFloatX
.b46f					_FPTLoad1:
.b46f	20 79 b4	jsr $b479			jsr 	FPTGet 						; find the ] character
.b472	c9 5d		cmp #$5d			cmp 	#"]"
.b474	d0 f9		bne $b46f			bne 	_FPTLoad1
.b476	4c e1 b3	jmp $b3e1			jmp 	FPTLoop
.b479	5a		phy		FPTGet:	phy
.b47a	a0 00		ldy #$00			ldy 	#0
.b47c	b1 2a		lda ($2a),y			lda 	(zGenPtr),y
.b47e	48		pha				pha
.b47f	e6 2a		inc $2a				inc 	zGenPtr
.b481	d0 02		bne $b485			bne 	_FPTGet1
.b483	e6 2b		inc $2b				inc 	zGenPtr+1
.b485					_FPTGet1:
.b485	68		pla				pla
.b486	7a		ply				ply
.b487	60		rts				rts
.b488					FPTTestData:
>b488	4c 5b 33 2e 30 5d 20 20				.binary	"maths.test"
>b490	43 20 4c 5b 31 35 34 39 2e 34 35 5d 21 20 20 2b
>b4a0	43 20 4c 5b 31 35 34 36 2e 34 35 5d 21 20 20 3d
>b4b0	20 25 0a 4c 5b 31 36 30 32 32 2e 30 5d 20 20 43
>b4c0	20 4c 5b 30 2e 30 5d 20 20 2f 43 20 4c 5b 30 2e
>b4d0	30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>b4e0	43 20 4c 5b 30 2e 30 5d 20 20 2a 43 20 4c 5b 30
>b4f0	2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 2e 30 5d 21
>b500	20 20 43 20 4c 5b 31 2e 30 5d 21 20 20 2d 43 20
>b510	4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e
>b520	30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43
>b530	20 4c 5b 30 5d 20 20 3d 20 25 0a 4c 5b 31 2e 30
>b540	5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2b 43
>b550	20 4c 5b 31 2e 30 5d 21 20 20 3d 20 25 0a 4c 5b
>b560	31 30 38 30 2e 30 5d 21 20 20 43 20 4c 5b 31 31
>b570	30 34 34 2e 30 5d 21 20 20 2d 43 20 4c 5b 39 39
>b580	36 34 2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 33 2e
>b590	30 5d 20 20 43 20 4c 5b 36 37 32 2e 36 33 5d 21
>b5a0	20 20 2f 43 20 4c 5b 32 32 34 2e 32 31 5d 21 20
>b5b0	20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c
>b5c0	5b 32 2e 30 5d 20 20 7e 43 20 4c 5b 31 5d 20 20
>b5d0	3d 20 25 0a 4c 5b 31 30 36 35 2e 31 38 5d 21 20
>b5e0	20 43 20 4c 5b 36 32 35 2e 34 39 5d 20 20 2b 43
>b5f0	20 4c 5b 34 33 39 2e 36 39 5d 21 20 20 3d 20 25
>b600	0a 4c 5b 32 2e 30 5d 21 20 20 43 20 4c 5b 30 2e
>b610	30 5d 20 20 2b 43 20 4c 5b 32 2e 30 5d 21 20 20
>b620	3d 20 25 0a 4c 5b 31 2e 30 5d 21 20 20 43 20 4c
>b630	5b 33 30 30 2e 34 32 5d 20 20 2f 43 20 4c 5b 33
>b640	30 30 2e 34 32 5d 21 20 20 3d 20 25 0a 4c 5b 33
>b650	2e 30 5d 21 20 20 43 20 4c 5b 33 2e 30 5d 21 20
>b660	20 2b 43 20 4c 5b 36 2e 30 5d 21 20 20 3d 20 25
>b670	0a 4c 5b 31 2e 30 5d 21 20 20 43 20 4c 5b 30 2e
>b680	30 5d 20 20 2b 43 20 4c 5b 31 2e 30 5d 21 20 20
>b690	3d 20 25 0a 4c 5b 31 35 37 31 2e 30 5d 21 20 20
>b6a0	43 20 4c 5b 38 35 31 31 2e 30 5d 20 20 2d 43 20
>b6b0	4c 5b 31 30 30 38 32 2e 30 5d 20 20 3d 20 25 0a
>b6c0	4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d
>b6d0	20 20 2d 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25
>b6e0	0a 4c 5b 35 33 38 2e 31 34 5d 20 20 43 20 4c 5b
>b6f0	31 36 30 39 2e 39 35 5d 20 20 7e 43 20 4c 5b 31
>b700	5d 20 20 3d 20 25 0a 4c 5b 35 33 31 35 2e 30 5d
>b710	20 20 43 20 4c 5b 32 2e 30 5d 20 20 2a 43 20 4c
>b720	5b 31 30 36 33 30 2e 30 5d 20 20 3d 20 25 0a 4c
>b730	5b 39 36 39 2e 32 33 5d 21 20 20 43 20 4c 5b 30
>b740	2e 30 5d 20 20 2f 43 20 4c 5b 30 2e 30 5d 20 20
>b750	3d 20 25 0a 4c 5b 35 31 33 2e 39 36 5d 20 20 43
>b760	20 4c 5b 31 2e 30 5d 21 20 20 2a 43 20 4c 5b 35
>b770	31 33 2e 39 36 5d 21 20 20 3d 20 25 0a 4c 5b 30
>b780	2e 30 5d 20 20 43 20 4c 5b 35 39 33 38 2e 30 5d
>b790	21 20 20 2d 43 20 4c 5b 35 39 33 38 2e 30 5d 21
>b7a0	20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20
>b7b0	4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b 30 5d 20
>b7c0	20 3d 20 25 0a 4c 5b 31 32 35 31 35 2e 30 5d 20
>b7d0	20 43 20 4c 5b 32 32 30 37 2e 30 5d 21 20 20 2f
>b7e0	43 20 4c 5b 30 2e 31 37 36 33 34 38 34 5d 21 20
>b7f0	20 3d 20 25 0a 4c 5b 38 31 32 37 2e 30 5d 20 20
>b800	43 20 4c 5b 34 34 37 38 2e 30 5d 21 20 20 7e 43
>b810	20 4c 5b 31 5d 21 20 20 3d 20 25 0a 4c 5b 35 39
>b820	34 2e 37 35 5d 21 20 20 43 20 4c 5b 31 34 35 30
>b830	33 2e 30 5d 21 20 20 2f 43 20 4c 5b 32 34 2e 33
>b840	38 35 30 34 5d 20 20 3d 20 25 0a 4c 5b 36 33 39
>b850	38 2e 30 5d 20 20 43 20 4c 5b 31 35 36 39 38 2e
>b860	30 5d 21 20 20 2d 43 20 4c 5b 32 32 30 39 36 2e
>b870	30 5d 21 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20
>b880	20 43 20 4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b
>b890	30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 2e 30 5d
>b8a0	20 20 43 20 4c 5b 31 36 35 31 2e 30 5d 21 20 20
>b8b0	2b 43 20 4c 5b 31 36 35 30 2e 30 5d 21 20 20 3d
>b8c0	20 25 0a 4c 5b 31 33 37 35 2e 37 31 5d 20 20 43
>b8d0	20 4c 5b 31 39 31 33 2e 36 31 5d 20 20 2f 43 20
>b8e0	4c 5b 31 2e 33 39 30 39 39 38 5d 20 20 3d 20 25
>b8f0	0a 4c 5b 31 2e 30 5d 20 20 43 20 4c 5b 33 2e 30
>b900	5d 21 20 20 2d 43 20 4c 5b 34 2e 30 5d 21 20 20
>b910	3d 20 25 0a 4c 5b 31 2e 30 5d 20 20 43 20 4c 5b
>b920	39 32 30 33 2e 30 5d 20 20 7e 43 20 4c 5b 31 5d
>b930	20 20 3d 20 25 0a 4c 5b 33 39 31 30 2e 30 5d 21
>b940	20 20 43 20 4c 5b 33 2e 30 5d 20 20 2d 43 20 4c
>b950	5b 33 39 31 33 2e 30 5d 20 20 3d 20 25 0a 4c 5b
>b960	30 2e 30 5d 20 20 43 20 4c 5b 31 36 31 33 35 2e
>b970	30 5d 20 20 7e 43 20 4c 5b 31 5d 20 20 3d 20 25
>b980	0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30
>b990	5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20
>b9a0	25 0a 4c 5b 38 30 33 2e 37 32 5d 20 20 43 20 4c
>b9b0	5b 39 37 2e 34 32 5d 21 20 20 2d 43 20 4c 5b 39
>b9c0	30 31 2e 31 34 5d 21 20 20 3d 20 25 0a 4c 5b 31
>b9d0	2e 30 5d 21 20 20 43 20 4c 5b 31 37 37 35 2e 30
>b9e0	38 5d 20 20 2b 43 20 4c 5b 31 37 37 34 2e 30 38
>b9f0	5d 20 20 3d 20 25 0a 4c 5b 33 31 34 2e 34 37 5d
>ba00	21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43 20
>ba10	4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d
>ba20	20 20 43 20 4c 5b 35 31 36 32 2e 30 5d 20 20 2a
>ba30	43 20 4c 5b 31 30 33 32 34 2e 30 5d 20 20 3d 20
>ba40	25 0a 4c 5b 31 2e 30 5d 20 20 43 20 4c 5b 31 36
>ba50	39 38 2e 34 38 5d 21 20 20 2f 43 20 4c 5b 31 36
>ba60	39 38 2e 34 38 5d 21 20 20 3d 20 25 0a 4c 5b 31
>ba70	33 35 31 2e 31 33 5d 21 20 20 43 20 4c 5b 31 37
>ba80	36 37 2e 35 37 5d 20 20 2f 43 20 4c 5b 31 2e 33
>ba90	30 38 32 31 36 5d 21 20 20 3d 20 25 0a 4c 5b 38
>baa0	30 39 38 2e 30 5d 21 20 20 43 20 4c 5b 39 38 36
>bab0	2e 31 33 5d 20 20 2b 43 20 4c 5b 37 31 31 31 2e
>bac0	38 37 5d 21 20 20 3d 20 25 0a 4c 5b 34 35 39 2e
>bad0	31 5d 21 20 20 43 20 4c 5b 35 38 32 2e 39 39 5d
>bae0	20 20 7e 43 20 4c 5b 31 5d 20 20 3d 20 25 0a 4c
>baf0	5b 30 2e 30 5d 20 20 43 20 4c 5b 38 39 33 2e 31
>bb00	33 5d 20 20 2b 43 20 4c 5b 38 39 33 2e 31 33 5d
>bb10	20 20 3d 20 25 0a 4c 5b 36 32 34 2e 30 5d 20 20
>bb20	43 20 4c 5b 31 2e 30 5d 21 20 20 2a 43 20 4c 5b
>bb30	36 32 34 2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 30
>bb40	2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e
>bb50	43 20 4c 5b 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e
>bb60	30 5d 20 20 43 20 4c 5b 31 38 39 33 33 2e 30 5d
>bb70	21 20 20 2b 43 20 4c 5b 31 38 39 33 33 2e 30 5d
>bb80	21 20 20 3d 20 25 0a 4c 5b 38 36 37 36 2e 30 5d
>bb90	21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f 43 20
>bba0	4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 35
>bbb0	36 36 2e 39 35 5d 20 20 43 20 4c 5b 30 2e 30 5d
>bbc0	20 20 7e 43 20 4c 5b 31 5d 21 20 20 3d 20 25 0a
>bbd0	4c 5b 31 39 39 31 37 2e 30 5d 20 20 43 20 4c 5b
>bbe0	30 2e 30 5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20
>bbf0	20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c
>bc00	5b 34 33 34 30 2e 30 5d 20 20 7e 43 20 4c 5b 31
>bc10	5d 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 20 43
>bc20	20 4c 5b 31 36 31 2e 30 5d 21 20 20 2f 43 20 4c
>bc30	5b 35 33 2e 36 36 36 36 37 5d 21 20 20 3d 20 25
>bc40	0a 4c 5b 31 30 35 36 2e 32 37 5d 21 20 20 43 20
>bc50	4c 5b 30 2e 30 5d 20 20 2f 43 20 4c 5b 30 2e 30
>bc60	5d 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 20 43
>bc70	20 4c 5b 33 2e 30 5d 20 20 2d 43 20 4c 5b 31 2e
>bc80	30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>bc90	43 20 4c 5b 35 38 30 2e 35 31 5d 20 20 2a 43 20
>bca0	4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 2e
>bcb0	30 5d 20 20 43 20 4c 5b 31 34 36 37 30 2e 30 5d
>bcc0	20 20 7e 43 20 4c 5b 31 5d 20 20 3d 20 25 0a 4c
>bcd0	5b 39 36 37 37 2e 30 5d 21 20 20 43 20 4c 5b 33
>bce0	2e 30 5d 21 20 20 2d 43 20 4c 5b 39 36 37 34 2e
>bcf0	30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>bd00	43 20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b 30
>bd10	5d 20 20 3d 20 25 0a 4c 5b 31 33 38 36 2e 35 32
>bd20	5d 21 20 20 43 20 4c 5b 31 2e 30 5d 21 20 20 2f
>bd30	43 20 4c 5b 30 2e 30 30 30 37 32 31 32 33 30 31
>bd40	5d 20 20 3d 20 25 0a 4c 5b 33 39 36 2e 36 36 5d
>bd50	21 20 20 43 20 4c 5b 33 2e 30 5d 20 20 2a 43 20
>bd60	4c 5b 31 31 38 39 2e 39 38 5d 21 20 20 3d 20 25
>bd70	0a 4c 5b 33 39 35 2e 38 33 5d 20 20 43 20 4c 5b
>bd80	36 35 2e 30 5d 20 20 2f 43 20 4c 5b 30 2e 31 36
>bd90	34 32 31 31 39 5d 20 20 3d 20 25 0a 4c 5b 33 31
>bda0	31 36 2e 30 5d 20 20 43 20 4c 5b 31 2e 30 5d 20
>bdb0	20 2d 43 20 4c 5b 33 31 31 35 2e 30 5d 21 20 20
>bdc0	3d 20 25 0a 4c 5b 34 32 36 2e 38 31 5d 21 20 20
>bdd0	43 20 4c 5b 31 2e 30 5d 20 20 2b 43 20 4c 5b 34
>bde0	32 35 2e 38 31 5d 21 20 20 3d 20 25 0a 4c 5b 30
>bdf0	2e 30 5d 20 20 43 20 4c 5b 33 2e 30 5d 20 20 7e
>be00	43 20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 31 33
>be10	32 34 38 2e 30 5d 20 20 43 20 4c 5b 33 2e 30 5d
>be20	21 20 20 2d 43 20 4c 5b 31 33 32 35 31 2e 30 5d
>be30	21 20 20 3d 20 25 0a 4c 5b 36 39 37 32 2e 30 5d
>be40	21 20 20 43 20 4c 5b 35 30 35 2e 36 5d 20 20 2d
>be50	43 20 4c 5b 37 34 37 37 2e 36 5d 20 20 3d 20 25
>be60	0a 4c 5b 33 2e 30 5d 21 20 20 43 20 4c 5b 33 2e
>be70	30 5d 21 20 20 2a 43 20 4c 5b 39 2e 30 5d 20 20
>be80	3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b
>be90	36 36 34 2e 37 37 5d 21 20 20 2b 43 20 4c 5b 36
>bea0	36 34 2e 37 37 5d 21 20 20 3d 20 25 0a 4c 5b 33
>beb0	2e 30 5d 20 20 43 20 4c 5b 32 2e 30 5d 21 20 20
>bec0	7e 43 20 4c 5b 31 5d 21 20 20 3d 20 25 0a 4c 5b
>bed0	37 33 33 2e 30 34 5d 20 20 43 20 4c 5b 30 2e 30
>bee0	5d 20 20 7e 43 20 4c 5b 31 5d 21 20 20 3d 20 25
>bef0	0a 4c 5b 36 31 37 2e 30 5d 21 20 20 43 20 4c 5b
>bf00	36 32 33 2e 33 32 5d 21 20 20 2d 43 20 4c 5b 36
>bf10	2e 33 32 5d 21 20 20 3d 20 25 0a 4c 5b 35 37 38
>bf20	2e 39 37 5d 21 20 20 43 20 4c 5b 34 39 31 38 2e
>bf30	30 5d 20 20 2d 43 20 4c 5b 35 34 39 36 2e 39 37
>bf40	5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43
>bf50	20 4c 5b 32 2e 30 5d 21 20 20 2a 43 20 4c 5b 30
>bf60	2e 30 5d 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20
>bf70	20 43 20 4c 5b 37 38 38 36 2e 30 5d 20 20 7e 43
>bf80	20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 31 2e 30
>bf90	5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f 43 20
>bfa0	4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 30
>bfb0	33 37 37 2e 30 5d 20 20 43 20 4c 5b 31 33 33 37
>bfc0	2e 31 32 5d 21 20 20 2f 43 20 4c 5b 30 2e 31 32
>bfd0	38 38 35 34 32 5d 21 20 20 3d 20 25 0a 4c 5b 30
>bfe0	2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e
>bff0	43 20 4c 5b 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e
>c000	30 5d 20 20 43 20 4c 5b 31 38 31 36 2e 30 5d 21
>c010	20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25
>c020	0a 4c 5b 31 2e 30 5d 20 20 43 20 4c 5b 37 34 35
>c030	34 2e 30 5d 21 20 20 7e 43 20 4c 5b 31 5d 21 20
>c040	20 3d 20 25 0a 4c 5b 31 38 37 37 33 2e 30 5d 20
>c050	20 43 20 4c 5b 33 2e 30 5d 20 20 7e 43 20 4c 5b
>c060	31 5d 21 20 20 3d 20 25 0a 4c 5b 36 30 34 37 2e
>c070	30 5d 20 20 43 20 4c 5b 31 2e 30 5d 20 20 2a 43
>c080	20 4c 5b 36 30 34 37 2e 30 5d 20 20 3d 20 25 0a
>c090	4c 5b 32 2e 30 5d 21 20 20 43 20 4c 5b 34 32 38
>c0a0	33 2e 30 5d 20 20 2b 43 20 4c 5b 34 32 38 31 2e
>c0b0	30 5d 20 20 3d 20 25 0a 4c 5b 32 34 34 2e 34 31
>c0c0	5d 20 20 43 20 4c 5b 31 37 33 38 2e 30 5d 20 20
>c0d0	2b 43 20 4c 5b 31 39 38 32 2e 34 31 5d 20 20 3d
>c0e0	20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 32
>c0f0	37 2e 30 38 5d 21 20 20 2b 43 20 4c 5b 32 37 2e
>c100	30 38 5d 21 20 20 3d 20 25 0a 4c 5b 31 2e 30 5d
>c110	21 20 20 43 20 4c 5b 31 39 34 36 34 2e 30 5d 20
>c120	20 2d 43 20 4c 5b 31 39 34 36 35 2e 30 5d 20 20
>c130	3d 20 25 0a 4c 5b 31 38 37 34 2e 38 35 5d 21 20
>c140	20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b
>c150	31 5d 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 20
>c160	43 20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c 5b 33
>c170	2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 31 33 32 33
>c180	36 2e 30 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20
>c190	20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a
>c1a0	4c 5b 31 35 30 37 37 2e 30 5d 21 20 20 43 20 4c
>c1b0	5b 31 2e 30 5d 21 20 20 2b 43 20 4c 5b 31 35 30
>c1c0	37 38 2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 31 30
>c1d0	36 34 33 2e 30 5d 20 20 43 20 4c 5b 33 2e 30 5d
>c1e0	21 20 20 2a 43 20 4c 5b 33 31 39 32 39 2e 30 5d
>c1f0	21 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43
>c200	20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b 30 5d
>c210	20 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 20 43 20
>c220	4c 5b 30 2e 30 5d 20 20 2a 43 20 4c 5b 30 2e 30
>c230	5d 20 20 3d 20 25 0a 4c 5b 31 37 35 36 2e 34 35
>c240	5d 20 20 43 20 4c 5b 31 32 36 34 32 2e 30 5d 20
>c250	20 2d 43 20 4c 5b 31 30 38 38 35 2e 35 35 5d 20
>c260	20 3d 20 25 0a 4c 5b 31 30 37 31 32 2e 30 5d 21
>c270	20 20 43 20 4c 5b 37 34 38 37 2e 30 5d 21 20 20
>c280	7e 43 20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 30
>c290	2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2d
>c2a0	43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b
>c2b0	31 32 34 36 34 2e 30 5d 20 20 43 20 4c 5b 39 38
>c2c0	36 2e 37 32 5d 20 20 7e 43 20 4c 5b 31 5d 21 20
>c2d0	20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c
>c2e0	5b 31 37 31 32 2e 30 5d 21 20 20 7e 43 20 4c 5b
>c2f0	31 5d 21 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 21
>c300	20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f 43 20 4c
>c310	5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 32 2e 30
>c320	5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43
>c330	20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 31 34 35
>c340	36 2e 39 39 5d 20 20 43 20 4c 5b 33 2e 30 5d 20
>c350	20 7e 43 20 4c 5b 31 5d 21 20 20 3d 20 25 0a 4c
>c360	5b 33 2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20
>c370	20 2f 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a
>c380	4c 5b 36 37 31 2e 31 32 5d 20 20 43 20 4c 5b 30
>c390	2e 30 5d 20 20 2d 43 20 4c 5b 36 37 31 2e 31 32
>c3a0	5d 21 20 20 3d 20 25 0a 4c 5b 31 36 34 39 2e 36
>c3b0	38 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2b
>c3c0	43 20 4c 5b 31 36 34 39 2e 36 38 5d 21 20 20 3d
>c3d0	20 25 0a 4c 5b 31 36 35 33 35 2e 30 5d 20 20 43
>c3e0	20 4c 5b 33 2e 30 5d 21 20 20 2b 43 20 4c 5b 31
>c3f0	36 35 33 32 2e 30 5d 20 20 3d 20 25 0a 4c 5b 37
>c400	35 37 2e 36 5d 21 20 20 43 20 4c 5b 31 33 35 34
>c410	2e 30 5d 21 20 20 2f 43 20 4c 5b 31 2e 37 38 37
>c420	32 32 33 5d 20 20 3d 20 25 0a 4c 5b 32 35 32 2e
>c430	38 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f
>c440	43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b
>c450	31 2e 30 5d 21 20 20 43 20 4c 5b 31 35 37 32 2e
>c460	32 31 5d 21 20 20 2a 43 20 4c 5b 31 35 37 32 2e
>c470	32 31 5d 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20
>c480	20 43 20 4c 5b 31 33 32 33 2e 33 31 5d 20 20 2b
>c490	43 20 4c 5b 31 33 32 35 2e 33 31 5d 20 20 3d 20
>c4a0	25 0a 4c 5b 31 31 39 2e 36 31 5d 20 20 43 20 4c
>c4b0	5b 35 30 31 2e 30 36 5d 21 20 20 2d 43 20 4c 5b
>c4c0	36 32 30 2e 36 37 5d 21 20 20 3d 20 25 0a 4c 5b
>c4d0	38 35 38 2e 32 32 5d 20 20 43 20 4c 5b 31 38 32
>c4e0	32 34 2e 30 5d 20 20 2b 43 20 4c 5b 31 39 30 38
>c4f0	32 2e 32 32 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30
>c500	5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2b 43 20
>c510	4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e
>c520	30 5d 20 20 43 20 4c 5b 31 32 30 38 2e 34 32 5d
>c530	21 20 20 7e 43 20 4c 5b 31 5d 21 20 20 3d 20 25
>c540	0a 4c 5b 31 35 34 32 2e 30 32 5d 20 20 43 20 4c
>c550	5b 30 2e 30 5d 20 20 2b 43 20 4c 5b 31 35 34 32
>c560	2e 30 32 5d 20 20 3d 20 25 0a 4c 5b 36 34 38 32
>c570	2e 30 5d 20 20 43 20 4c 5b 31 32 32 34 38 2e 30
>c580	5d 20 20 2f 43 20 4c 5b 31 2e 38 38 39 35 34 5d
>c590	20 20 3d 20 25 0a 4c 5b 34 33 32 2e 35 34 5d 21
>c5a0	20 20 43 20 4c 5b 33 31 39 36 2e 30 5d 21 20 20
>c5b0	7e 43 20 4c 5b 31 5d 21 20 20 3d 20 25 0a 4c 5b
>c5c0	31 38 36 38 2e 39 34 5d 21 20 20 43 20 4c 5b 31
>c5d0	38 36 38 2e 39 34 5d 21 20 20 2d 43 20 4c 5b 30
>c5e0	2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20
>c5f0	20 43 20 4c 5b 35 33 36 2e 30 5d 21 20 20 2d 43
>c600	20 4c 5b 35 33 36 2e 30 5d 21 20 20 3d 20 25 0a
>c610	4c 5b 32 2e 30 5d 20 20 43 20 4c 5b 31 2e 30 5d
>c620	20 20 2f 43 20 4c 5b 30 2e 35 5d 20 20 3d 20 25
>c630	0a 4c 5b 32 2e 30 5d 20 20 43 20 4c 5b 31 33 36
>c640	38 39 2e 30 5d 21 20 20 2b 43 20 4c 5b 31 33 36
>c650	38 37 2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 31 2e
>c660	30 5d 21 20 20 43 20 4c 5b 31 2e 30 5d 20 20 2f
>c670	43 20 4c 5b 31 2e 30 5d 21 20 20 3d 20 25 0a 4c
>c680	5b 35 35 2e 31 31 5d 21 20 20 43 20 4c 5b 31 31
>c690	36 35 39 2e 30 5d 21 20 20 7e 43 20 4c 5b 31 5d
>c6a0	21 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 20 43
>c6b0	20 4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b 32 2e
>c6c0	30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>c6d0	43 20 4c 5b 31 33 32 36 34 2e 30 5d 20 20 7e 43
>c6e0	20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 38 34 33
>c6f0	33 2e 30 5d 20 20 43 20 4c 5b 33 2e 30 5d 21 20
>c700	20 2d 43 20 4c 5b 38 34 33 36 2e 30 5d 21 20 20
>c710	3d 20 25 0a 4c 5b 31 37 31 31 2e 34 31 5d 20 20
>c720	43 20 4c 5b 32 2e 30 5d 20 20 2f 43 20 4c 5b 30
>c730	2e 30 30 31 31 36 38 36 32 37 5d 20 20 3d 20 25
>c740	0a 4c 5b 31 39 30 32 33 2e 30 5d 20 20 43 20 4c
>c750	5b 31 30 31 30 38 2e 30 5d 21 20 20 2f 43 20 4c
>c760	5b 30 2e 35 33 31 33 35 36 38 5d 21 20 20 3d 20
>c770	25 0a 4c 5b 31 31 32 31 31 2e 30 5d 21 20 20 43
>c780	20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c 5b 31 31
>c790	32 31 31 2e 30 5d 20 20 3d 20 25 0a 4c 5b 33 2e
>c7a0	30 5d 20 20 43 20 4c 5b 32 2e 30 5d 21 20 20 2a
>c7b0	43 20 4c 5b 36 2e 30 5d 21 20 20 3d 20 25 0a 4c
>c7c0	5b 39 37 35 2e 38 38 5d 20 20 43 20 4c 5b 37 34
>c7d0	30 2e 30 39 5d 21 20 20 2b 43 20 4c 5b 32 33 35
>c7e0	2e 37 39 5d 20 20 3d 20 25 0a 4c 5b 34 31 37 2e
>c7f0	30 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f
>c800	43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b
>c810	32 2e 30 5d 21 20 20 43 20 4c 5b 31 33 39 34 38
>c820	2e 30 5d 21 20 20 2d 43 20 4c 5b 31 33 39 34 36
>c830	2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 31 33 32 35
>c840	2e 32 35 5d 20 20 43 20 4c 5b 34 34 32 2e 30 5d
>c850	20 20 2b 43 20 4c 5b 31 37 36 37 2e 32 35 5d 20
>c860	20 3d 20 25 0a 4c 5b 33 39 2e 38 32 5d 21 20 20
>c870	43 20 4c 5b 31 31 38 38 33 2e 30 5d 20 20 7e 43
>c880	20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 39 38 35
>c890	37 2e 30 5d 20 20 43 20 4c 5b 34 33 39 32 2e 30
>c8a0	5d 20 20 2f 43 20 4c 5b 30 2e 34 34 35 35 37 31
>c8b0	37 5d 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 20
>c8c0	43 20 4c 5b 31 36 34 34 36 2e 30 5d 20 20 2d 43
>c8d0	20 4c 5b 31 36 34 34 33 2e 30 5d 20 20 3d 20 25
>c8e0	0a 4c 5b 33 2e 30 5d 21 20 20 43 20 4c 5b 31 2e
>c8f0	30 5d 20 20 7e 43 20 4c 5b 31 5d 20 20 3d 20 25
>c900	0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30
>c910	5d 20 20 2d 43 20 4c 5b 30 2e 30 5d 20 20 3d 20
>c920	25 0a 4c 5b 33 2e 30 5d 21 20 20 43 20 4c 5b 30
>c930	2e 30 5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20
>c940	3d 20 25 0a 4c 5b 31 33 31 34 2e 32 34 5d 21 20
>c950	20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b
>c960	31 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>c970	43 20 4c 5b 31 39 35 39 2e 30 5d 21 20 20 2d 43
>c980	20 4c 5b 31 39 35 39 2e 30 5d 21 20 20 3d 20 25
>c990	0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30
>c9a0	5d 20 20 2b 43 20 4c 5b 30 2e 30 5d 20 20 3d 20
>c9b0	25 0a 4c 5b 39 39 36 2e 32 38 5d 20 20 43 20 4c
>c9c0	5b 35 36 38 33 2e 30 5d 20 20 2b 43 20 4c 5b 36
>c9d0	36 37 39 2e 32 38 5d 20 20 3d 20 25 0a 4c 5b 31
>c9e0	30 34 33 2e 31 37 5d 20 20 43 20 4c 5b 32 2e 30
>c9f0	5d 21 20 20 2a 43 20 4c 5b 32 30 38 36 2e 33 34
>ca00	5d 21 20 20 3d 20 25 0a 4c 5b 31 35 33 37 37 2e
>ca10	30 5d 20 20 43 20 4c 5b 31 2e 30 5d 20 20 2b 43
>ca20	20 4c 5b 31 35 33 37 38 2e 30 5d 20 20 3d 20 25
>ca30	0a 4c 5b 31 33 32 34 2e 30 34 5d 20 20 43 20 4c
>ca40	5b 31 36 31 37 31 2e 30 5d 20 20 2d 43 20 4c 5b
>ca50	31 34 38 34 36 2e 39 36 5d 20 20 3d 20 25 0a 4c
>ca60	5b 31 39 37 33 2e 31 34 5d 20 20 43 20 4c 5b 33
>ca70	2e 30 5d 20 20 2a 43 20 4c 5b 35 39 31 39 2e 34
>ca80	32 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>ca90	43 20 4c 5b 33 2e 30 5d 20 20 2d 43 20 4c 5b 33
>caa0	2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 34 35 31 38
>cab0	2e 30 5d 20 20 43 20 4c 5b 31 2e 30 5d 21 20 20
>cac0	2a 43 20 4c 5b 31 34 35 31 38 2e 30 5d 21 20 20
>cad0	3d 20 25 0a 4c 5b 31 35 31 34 32 2e 30 5d 20 20
>cae0	43 20 4c 5b 31 33 31 38 37 2e 30 5d 21 20 20 2f
>caf0	43 20 4c 5b 30 2e 38 37 30 38 38 38 39 5d 21 20
>cb00	20 3d 20 25 0a 4c 5b 31 38 36 37 2e 31 33 5d 20
>cb10	20 43 20 4c 5b 31 2e 30 5d 20 20 2d 43 20 4c 5b
>cb20	31 38 36 36 2e 31 33 5d 21 20 20 3d 20 25 0a 4c
>cb30	5b 31 30 32 33 38 2e 30 5d 21 20 20 43 20 4c 5b
>cb40	30 2e 30 5d 20 20 7e 43 20 4c 5b 31 5d 20 20 3d
>cb50	20 25 0a 4c 5b 36 35 33 2e 36 32 5d 20 20 43 20
>cb60	4c 5b 31 2e 30 5d 21 20 20 2a 43 20 4c 5b 36 35
>cb70	33 2e 36 32 5d 21 20 20 3d 20 25 0a 4c 5b 30 2e
>cb80	30 5d 20 20 43 20 4c 5b 31 38 37 35 2e 37 36 5d
>cb90	21 20 20 2d 43 20 4c 5b 31 38 37 35 2e 37 36 5d
>cba0	21 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43
>cbb0	20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c 5b 30 2e
>cbc0	30 5d 20 20 3d 20 25 0a 4c 5b 31 2e 30 5d 21 20
>cbd0	20 43 20 4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b
>cbe0	31 2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 31 39 34
>cbf0	37 37 2e 30 5d 20 20 43 20 4c 5b 31 38 35 36 2e
>cc00	31 36 5d 21 20 20 2d 43 20 4c 5b 32 31 33 33 33
>cc10	2e 31 36 5d 21 20 20 3d 20 25 0a 4c 5b 31 31 31
>cc20	2e 30 5d 21 20 20 43 20 4c 5b 32 2e 30 5d 20 20
>cc30	2d 43 20 4c 5b 31 31 33 2e 30 5d 20 20 3d 20 25
>cc40	0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 31 30 32
>cc50	31 2e 34 38 5d 21 20 20 2a 43 20 4c 5b 30 2e 30
>cc60	5d 20 20 3d 20 25 0a 4c 5b 31 2e 30 5d 21 20 20
>cc70	43 20 4c 5b 35 38 37 2e 32 31 5d 21 20 20 2f 43
>cc80	20 4c 5b 35 38 37 2e 32 31 5d 20 20 3d 20 25 0a
>cc90	4c 5b 33 35 33 2e 37 37 5d 21 20 20 43 20 4c 5b
>cca0	31 37 35 34 34 2e 30 5d 20 20 2b 43 20 4c 5b 31
>ccb0	37 31 39 30 2e 32 33 5d 20 20 3d 20 25 0a 4c 5b
>ccc0	32 2e 30 5d 21 20 20 43 20 4c 5b 31 31 37 39 34
>ccd0	2e 30 5d 20 20 2b 43 20 4c 5b 31 31 37 39 32 2e
>cce0	30 5d 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 20
>ccf0	43 20 4c 5b 31 30 30 33 31 2e 30 5d 20 20 2f 43
>cd00	20 4c 5b 33 33 34 33 2e 36 36 37 5d 20 20 3d 20
>cd10	25 0a 4c 5b 32 32 2e 31 32 5d 20 20 43 20 4c 5b
>cd20	31 2e 30 5d 20 20 2a 43 20 4c 5b 32 32 2e 31 32
>cd30	5d 20 20 3d 20 25 0a 4c 5b 36 30 31 33 2e 30 5d
>cd40	21 20 20 43 20 4c 5b 31 2e 30 5d 21 20 20 2f 43
>cd50	20 4c 5b 30 2e 30 30 30 31 36 36 33 30 36 33 5d
>cd60	20 20 3d 20 25 0a 4c 5b 31 2e 30 5d 20 20 43 20
>cd70	4c 5b 33 35 31 2e 34 35 5d 20 20 2a 43 20 4c 5b
>cd80	33 35 31 2e 34 35 5d 20 20 3d 20 25 0a 4c 5b 30
>cd90	2e 30 5d 20 20 43 20 4c 5b 31 39 37 37 31 2e 30
>cda0	5d 20 20 2d 43 20 4c 5b 31 39 37 37 31 2e 30 5d
>cdb0	20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 21 20 20 43
>cdc0	20 4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b 33 2e
>cdd0	30 5d 21 20 20 3d 20 25 0a 4c 5b 31 33 34 37 2e
>cde0	31 33 5d 21 20 20 43 20 4c 5b 37 30 2e 34 35 5d
>cdf0	20 20 2f 43 20 4c 5b 30 2e 30 35 32 32 39 36 33
>ce00	36 5d 21 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20
>ce10	20 43 20 4c 5b 32 35 30 2e 30 5d 21 20 20 2b 43
>ce20	20 4c 5b 32 35 30 2e 30 5d 21 20 20 3d 20 25 0a
>ce30	4c 5b 31 39 39 30 31 2e 30 5d 21 20 20 43 20 4c
>ce40	5b 33 30 30 2e 30 5d 21 20 20 7e 43 20 4c 5b 31
>ce50	5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43
>ce60	20 4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b 30 2e
>ce70	30 5d 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20 20
>ce80	43 20 4c 5b 33 2e 30 5d 20 20 2a 43 20 4c 5b 39
>ce90	2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 35 36 37 31
>cea0	2e 30 5d 21 20 20 43 20 4c 5b 32 2e 30 5d 20 20
>ceb0	2a 43 20 4c 5b 33 31 33 34 32 2e 30 5d 21 20 20
>cec0	3d 20 25 0a 4c 5b 38 36 38 34 2e 30 5d 20 20 43
>ced0	20 4c 5b 33 2e 30 5d 20 20 2d 43 20 4c 5b 38 36
>cee0	38 31 2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 33 2e
>cef0	30 5d 21 20 20 43 20 4c 5b 39 36 32 2e 33 32 5d
>cf00	21 20 20 2b 43 20 4c 5b 39 36 35 2e 33 32 5d 21
>cf10	20 20 3d 20 25 0a 4c 5b 32 37 39 35 2e 30 5d 20
>cf20	20 43 20 4c 5b 31 2e 30 5d 21 20 20 2d 43 20 4c
>cf30	5b 32 37 39 36 2e 30 5d 21 20 20 3d 20 25 0a 4c
>cf40	5b 32 30 2e 34 31 5d 21 20 20 43 20 4c 5b 30 2e
>cf50	30 5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d
>cf60	20 25 0a 4c 5b 32 2e 30 5d 20 20 43 20 4c 5b 33
>cf70	2e 30 5d 20 20 2a 43 20 4c 5b 36 2e 30 5d 20 20
>cf80	3d 20 25 0a 4c 5b 31 38 30 33 2e 38 35 5d 21 20
>cf90	20 43 20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c 5b
>cfa0	31 38 30 33 2e 38 35 5d 20 20 3d 20 25 0a 4c 5b
>cfb0	30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20
>cfc0	2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c
>cfd0	5b 37 39 34 2e 38 39 5d 20 20 43 20 4c 5b 33 2e
>cfe0	30 5d 20 20 2f 43 20 4c 5b 30 2e 30 30 33 37 37
>cff0	34 31 30 37 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30
>d000	5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2a 43 20
>d010	4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e
>d020	30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2d 43
>d030	20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30
>d040	2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e
>d050	43 20 4c 5b 30 5d 20 20 3d 20 25 0a 4c 5b 34 37
>d060	37 2e 31 5d 20 20 43 20 4c 5b 34 37 37 2e 31 5d
>d070	20 20 2f 43 20 4c 5b 31 2e 30 5d 20 20 3d 20 25
>d080	0a 4c 5b 33 34 37 2e 34 38 5d 20 20 43 20 4c 5b
>d090	34 37 39 38 2e 30 5d 20 20 2f 43 20 4c 5b 31 33
>d0a0	2e 38 30 37 39 39 5d 20 20 3d 20 25 0a 4c 5b 34
>d0b0	32 38 2e 30 5d 21 20 20 43 20 4c 5b 32 2e 30 5d
>d0c0	21 20 20 2b 43 20 4c 5b 34 33 30 2e 30 5d 21 20
>d0d0	20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c
>d0e0	5b 37 34 36 2e 31 38 5d 20 20 2a 43 20 4c 5b 30
>d0f0	2e 30 5d 20 20 3d 20 25 0a 4c 5b 33 33 33 2e 35
>d100	39 5d 20 20 43 20 4c 5b 33 33 33 2e 35 39 5d 20
>d110	20 7e 43 20 4c 5b 30 5d 20 20 3d 20 25 0a 4c 5b
>d120	33 2e 30 5d 21 20 20 43 20 4c 5b 31 38 38 39 2e
>d130	39 39 5d 21 20 20 2d 43 20 4c 5b 31 38 38 36 2e
>d140	39 39 5d 21 20 20 3d 20 25 0a 4c 5b 31 39 35 31
>d150	39 2e 30 5d 21 20 20 43 20 4c 5b 31 2e 30 5d 21
>d160	20 20 2d 43 20 4c 5b 31 39 35 31 38 2e 30 5d 20
>d170	20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c
>d180	5b 38 34 34 36 2e 30 5d 21 20 20 2a 43 20 4c 5b
>d190	30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 32 38 33 2e
>d1a0	34 35 5d 21 20 20 43 20 4c 5b 32 38 33 2e 34 35
>d1b0	5d 21 20 20 7e 43 20 4c 5b 30 5d 20 20 3d 20 25
>d1c0	0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30
>d1d0	5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20
>d1e0	25 0a 4c 5b 31 37 33 32 35 2e 30 5d 21 20 20 43
>d1f0	20 4c 5b 30 2e 30 5d 20 20 2f 43 20 4c 5b 30 2e
>d200	30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>d210	43 20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b 30
>d220	5d 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d 21 20 20
>d230	43 20 4c 5b 30 2e 30 5d 20 20 2a 43 20 4c 5b 30
>d240	2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20
>d250	20 43 20 4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b
>d260	30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d
>d270	20 20 43 20 4c 5b 34 37 39 2e 36 33 5d 20 20 2b
>d280	43 20 4c 5b 34 37 39 2e 36 33 5d 20 20 3d 20 25
>d290	0a 4c 5b 35 30 36 35 2e 30 5d 20 20 43 20 4c 5b
>d2a0	35 31 36 2e 35 31 5d 20 20 2d 43 20 4c 5b 34 35
>d2b0	34 38 2e 34 39 5d 21 20 20 3d 20 25 0a 4c 5b 31
>d2c0	35 33 32 34 2e 30 5d 21 20 20 43 20 4c 5b 30 2e
>d2d0	30 5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d
>d2e0	20 25 0a 4c 5b 37 31 38 2e 34 35 5d 21 20 20 43
>d2f0	20 4c 5b 36 36 34 2e 30 36 5d 20 20 2b 43 20 4c
>d300	5b 35 34 2e 33 39 5d 21 20 20 3d 20 25 0a 4c 5b
>d310	31 2e 30 5d 20 20 43 20 4c 5b 31 33 39 33 32 2e
>d320	30 5d 21 20 20 2f 43 20 4c 5b 31 33 39 33 32 2e
>d330	30 5d 21 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20
>d340	20 43 20 4c 5b 37 30 30 2e 35 32 5d 20 20 2b 43
>d350	20 4c 5b 37 30 32 2e 35 32 5d 20 20 3d 20 25 0a
>d360	4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 31 38 32 30
>d370	2e 36 33 5d 20 20 2b 43 20 4c 5b 31 38 32 30 2e
>d380	36 33 5d 20 20 3d 20 25 0a 4c 5b 35 30 36 2e 31
>d390	5d 21 20 20 43 20 4c 5b 33 31 31 2e 30 5d 20 20
>d3a0	2f 43 20 4c 5b 30 2e 36 31 34 35 30 33 31 5d 21
>d3b0	20 20 3d 20 25 0a 4c 5b 31 35 33 33 38 2e 30 5d
>d3c0	20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c
>d3d0	5b 31 5d 21 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d
>d3e0	20 20 43 20 4c 5b 35 39 37 2e 33 5d 21 20 20 2d
>d3f0	43 20 4c 5b 35 39 37 2e 33 5d 21 20 20 3d 20 25
>d400	0a 4c 5b 31 31 33 34 2e 30 37 5d 20 20 43 20 4c
>d410	5b 30 2e 30 5d 20 20 2f 43 20 4c 5b 30 2e 30 5d
>d420	20 20 3d 20 25 0a 4c 5b 31 36 38 34 2e 30 5d 21
>d430	20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f 43 20 4c
>d440	5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30
>d450	5d 20 20 43 20 4c 5b 31 36 35 33 2e 30 34 5d 20
>d460	20 2b 43 20 4c 5b 31 36 35 33 2e 30 34 5d 20 20
>d470	3d 20 25 0a 4c 5b 32 32 33 2e 32 37 5d 20 20 43
>d480	20 4c 5b 31 2e 30 5d 21 20 20 2d 43 20 4c 5b 32
>d490	32 34 2e 32 37 5d 21 20 20 3d 20 25 0a 4c 5b 30
>d4a0	2e 30 5d 20 20 43 20 4c 5b 34 31 34 33 2e 30 5d
>d4b0	20 20 7e 43 20 4c 5b 31 5d 20 20 3d 20 25 0a 4c
>d4c0	5b 31 2e 30 5d 21 20 20 43 20 4c 5b 30 2e 30 5d
>d4d0	20 20 2d 43 20 4c 5b 31 2e 30 5d 20 20 3d 20 25
>d4e0	0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30
>d4f0	5d 20 20 2d 43 20 4c 5b 30 2e 30 5d 20 20 3d 20
>d500	25 0a 4c 5b 39 33 35 37 2e 30 5d 21 20 20 43 20
>d510	4c 5b 30 2e 30 5d 20 20 2f 43 20 4c 5b 30 2e 30
>d520	5d 20 20 3d 20 25 0a 4c 5b 31 34 37 36 2e 34 38
>d530	5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43
>d540	20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 31 31 37
>d550	39 2e 33 33 5d 21 20 20 43 20 4c 5b 30 2e 30 5d
>d560	20 20 2d 43 20 4c 5b 31 31 37 39 2e 33 33 5d 20
>d570	20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c
>d580	5b 33 36 37 38 2e 30 5d 20 20 2a 43 20 4c 5b 30
>d590	2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20
>d5a0	20 43 20 4c 5b 31 35 37 33 36 2e 30 5d 21 20 20
>d5b0	2d 43 20 4c 5b 31 35 37 33 36 2e 30 5d 21 20 20
>d5c0	3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b
>d5d0	31 2e 30 5d 20 20 2d 43 20 4c 5b 31 2e 30 5d 20
>d5e0	20 3d 20 25 0a 4c 5b 31 38 38 39 2e 30 5d 20 20
>d5f0	43 20 4c 5b 31 33 33 2e 33 38 5d 20 20 2b 43 20
>d600	4c 5b 32 30 32 32 2e 33 38 5d 20 20 3d 20 25 0a
>d610	4c 5b 31 31 36 33 2e 37 32 5d 21 20 20 43 20 4c
>d620	5b 31 30 31 34 2e 36 33 5d 20 20 2d 43 20 4c 5b
>d630	32 31 37 38 2e 33 35 5d 20 20 3d 20 25 0a 4c 5b
>d640	30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20
>d650	2b 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c
>d660	5b 31 32 35 39 2e 30 5d 21 20 20 43 20 4c 5b 30
>d670	2e 30 5d 20 20 2b 43 20 4c 5b 31 32 35 39 2e 30
>d680	5d 21 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>d690	43 20 4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b 30
>d6a0	2e 30 5d 20 20 3d 20 25 0a 4c 5b 35 35 39 2e 35
>d6b0	39 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f 43
>d6c0	20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 32
>d6d0	37 33 2e 35 33 5d 21 20 20 43 20 4c 5b 30 2e 30
>d6e0	5d 20 20 2d 43 20 4c 5b 32 37 33 2e 35 33 5d 20
>d6f0	20 3d 20 25 0a 4c 5b 35 30 36 2e 31 39 5d 21 20
>d700	20 43 20 4c 5b 33 2e 30 5d 21 20 20 2b 43 20 4c
>d710	5b 35 30 39 2e 31 39 5d 21 20 20 3d 20 25 0a 4c
>d720	5b 32 2e 30 5d 21 20 20 43 20 4c 5b 32 2e 30 5d
>d730	21 20 20 2f 43 20 4c 5b 31 2e 30 5d 20 20 3d 20
>d740	25 0a 4c 5b 37 38 30 36 2e 30 5d 20 20 43 20 4c
>d750	5b 30 2e 30 5d 20 20 2d 43 20 4c 5b 37 38 30 36
>d760	2e 30 5d 21 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d
>d770	20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f 43 20 4c
>d780	5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 34 37
>d790	34 2e 38 34 5d 20 20 43 20 4c 5b 31 32 38 2e 36
>d7a0	33 5d 20 20 7e 43 20 4c 5b 31 5d 21 20 20 3d 20
>d7b0	25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e
>d7c0	30 5d 20 20 2b 43 20 4c 5b 30 2e 30 5d 20 20 3d
>d7d0	20 25 0a 4c 5b 39 31 30 38 2e 30 5d 20 20 43 20
>d7e0	4c 5b 30 2e 30 5d 20 20 2f 43 20 4c 5b 30 2e 30
>d7f0	5d 20 20 3d 20 25 0a 4c 5b 35 39 39 2e 30 5d 20
>d800	20 43 20 4c 5b 30 2e 30 5d 20 20 2a 43 20 4c 5b
>d810	30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d
>d820	20 20 43 20 4c 5b 33 2e 30 5d 20 20 2d 43 20 4c
>d830	5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30
>d840	5d 20 20 43 20 4c 5b 31 37 37 34 37 2e 30 5d 21
>d850	20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25
>d860	0a 4c 5b 31 37 35 35 2e 37 39 5d 20 20 43 20 4c
>d870	5b 33 2e 30 5d 21 20 20 2d 43 20 4c 5b 31 37 35
>d880	38 2e 37 39 5d 21 20 20 3d 20 25 0a 4c 5b 34 34
>d890	31 37 2e 30 5d 21 20 20 43 20 4c 5b 30 2e 30 5d
>d8a0	20 20 2f 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25
>d8b0	0a 4c 5b 31 38 37 38 2e 34 34 5d 20 20 43 20 4c
>d8c0	5b 30 2e 30 5d 20 20 7e 43 20 4c 5b 31 5d 21 20
>d8d0	20 3d 20 25 0a 4c 5b 31 30 32 2e 34 36 5d 21 20
>d8e0	20 43 20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c 5b
>d8f0	31 30 32 2e 34 36 5d 20 20 3d 20 25 0a 4c 5b 31
>d900	2e 30 5d 20 20 43 20 4c 5b 32 2e 30 5d 20 20 2a
>d910	43 20 4c 5b 32 2e 30 5d 20 20 3d 20 25 0a 4c 5b
>d920	31 31 37 35 2e 39 35 5d 21 20 20 43 20 4c 5b 31
>d930	38 30 36 38 2e 30 5d 21 20 20 7e 43 20 4c 5b 31
>d940	5d 21 20 20 3d 20 25 0a 4c 5b 35 36 36 2e 38 38
>d950	5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2a 43
>d960	20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 32
>d970	2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2a
>d980	43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b
>d990	31 2e 30 5d 21 20 20 43 20 4c 5b 31 30 32 32 32
>d9a0	2e 30 5d 21 20 20 2f 43 20 4c 5b 31 30 32 32 32
>d9b0	2e 30 5d 20 20 3d 20 25 0a 4c 5b 36 30 37 2e 37
>d9c0	38 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2a
>d9d0	43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b
>d9e0	33 2e 30 5d 21 20 20 43 20 4c 5b 38 38 38 2e 36
>d9f0	38 5d 20 20 2d 43 20 4c 5b 38 39 31 2e 36 38 5d
>da00	20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20
>da10	4c 5b 31 30 30 34 2e 34 34 5d 21 20 20 2a 43 20
>da20	4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30 2e
>da30	30 5d 20 20 43 20 4c 5b 33 33 38 2e 33 38 5d 21
>da40	20 20 2d 43 20 4c 5b 33 33 38 2e 33 38 5d 21 20
>da50	20 3d 20 25 0a 4c 5b 36 36 38 2e 30 5d 20 20 43
>da60	20 4c 5b 30 2e 30 5d 20 20 2a 43 20 4c 5b 30 2e
>da70	30 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20
>da80	43 20 4c 5b 31 32 31 30 37 2e 30 5d 20 20 2b 43
>da90	20 4c 5b 31 32 31 30 37 2e 30 5d 20 20 3d 20 25
>daa0	0a 4c 5b 31 37 32 39 34 2e 30 5d 20 20 43 20 4c
>dab0	5b 31 37 32 39 34 2e 30 5d 20 20 2d 43 20 4c 5b
>dac0	30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d
>dad0	20 20 43 20 4c 5b 31 36 35 38 2e 30 5d 20 20 2f
>dae0	43 20 4c 5b 35 35 32 2e 36 36 36 37 5d 20 20 3d
>daf0	20 25 0a 4c 5b 34 35 34 2e 36 38 5d 21 20 20 43
>db00	20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b 31 5d
>db10	20 20 3d 20 25 0a 4c 5b 31 34 30 38 35 2e 30 5d
>db20	20 20 43 20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c
>db30	5b 31 34 30 38 35 2e 30 5d 21 20 20 3d 20 25 0a
>db40	4c 5b 32 2e 30 5d 21 20 20 43 20 4c 5b 30 2e 30
>db50	5d 20 20 7e 43 20 4c 5b 31 5d 20 20 3d 20 25 0a
>db60	4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d
>db70	20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25
>db80	0a 4c 5b 32 2e 30 5d 21 20 20 43 20 4c 5b 31 33
>db90	32 37 2e 35 39 5d 21 20 20 2f 43 20 4c 5b 36 36
>dba0	33 2e 37 39 35 5d 20 20 3d 20 25 0a 4c 5b 33 2e
>dbb0	30 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 7e
>dbc0	43 20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 31 33
>dbd0	32 36 2e 35 32 5d 21 20 20 43 20 4c 5b 30 2e 30
>dbe0	5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20
>dbf0	25 0a 4c 5b 32 2e 30 5d 20 20 43 20 4c 5b 32 2e
>dc00	30 5d 20 20 2f 43 20 4c 5b 31 2e 30 5d 20 20 3d
>dc10	20 25 0a 4c 5b 32 30 2e 37 34 5d 20 20 43 20 4c
>dc20	5b 30 2e 30 5d 20 20 2d 43 20 4c 5b 32 30 2e 37
>dc30	34 5d 21 20 20 3d 20 25 0a 4c 5b 31 36 38 31 2e
>dc40	32 36 5d 21 20 20 43 20 4c 5b 31 30 39 32 30 2e
>dc50	30 5d 20 20 2b 43 20 4c 5b 39 32 33 38 2e 37 34
>dc60	5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43
>dc70	20 4c 5b 31 35 33 37 35 2e 30 5d 21 20 20 2a 43
>dc80	20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 31
>dc90	2e 30 5d 20 20 43 20 4c 5b 31 32 32 2e 30 34 5d
>dca0	21 20 20 2a 43 20 4c 5b 31 32 32 2e 30 34 5d 21
>dcb0	20 20 3d 20 25 0a 4c 5b 34 36 31 38 2e 30 5d 20
>dcc0	20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b
>dcd0	31 5d 21 20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 20
>dce0	20 43 20 4c 5b 34 39 33 2e 34 34 5d 20 20 2a 43
>dcf0	20 4c 5b 31 34 38 30 2e 33 32 5d 20 20 3d 20 25
>dd00	0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30 2e 30
>dd10	5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20
>dd20	25 0a 4c 5b 31 2e 30 5d 20 20 43 20 4c 5b 31 2e
>dd30	30 5d 21 20 20 2a 43 20 4c 5b 31 2e 30 5d 21 20
>dd40	20 3d 20 25 0a 4c 5b 31 32 35 38 2e 32 31 5d 20
>dd50	20 43 20 4c 5b 30 2e 30 5d 20 20 7e 43 20 4c 5b
>dd60	31 5d 21 20 20 3d 20 25 0a 4c 5b 31 37 33 32 30
>dd70	2e 30 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20
>dd80	2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c
>dd90	5b 30 2e 30 5d 20 20 43 20 4c 5b 39 36 33 2e 35
>dda0	33 5d 21 20 20 2b 43 20 4c 5b 39 36 33 2e 35 33
>ddb0	5d 21 20 20 3d 20 25 0a 4c 5b 31 34 36 34 2e 34
>ddc0	32 5d 21 20 20 43 20 4c 5b 31 32 33 39 37 2e 30
>ddd0	5d 20 20 2d 43 20 4c 5b 31 33 38 36 31 2e 34 32
>dde0	5d 20 20 3d 20 25 0a 4c 5b 31 2e 30 5d 20 20 43
>ddf0	20 4c 5b 32 2e 30 5d 20 20 2b 43 20 4c 5b 33 2e
>de00	30 5d 20 20 3d 20 25 0a 4c 5b 31 35 39 36 31 2e
>de10	30 5d 21 20 20 43 20 4c 5b 32 2e 30 5d 20 20 2a
>de20	43 20 4c 5b 33 31 39 32 32 2e 30 5d 21 20 20 3d
>de30	20 25 0a 4c 5b 32 2e 30 5d 21 20 20 43 20 4c 5b
>de40	30 2e 30 5d 20 20 2d 43 20 4c 5b 32 2e 30 5d 20
>de50	20 3d 20 25 0a 4c 5b 31 36 34 34 32 2e 30 5d 21
>de60	20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f 43 20 4c
>de70	5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 39 39 33
>de80	36 2e 30 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20
>de90	20 7e 43 20 4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b
>dea0	32 2e 30 5d 21 20 20 43 20 4c 5b 37 34 38 2e 36
>deb0	32 5d 20 20 2b 43 20 4c 5b 37 34 36 2e 36 32 5d
>dec0	20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20
>ded0	4c 5b 37 31 33 32 2e 30 5d 21 20 20 7e 43 20 4c
>dee0	5b 31 5d 21 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d
>def0	20 20 43 20 4c 5b 31 30 36 39 2e 37 36 5d 20 20
>df00	2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c
>df10	5b 30 2e 30 5d 20 20 43 20 4c 5b 32 37 37 2e 32
>df20	34 5d 20 20 2d 43 20 4c 5b 32 37 37 2e 32 34 5d
>df30	20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 21 20 20 43
>df40	20 4c 5b 33 2e 30 5d 21 20 20 7e 43 20 4c 5b 30
>df50	5d 20 20 3d 20 25 0a 4c 5b 31 39 30 2e 32 36 5d
>df60	21 20 20 43 20 4c 5b 31 2e 30 5d 20 20 7e 43 20
>df70	4c 5b 31 5d 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d
>df80	20 20 43 20 4c 5b 33 33 38 2e 34 38 5d 21 20 20
>df90	2f 43 20 4c 5b 31 36 39 2e 32 34 5d 21 20 20 3d
>dfa0	20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 30
>dfb0	2e 30 5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20 20
>dfc0	3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b
>dfd0	30 2e 30 5d 20 20 7e 43 20 4c 5b 30 5d 20 20 3d
>dfe0	20 25 0a 4c 5b 33 30 38 35 2e 30 5d 20 20 43 20
>dff0	4c 5b 32 35 34 2e 36 35 5d 21 20 20 2b 43 20 4c
>e000	5b 32 38 33 30 2e 33 35 5d 20 20 3d 20 25 0a 4c
>e010	5b 31 34 33 34 30 2e 30 5d 21 20 20 43 20 4c 5b
>e020	31 39 30 35 30 2e 30 5d 20 20 2b 43 20 4c 5b 34
>e030	37 31 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 30
>e040	33 34 39 2e 30 5d 21 20 20 43 20 4c 5b 33 2e 30
>e050	5d 21 20 20 7e 43 20 4c 5b 31 5d 20 20 3d 20 25
>e060	0a 4c 5b 31 2e 30 5d 21 20 20 43 20 4c 5b 30 2e
>e070	30 5d 20 20 2d 43 20 4c 5b 31 2e 30 5d 20 20 3d
>e080	20 25 0a 4c 5b 31 38 35 33 2e 32 5d 21 20 20 43
>e090	20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c 5b 31 38
>e0a0	35 33 2e 32 5d 20 20 3d 20 25 0a 4c 5b 30 2e 30
>e0b0	5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2b 43 20
>e0c0	4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 31 2e
>e0d0	30 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f
>e0e0	43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b
>e0f0	31 35 37 38 37 2e 30 5d 21 20 20 43 20 4c 5b 30
>e100	2e 30 5d 20 20 2f 43 20 4c 5b 30 2e 30 5d 20 20
>e110	3d 20 25 0a 4c 5b 32 34 32 2e 33 32 5d 21 20 20
>e120	43 20 4c 5b 32 2e 30 5d 21 20 20 7e 43 20 4c 5b
>e130	31 5d 20 20 3d 20 25 0a 4c 5b 31 2e 30 5d 20 20
>e140	43 20 4c 5b 33 39 2e 30 39 5d 21 20 20 7e 43 20
>e150	4c 5b 31 5d 21 20 20 3d 20 25 0a 4c 5b 32 31 2e
>e160	30 35 5d 20 20 43 20 4c 5b 36 30 31 2e 38 5d 20
>e170	20 2f 43 20 4c 5b 32 38 2e 35 38 39 30 37 5d 20
>e180	20 3d 20 25 0a 4c 5b 31 35 32 34 32 2e 30 5d 21
>e190	20 20 43 20 4c 5b 33 2e 30 5d 21 20 20 2b 43 20
>e1a0	4c 5b 31 35 32 34 35 2e 30 5d 21 20 20 3d 20 25
>e1b0	0a 4c 5b 30 2e 30 5d 20 20 43 20 4c 5b 35 31 36
>e1c0	2e 39 34 5d 21 20 20 2b 43 20 4c 5b 35 31 36 2e
>e1d0	39 34 5d 21 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d
>e1e0	20 20 43 20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c
>e1f0	5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 39 36 38
>e200	2e 35 35 5d 21 20 20 43 20 4c 5b 30 2e 30 5d 20
>e210	20 2a 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a
>e220	4c 5b 31 39 30 2e 30 35 5d 20 20 43 20 4c 5b 31
>e230	2e 30 5d 20 20 2f 43 20 4c 5b 30 2e 30 30 35 32
>e240	36 31 37 37 33 5d 20 20 3d 20 25 0a 4c 5b 31 34
>e250	35 38 39 2e 30 5d 21 20 20 43 20 4c 5b 31 37 31
>e260	35 2e 30 5d 20 20 7e 43 20 4c 5b 31 5d 20 20 3d
>e270	20 25 0a 4c 5b 39 39 36 32 2e 30 5d 20 20 43 20
>e280	4c 5b 33 2e 30 5d 20 20 7e 43 20 4c 5b 31 5d 21
>e290	20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43 20
>e2a0	4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b 30 2e 30
>e2b0	5d 20 20 3d 20 25 0a 4c 5b 30 2e 30 5d 20 20 43
>e2c0	20 4c 5b 30 2e 30 5d 20 20 2b 43 20 4c 5b 30 2e
>e2d0	30 5d 20 20 3d 20 25 0a 4c 5b 34 33 36 2e 30 32
>e2e0	5d 21 20 20 43 20 4c 5b 31 32 30 33 32 2e 30 5d
>e2f0	20 20 2d 43 20 4c 5b 31 32 34 36 38 2e 30 32 5d
>e300	20 20 3d 20 25 0a 4c 5b 38 32 36 2e 36 33 5d 21
>e310	20 20 43 20 4c 5b 30 2e 30 5d 20 20 2f 43 20 4c
>e320	5b 30 2e 30 5d 20 20 3d 20 25 0a 4c 5b 33 2e 30
>e330	5d 21 20 20 43 20 4c 5b 31 34 39 39 30 2e 30 5d
>e340	20 20 2a 43 20 4c 5b 34 34 39 37 30 2e 30 5d 21
>e350	20 20 3d 20 25 0a 4c 5b 35 30 34 2e 35 36 5d 20
>e360	20 43 20 4c 5b 32 2e 30 5d 20 20 2a 43 20 4c 5b
>e370	31 30 30 39 2e 31 32 5d 20 20 3d 20 25 0a 4c 5b
>e380	31 2e 30 5d 20 20 43 20 4c 5b 30 2e 30 5d 20 20
>e390	2f 43 20 4c 5b 30 2e 30 5d 20 20 3d 20 25 0a 4c
>e3a0	5b 31 34 38 31 32 2e 30 5d 21 20 20 43 20 4c 5b
>e3b0	30 2e 30 5d 20 20 2a 43 20 4c 5b 30 2e 30 5d 20
>e3c0	20 3d 20 25 0a 4c 5b 31 34 39 39 2e 34 36 5d 21
>e3d0	20 20 43 20 4c 5b 31 33 38 38 2e 34 5d 20 20 2f
>e3e0	43 20 4c 5b 30 2e 39 32 35 39 33 33 33 5d 21 20
>e3f0	20 3d 20 25 0a 4c 5b 33 30 33 39 2e 30 5d 21 20
>e400	20 43 20 4c 5b 30 2e 30 5d 20 20 2d 43 20 4c 5b
>e410	33 30 33 39 2e 30 5d 20 20 3d 20 25 0a 4c 5b 30
>e420	2e 30 5d 20 20 43 20 4c 5b 31 33 35 39 2e 36 36
>e430	5d 20 20 2d 43 20 4c 5b 31 33 35 39 2e 36 36 5d
>e440	20 20 3d 20 25 0a 4c 5b 33 2e 30 5d 21 20 20 43
>e450	20 4c 5b 30 2e 30 5d 20 20 2a 43 20 4c 5b 30 2e
>e460	30 5d 20 20 3d 20 25 0a 4c 5b 32 2e 30 5d 20 20
>e470	43 20 4c 5b 39 30 39 39 2e 30 5d 20 20 2a 43 20
>e480	4c 5b 31 38 31 39 38 2e 30 5d 20 20 3d 20 25 0a
>e490	51 0a
>e492	00						.byte 	0

;******  Return to file: basic.asm

.e493	a9 a9		lda #$a9			lda 		#toConvert & $FF
.e495	85 2a		sta $2a				sta 		zGenPtr
.e497	a9 e4		lda #$e4			lda 		#toConvert >> 8
.e499	85 2b		sta $2b				sta 		zGenPtr+1
.e49b	20 42 b2	jsr $b242			jsr 		INTFromString			; grab an integer
.e49e	b0 fe		bcs $e49e	err1:	bcs 		err1
.e4a0	20 c9 b2	jsr $b2c9			jsr 		FPFromString  			; maybe extend as decimal.
.e4a3	20 61 b1	jsr $b161			jsr 		FPToString 				; convert to string.
>e4a6	5c						.byte 		$5C
.e4a7	80 fe		bra $e4a7	h1:		bra 		h1
.e4a9					toConvert:
>e4a9	30 2e 32 00					.text 		"0.2",0
.e4ad					ERR_Handler:
.e4ad	80 fe		bra $e4ad			bra 		ERR_Handler
.e4af					NMIHandler:
.e4af	40		rti				rti
>fffa	af e4						.word		NMIHandler
>fffc	af b3						.word 		StartROM
>fffe	70 ac						.word 		TIM_BreakVector

;******  End of listing
