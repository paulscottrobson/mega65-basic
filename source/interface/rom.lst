
; 64tass Turbo Assembler Macro V1.54.1900 listing file
; 64tass -q -c -D TARGET=2 -b -L rom.lst -o rom.bin interface_test.asm
; Fri Aug  9 23:40:03 2019

;Offset	;Hex		;Monitor	;Source

;******  Command line definitions

=2					TARGET=2

;******  Processing input file: interface_test.asm

.0000	ea		nop				nop

;******  Processing file: interface_emu.asm

=80					IF_Width 	= 80 							; characters across
=25					IF_Height 	= 25 							; characters down.
=4					IF_Pos 		= 4 							; current position, start of line.
=6					IF_XPos 	= 6 							; current position, horizontal.
=$b000					IF_Screen = $B000							; 2k screen RAM here
=$b800					IF_PKeyboard = $B800						; Keyboard port.
=$b801					IF_PBreak = $B801 							; Break key.
.a000					IF_Reset:
.a000	60		rts				rts
.a001					IF_Home:
.a001	48		pha				pha
.a002	a9 00		lda #$00			lda 	#0	 						; zero X position
.a004	85 06		sta $06				sta 	IF_XPos
.a006	a9 00		lda #$00			lda 	#IF_Screen & $FF 			; set r/w pos.
.a008	85 04		sta $04				sta 	IF_Pos
.a00a	a9 b0		lda #$b0			lda 	#IF_Screen >> 8
.a00c	85 05		sta $05				sta 	IF_Pos+1
.a00e	68		pla				pla
.a00f	60		rts				rts
.a010					IF_NewLine:
.a010	48		pha				pha
.a011	a9 00		lda #$00			lda 	#0 							; back to start of line
.a013	85 06		sta $06				sta 	IF_XPos
.a015	18		clc				clc 								; down one line
.a016	a5 04		lda $04				lda 	IF_Pos
.a018	69 50		adc #$50			adc 	#80
.a01a	85 04		sta $04				sta 	IF_Pos
.a01c	90 02		bcc $a020			bcc 	_IF_NoCarry 				; carry through.
.a01e	e6 05		inc $05				inc 	IF_Pos+1
.a020					_IF_NoCarry:
.a020	68		pla				pla
.a021	60		rts				rts
.a022					IF_Read:
.a022	5a		phy				phy 								; save current Y
.a023	a4 06		ldy $06				ldy 	IF_XPos 					; read character at current position
.a025	b1 04		lda ($04),y			lda 	(IF_Pos),y
.a027	e6 06		inc $06				inc 	IF_XPos 					; step right.
.a029	7a		ply				ply									; restore Y
.a02a	60		rts				rts
.a02b					IF_Write:
.a02b	5a		phy				phy 								; save current Y
.a02c	a4 06		ldy $06				ldy 	IF_XPos 					; write character at current position
.a02e	91 04		sta ($04),y			sta 	(IF_Pos),y
.a030	e6 06		inc $06				inc 	IF_XPos 					; step right.
.a032	7a		ply				ply									; restore Y
.a033	60		rts				rts
.a034					IF_CheckBreak:
.a034	ad 01 b8	lda $b801			lda 	IF_PBreak					; non-zero if Ctrl+C pressed.
.a037	60		rts				rts
.a038					IF_GetKey:
.a038	ad 00 b8	lda $b800			lda 	IF_PKeyboard				; read keyboard
.a03b	f0 07		beq $a044			beq		_IFGK_NoKey 				; skip if zero,no key pressed
.a03d	48		pha				pha 								; key pressed, clear queue.
.a03e	a9 00		lda #$00			lda 	#0
.a040	8d 00 b8	sta $b800			sta 	IF_PKeyboard
.a043	68		pla				pla
.a044					_IFGK_NoKey:
.a044	09 00		ora #$00			ora 	#0							; set Z flag appropriately.
.a046	60		rts				rts

;******  Return to file: interface_test.asm

.a047					TestCode:
.a047	a2 ff		ldx #$ff			ldx 		#$FF 					; empty stack
.a049	9a		txs				txs
.a04a	20 00 a0	jsr $a000			jsr 		IF_Reset 				; reset external interface
.a04d	20 01 a0	jsr $a001			jsr 		IF_Home 				; home r/w cursor to (0,0)
.a050	20 01 a0	jsr $a001	WaitKey:jsr 		IF_Home
.a053	20 34 a0	jsr $a034			jsr 		IF_CheckBreak
.a056	20 2b a0	jsr $a02b			jsr 		IF_Write
.a059	20 10 a0	jsr $a010			jsr 		IF_NewLine
.a05c	20 38 a0	jsr $a038			jsr 		IF_GetKey				; get a single key.
.a05f	f0 ef		beq $a050			beq 		WaitKey
.a061	48		pha				pha 								; write out what it is.
.a062	4a		lsr a				lsr 		a
.a063	4a		lsr a				lsr 		a
.a064	4a		lsr a				lsr 		a
.a065	4a		lsr a				lsr 		a
.a066	20 6f a0	jsr $a06f			jsr 		Nibble
.a069	68		pla				pla
.a06a	20 6f a0	jsr $a06f			jsr 		Nibble
.a06d	80 e1		bra $a050			bra 		WaitKey
.a06f	29 0f		and #$0f	Nibble:	and 		#15
.a071	c9 0a		cmp #$0a			cmp 		#10
.a073	90 03		bcc $a078			bcc 		_NINoSub
.a075	38		sec				sec
.a076	e9 39		sbc #$39			sbc 		#48+9
.a078					_NINoSub:
.a078	18		clc				clc
.a079	69 30		adc #$30			adc 		#48
.a07b	20 2b a0	jsr $a02b			jsr 		IF_Write
.a07e	60		rts				rts
.a07f					DummyRoutine:
.a07f	40		rti				rti
>fffa	7f a0						.word		DummyRoutine
>fffc	47 a0						.word 		TestCode
>fffe	7f a0						.word 		DummyRoutine

;******  End of listing
