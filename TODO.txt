TODO
====
- 	Think about the tokenising format - tokenise constants, identifiers as well as
	keywords.
- 	Working Python tokeniser.
-	Write the expression evaluator
- 	Write the basic executor and tokeniser and implement ASSERT.
- 	variables defint a-z and # (real) % (int) $ (string)

Fixes
=====
- 	Proper insert/delete in line editing.
- 	Add X to Monitor (warm start BASIC)
- 	FP optimisations for 4510 extended.
		- Anything in FPMacros (check XYZ usage for non shifts - may not be worth it)		
		- Integer negation in fputils.asm
		- Mantissa subtraction in fpdivide.asm
-	FP guard byte on subtract ????


0000		End
0001 		Colon token
10 xx 		String total length xx (ASCIIZ)
11 xx 		decimal/exponential sequence nnnnne[-]nnn length xx (ASCIIZ)
20-3F 		001a tttt followed by identifier bit 7 continuation ASCII.
40-7F  		3Fxx shift. decimals.
80-FB 		tokens
FC-FF xx 	shifted tokens.

* / mode and or xor + - >> << > >= < <= = <>

Hi-Lo order
===========

0000 		end of line.
01xx 		string (ASCIIZ) has to be copied into storage.
02xx		decimal/exponential sequence (ASCIIZ)
2000-3FFF 	01tt ttnn nnnn nnnn : 16 types 1024 keywords
4000-7FFF 	14 bit numeric data.
8000-FFFF	1attwwww  wwwwwwww 	identifier encoded 2 x 6 bit chars, a array follows 
								tt 00=default 01=int 10=float 11=string

